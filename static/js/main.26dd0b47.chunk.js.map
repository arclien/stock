{"version":3,"sources":["services/stock.js","context/StockContext.js","routers/routes.js","routers/CommonRoute.js","components/NavBar/Navbar.styles.js","components/NavBar/NavBar.js","hooks/useDebounce.js","constants/chart.js","constants/locale.js","components/StockChart/StockChart.js","constants/calendar.js","utils/day.js","components/StockCalendar/StockCalendar.styles.js","components/StockCalendar/StockCalendar.js","utils/chart.js","utils/utils.js","pages/Stock/Stock.styles.js","pages/Stock/Stock.js","pages/Dashboard/Dashboard.styles.js","pages/Dashboard/Dashboard.js","pages/Tag/Tag.styles.js","pages/Tag/Tag.js","utils/tag.js","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["fetchStockListFromCsv","a","fetch","window","location","origin","response","returnValue","text","data","split","forEach","row","columns","push","fetchStockDataFromCsv","stockNumber","slice","Context","createContext","Provider","STOCK_DATA_LIST","Consumer","StockProvider","children","useState","stockList","setStockList","useEffect","filter","el","length","reduce","acc","cur","code","name","nation","user_id","created_at","updated_at","tag_list","getStockData","stockCode","value","state","actions","StockContext","path","url","description","CommonRoute","rest","Container","styled","div","flexColumnCenterX","StockList","StockItem","Link","StockText","Chip","active","css","PageTitle","textExtraLarge","color","gray400","SearchInput","BaseInput","NavBar","pathname","useLocation","stock","Routes","tag","root","tagList","setTagList","currentStock","setCurrentStock","searchResults","setSearchResults","searchKeyword","setSearchKeyword","debounceSearchKeyword","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","useContext","tags","Set","map","concat","trim","replace","_stock","find","result","includes","getRelatedStockList","useCallback","_tag","to","key","type","placeholder","maxLength","onChange","target","chartOption","xAxis","yAxis","series","chartStyle","height","width","LOCALE","CURRENCY","defaultOption","legend","tooltip","trigger","axisPointer","animation","axisLabel","formatter","StockChart","chartData","onEvents","style","isLoaded","setLoaded","option","setOption","EchartsReact","setEchartsReact","_option","instance","getEchartsInstance","clear","ref","e","OffsetList","getTodayDate","dayjs","format","isWeekend","date","day","getAdjustDateToWeekDay","index","getDayOfWeek","subtract","flexCenterY","CalendarContainer","flexCenter","DateInput","MaskingInput","OffsetContainer","RadioButton","NewBaseButton","font","size","isChecked","yellow100","gray100","OffsetDate","Radio","Cursor","StockCalendar","startDate","setStartDate","endDate","setEndDate","calendarOffset","setCalendarOffset","handleChange","newDate","Date","today","handleDateByOffset","dir","_endDate","_startDate","offsetValue","add","isAfter","alert","isBefore","onClick","mask","required","outline","offset","handleCalendarOffset","getPercent","number","parseInt","Math","round","getCurrency","getIndexOfDayBetween","startDateIndex","findIndex","endDateIndex","getTargetDateValue","targetDate","_valueDate","getMinMaxValue","values","minValue","min","maxValue","max","Stock","useRouteMatch","params","history","useHistory","optionPercent","setOptionPercent","percentTargetDate","setPercentTargetDate","basePriceValue","setBasePriceValue","stockData","stockDataPercent","stockAll","targetDateValue","_basePriceValue","parseFloat","connectNulls","lineStyle","markLine","slient","symbol","label","position","distance","getData","click","Dashboard","optionHigh","setOptionHigh","optionExtraHigh","setOptionExtraHigh","optionLow","setOptionLow","optionUs","setOptionUs","stockDataHigh","stockDataExtraHigh","stockDataLow","stockDataUs","fetchAllData","Promise","all","then","currency","priceList","mean","Tag","tagName","tagStockList","setTagStockList","_tagStockList","getStockListByTag","AppBody","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.26dd0b47.chunk.js","sourcesContent":["export const fetchStockListFromCsv = async () => {\n  const response = await fetch(\n    `${window.location.origin}/stock/data/stock_list.csv`\n  );\n  const returnValue = [];\n  const data = await response.text();\n  const table = data.split(/\\n/);\n  table.forEach((row) => {\n    const columns = row.split(',');\n    returnValue.push(columns);\n  });\n  return returnValue;\n};\n\nexport const fetchStockDataFromCsv = async (stockNumber) => {\n  const response = await fetch(\n    `${window.location.origin}/stock/data/${stockNumber}.csv`\n  );\n  const returnValue = [];\n  const data = await response.text();\n  const table = data.split(/\\n/).slice(1);\n  table.forEach((row) => {\n    const columns = row.split(',');\n    returnValue.push(columns);\n  });\n  return returnValue;\n};\n","import React, { useState, createContext, useEffect } from 'react';\n\nimport { fetchStockListFromCsv, fetchStockDataFromCsv } from 'services/stock';\n\nconst Context = createContext();\n\nconst { Provider, Consumer: StockConsumer } = Context;\nlet STOCK_DATA_LIST = {};\n\nconst StockProvider = ({ children }) => {\n  const [stockList, setStockList] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const data = await fetchStockListFromCsv();\n      setStockList(data.slice(1).filter((el) => el.length > 1));\n      STOCK_DATA_LIST = data\n        .slice(1)\n        .filter((el) => el.length > 1)\n        .reduce(\n          (acc, cur) => ({\n            ...acc,\n            [cur[0]]: {\n              code: cur[0],\n              name: cur[1],\n              nation: cur[2],\n              user_id: cur[3],\n              created_at: cur[4],\n              updated_at: cur[5],\n              tag_list: cur[6],\n              data: [],\n            },\n          }),\n          {}\n        );\n    })();\n  }, []);\n\n  const getStockData = async (stockCode) => {\n    if (!stockCode) return [];\n\n    if (\n      STOCK_DATA_LIST[stockCode]?.data &&\n      STOCK_DATA_LIST[stockCode]?.data.length > 0\n    ) {\n      return STOCK_DATA_LIST[stockCode].data;\n    }\n    const data = await fetchStockDataFromCsv(stockCode);\n\n    STOCK_DATA_LIST = {\n      ...STOCK_DATA_LIST,\n      [stockCode]: {\n        ...STOCK_DATA_LIST[stockCode],\n        data,\n      },\n    };\n    return data;\n  };\n\n  return (\n    <Provider\n      value={{\n        state: {\n          stockList,\n          STOCK_DATA_LIST,\n        },\n        actions: { getStockData },\n      }}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nconst StockContext = Context;\n\nexport { StockProvider, StockConsumer, StockContext };\n","const root = {\n  path: '/stock',\n  url: '/stock',\n  description: 'Main Page',\n};\n\nconst stock = {\n  path: '/stock/code/:code',\n  url: '/stock/code/',\n  description: 'Stock Page',\n};\n\nconst tag = {\n  path: '/stock/tag/:tag',\n  url: '/stock/tag/',\n  description: 'Tag Page',\n};\n\nexport default {\n  root,\n  stock,\n  tag,\n};\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst CommonRoute = ({ children, path, ...rest }) => {\n  return (\n    <Route path={path} {...rest}>\n      {children}\n    </Route>\n  );\n};\n\nexport default CommonRoute;\n","import styled, { css } from 'styled-components';\nimport {\n  Chip,\n  flexColumnCenterX,\n  textExtraLarge,\n  gray400,\n  BaseInput,\n} from 'remember-ui';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n\nexport const StockList = styled.div`\n  width: 100%;\n`;\nexport const StockItem = styled(Link)`\n  display: inline-block;\n  margin: 5px;\n  cursor: pointer;\n  text-decoration: none;\n`;\n\nexport const StockText = styled(Chip)`\n  ${({ active }) =>\n    active &&\n    css`\n      font-weight: bold;\n    `}\n  &:hover,\n  &:focus {\n    font-weight: bold;\n  }\n`;\n\nexport const PageTitle = styled.div`\n  ${textExtraLarge({ color: gray400 })}\n`;\n\nexport const SearchInput = styled(BaseInput)`\n  width: 220px;\n`;\n","import React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport useDebounce from 'hooks/useDebounce';\nimport Routes from 'routers/routes';\nimport { StockContext } from 'context/StockContext';\n\nimport {\n  Container,\n  StockList,\n  StockItem,\n  StockText,\n  PageTitle,\n  SearchInput,\n} from './Navbar.styles';\n\nconst NavBar = () => {\n  const { pathname } = useLocation();\n  const { stock, tag, root } = Routes;\n  const [tagList, setTagList] = useState([]);\n  const [currentStock, setCurrentStock] = useState(null);\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const debounceSearchKeyword = useDebounce(searchKeyword, 500);\n\n  const {\n    state: { stockList },\n  } = useContext(StockContext);\n\n  useEffect(() => {\n    const tags = new Set([\n      ...stockList\n        .map((el) => el[6].split('/'))\n        .reduce((acc, cur) => acc.concat(cur), [])\n        .map((el) => el.trim().replace(/\"/gi, ''))\n        .filter((el) => el !== ''),\n    ]);\n    setTagList([...tags]);\n  }, [stockList]);\n\n  useEffect(() => {\n    const stockCode = pathname.replace(stock.url, '');\n    const _stock = stockList.find((el) => el[0] === stockCode);\n    setCurrentStock(_stock);\n  }, [pathname, stock.url, stockList]);\n\n  useEffect(() => {\n    (async function searchStockList() {\n      if (debounceSearchKeyword) {\n        const result = stockList.filter(\n          (el) =>\n            el[0].includes(debounceSearchKeyword) ||\n            el[1].includes(debounceSearchKeyword) ||\n            el[6].includes(debounceSearchKeyword)\n        );\n        setSearchResults([...result]);\n      } else {\n        setSearchResults([]);\n      }\n    })();\n  }, [debounceSearchKeyword, stockList]);\n\n  const getRelatedStockList = useCallback(\n    (_tag) => [\n      ...stockList.reduce(\n        (acc, cur) => (cur[6].includes(_tag) ? acc.concat([cur]) : acc),\n        []\n      ),\n    ],\n    [stockList]\n  );\n\n  const handleChange = ({ target: { value } }) => {\n    setSearchKeyword(value.trim());\n  };\n\n  return (\n    <Container>\n      <StockList>\n        <StockItem to={`${root.path}`}>\n          <StockText active={pathname === `${root.path}`}>\n            {`${root.description}`}\n          </StockText>\n        </StockItem>\n        {tagList &&\n          tagList.map((el) => (\n            <StockItem key={el} to={`${tag.url}${el}`}>\n              <StockText active={pathname === `${tag.url}${el}`}>\n                {`${el}`}\n              </StockText>\n            </StockItem>\n          ))}\n      </StockList>\n\n      {pathname.includes(tag.url) && (\n        <StockList>\n          <PageTitle>\n            {pathname.replace(tag.url, '')} 태그 관련 종목\n            <br />\n            {getRelatedStockList(pathname.replace(tag.url, '')).map((el) => (\n              <StockItem key={el} to={`${stock.url}${el[0]}`}>\n                <StockText active={pathname === `${stock.url}${el[0]}`}>\n                  {`${el[1]} (${el[0]})`}\n                </StockText>\n              </StockItem>\n            ))}\n          </PageTitle>\n        </StockList>\n      )}\n\n      {currentStock && (\n        <StockList>\n          <PageTitle>\n            {`${currentStock[1]} (${currentStock[0]})`} 종목 관련 태그\n            <br />\n            {currentStock[6].split('/').map((el) => (\n              <StockItem key={el} to={`${tag.url}${el}`}>\n                <StockText active={pathname === `${tag.url}${el}`}>\n                  {`${el}`}\n                </StockText>\n              </StockItem>\n            ))}\n          </PageTitle>\n        </StockList>\n      )}\n      <StockList>\n        <SearchInput\n          type=\"text\"\n          name=\"searchKeyword\"\n          placeholder=\"종목, 코드, 태그를 검색\"\n          maxLength={20}\n          value={searchKeyword}\n          onChange={handleChange}\n        />\n        {searchResults &&\n          searchResults.map((el) => (\n            <StockItem key={el[0]} to={`${stock.url}${el[0]}`}>\n              <StockText active={pathname === `${stock.url}${el[0]}`}>\n                {`${el[1]} (${el[0]})`}\n              </StockText>\n            </StockItem>\n          ))}\n      </StockList>\n    </Container>\n  );\n};\n\nexport default NavBar;\n","import { useState, useEffect } from 'react';\n\nexport default function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      // value 값이 바뀌면 이전 setTimeout을 clear 해줌\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","export const chartOption = { xAxis: {}, yAxis: {}, series: [] };\nexport const chartStyle = { height: '700px', width: '100%' };\n","export const LOCALE = {\n  US: 'us',\n  KO: 'ko',\n};\n\nexport const CURRENCY = {\n  US: '$',\n  KO: '원',\n};\n","import React, { useEffect, useState } from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nimport { chartStyle } from 'constants/chart';\nimport { CURRENCY } from 'constants/locale';\n\nconst defaultOption = {\n  legend: {\n    // data: stockList.map((el) => `${el[1]}/${el[0]}`),\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      animation: false,\n    },\n    // formatter: function (params) {\n    //   console.log(params);\n    //   return `날짜 : ${params[0].name} <br> 가격 : ${params[0].value} <br> 종목 :  ${params[0].seriesName}`;\n    // },\n  },\n  xAxis: {\n    type: 'category',\n    data: [],\n  },\n  yAxis: {\n    type: 'value',\n    axisLabel: {\n      formatter: `{value} ${CURRENCY.KO}`,\n    },\n    // min: 0,\n    // max: 0,\n    // interval: 0,\n  },\n  series: [],\n};\n\nconst StockChart = ({\n  chartData,\n  onEvents,\n  stockList,\n  style = { ...chartStyle },\n}) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({ ...defaultOption });\n  const [EchartsReact, setEchartsReact] = useState(null);\n\n  useEffect(() => {\n    const _option = {\n      legend: {\n        ...defaultOption.legend,\n        data: stockList.map((el) => `${el[1]}/${el[0]}`),\n      },\n      tooltip: {\n        ...defaultOption.tooltip,\n      },\n      xAxis: {\n        ...defaultOption.xAxis,\n        ...chartData.xAxis,\n      },\n      yAxis: {\n        ...defaultOption.yAxis,\n        ...chartData.yAxis,\n      },\n      series: [...defaultOption.series, ...chartData.series],\n    };\n    setOption(_option);\n\n    const instance = EchartsReact?.getEchartsInstance();\n    if (instance) {\n      instance.clear();\n      instance.setOption(_option);\n    }\n\n    setLoaded(true);\n  }, [EchartsReact, chartData, stockList]);\n\n  return (\n    <>\n      {isLoaded && (\n        <ReactEcharts\n          ref={(e) => {\n            setEchartsReact(e);\n          }}\n          style={style}\n          option={option}\n          onEvents={onEvents}\n        />\n      )}\n    </>\n  );\n};\n\nexport default StockChart;\n","export const CalendarFormat = 'YYYY-MM-DD';\nexport const defaultOffset = '1 year';\nexport const OffsetList = [\n  { name: '1 month', value: 1 },\n  { name: '3 month', value: 3 },\n  { name: '6 month', value: 6 },\n  { name: '1 year', value: 12 },\n  { name: '3 year', value: 36 },\n  { name: '5 year', value: 60 },\n];\nexport const chartStartDate = '2015-01-02';\n","import dayjs from 'dayjs';\n\nimport { CalendarFormat } from 'constants/calendar';\n\nexport const getTodayDate = () => dayjs().format(CalendarFormat);\n\nexport const isWeekend = (date) =>\n  dayjs(date).day() === 0 || dayjs(date).day() === 6;\n\nexport const getDayOfWeek = (date) => dayjs(date).day();\n\nexport const getAdjustDateToWeekDay = (date) => {\n  const day = getDayOfWeek(date);\n  const index = day === 0 ? 2 : 1;\n  return dayjs(date).subtract(index, 'day').format(CalendarFormat);\n};\n","import styled, { css } from 'styled-components';\nimport {\n  flexCenter,\n  Radio,\n  MaskingInput,\n  flexCenterY,\n  NewBaseButton,\n  font,\n  text,\n  gray100,\n  yellow100,\n} from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexCenterY}\n\n  width:100%;\n  justify-content: space-between;\n`;\n\nexport const CalendarContainer = styled.div`\n  ${flexCenter}\n`;\n\nexport const DateInput = styled(MaskingInput)`\n  padding: 0px 10px;\n`;\n\nexport const OffsetContainer = styled.div`\n  ${flexCenter}\n  padding:20px;\n`;\n\nexport const RadioButton = styled(NewBaseButton)`\n  ${font({ size: '15px', color: text })}\n\n  ${({ isChecked }) =>\n    isChecked &&\n    css`\n      background-color: ${yellow100};\n    `}\n\n  border-radius:0px;\n  border: 1px solid ${gray100};\n`;\n\nexport const OffsetDate = styled(Radio)``;\n\nexport const Cursor = styled.div`\n  cursor: pointer;\n`;\n","import React, { useState } from 'react';\nimport dayjs from 'dayjs';\n\nimport {\n  defaultOffset,\n  OffsetList,\n  chartStartDate,\n  CalendarFormat,\n} from 'constants/calendar';\nimport { isWeekend, getAdjustDateToWeekDay, getTodayDate } from 'utils/day';\n\nimport {\n  CalendarContainer,\n  DateInput,\n  Container,\n  OffsetContainer,\n  OffsetDate,\n  Cursor,\n  RadioButton,\n} from './StockCalendar.styles';\n\nconst StockCalendar = ({ startDate, setStartDate, endDate, setEndDate }) => {\n  const [calendarOffset, setCalendarOffset] = useState(defaultOffset);\n\n  const handleChange = (e) => {\n    const target = e.target.name;\n    const date = e.target.value;\n    if (date.length === 10) {\n      const newDate = new Date(date);\n      const today = new Date();\n      const _chartStartDate = new Date(chartStartDate);\n      if (+newDate >= +_chartStartDate && +newDate <= +today) {\n        target === 'startDate' ? setStartDate(date) : setEndDate(date);\n      }\n    }\n  };\n\n  const handleCalendarOffset = (offset, offsetValue) => {\n    let date = dayjs(endDate, CalendarFormat);\n    date = date.subtract(offsetValue, 'month');\n    setCalendarOffset(offset);\n    if (isWeekend(date)) {\n      date = getAdjustDateToWeekDay(date);\n    }\n    setStartDate(dayjs(date).format(CalendarFormat));\n  };\n\n  const handleDateByOffset = (dir) => {\n    let _endDate = dayjs(endDate, CalendarFormat);\n    let _startDate = dayjs(startDate, CalendarFormat);\n    const offsetValue = OffsetList.find((el) => el.name === calendarOffset)\n      .value;\n    if (dir === 'next') {\n      _endDate = _endDate.add(offsetValue, 'month');\n      _startDate = _startDate.add(offsetValue, 'month');\n      if (dayjs(_endDate).isAfter(getTodayDate())) {\n        alert('오늘 이후의 날짜는 선택할 수 없습니다.');\n        return;\n      }\n    } else if (dir === 'prev') {\n      _endDate = _endDate.subtract(offsetValue, 'month');\n      _startDate = _startDate.subtract(offsetValue, 'month');\n\n      if (dayjs(_startDate).isBefore(chartStartDate)) {\n        alert(`${chartStartDate} 이전의 날짜는 선택할 수 없습니다.`);\n        return;\n      }\n    }\n\n    if (isWeekend(_endDate)) {\n      _endDate = getAdjustDateToWeekDay(_endDate);\n    }\n    if (isWeekend(_startDate)) {\n      _startDate = getAdjustDateToWeekDay(_startDate);\n    }\n    setEndDate(dayjs(_endDate).format(CalendarFormat));\n    setStartDate(dayjs(_startDate).format(CalendarFormat));\n  };\n\n  return (\n    <Container>\n      <CalendarContainer>\n        <Cursor onClick={() => handleDateByOffset('prev')}>{'<'}</Cursor>\n        <DateInput\n          mask={[\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n            '-',\n            /[0-9]/,\n            /[0-9]/,\n            '-',\n            /[0-9]/,\n            /[0-9]/,\n          ]}\n          type=\"text\"\n          name=\"startDate\"\n          value={startDate}\n          required\n          onChange={handleChange}\n          placeholder=\"8자리 숫자 입력(2015-01-02)\"\n        />\n        ~\n        <DateInput\n          mask={[\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n            '-',\n            /[0-9]/,\n            /[0-9]/,\n            '-',\n            /[0-9]/,\n            /[0-9]/,\n          ]}\n          type=\"text\"\n          name=\"endDate\"\n          value={endDate}\n          required\n          onChange={handleChange}\n          placeholder=\"8자리 숫자 입력(2015-01-02)\"\n        />\n        <Cursor onClick={() => handleDateByOffset('next')}>{'>'}</Cursor>\n      </CalendarContainer>\n      <OffsetContainer>\n        {OffsetList &&\n          OffsetList.map((el) => (\n            <RadioButton\n              isChecked={calendarOffset === el.name}\n              size=\"medium\"\n              outline\n              key={el.value}\n            >\n              <OffsetDate\n                isChecked={calendarOffset === el.name}\n                onClick={() => handleCalendarOffset(el.name, el.value)}\n              />\n              <span>{el.name}</span>\n            </RadioButton>\n          ))}\n      </OffsetContainer>\n    </Container>\n  );\n};\n\nexport default StockCalendar;\n","import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\n\nimport { CalendarFormat } from 'constants/calendar';\nimport { LOCALE, CURRENCY } from 'constants/locale';\nimport { getRoundTwoPrecision } from 'utils/utils';\n\nexport const getPercent = (target, value) => {\n  return getRoundTwoPrecision(\n    ((parseInt(value, 10) - parseInt(target, 10)) / parseInt(target, 10)) * 100\n  );\n};\n\nexport const generateDayBetween = (startDate, endDate) => {\n  let _start = dayjs(startDate).format(CalendarFormat);\n  const _end = dayjs(endDate).format(CalendarFormat);\n  const days = [];\n\n  dayjs.extend(isSameOrBefore);\n  while (dayjs(_start).isSameOrBefore(_end)) {\n    days.push([_start, '0', '0', '0', '0', '0', '0']);\n    _start = dayjs(_start).add(1, 'day').format(CalendarFormat);\n  }\n\n  return days;\n};\n\nexport const getCurrency = (stock) => {\n  const nation = (stock && stock[2]) || '';\n  if (nation === LOCALE.KO) {\n    return CURRENCY.KO;\n  }\n  if (nation === LOCALE.US) {\n    return CURRENCY.US;\n  }\n  return '';\n};\n\nexport const getIndexOfDayBetween = (stock, startDate, endDate) => {\n  let startDateIndex = stock.findIndex(\n    (el) => el[0] === dayjs(startDate).format(CalendarFormat)\n  );\n  startDateIndex = startDateIndex <= 0 ? 0 : startDateIndex;\n\n  let endDateIndex = stock.findIndex(\n    (el) => el[0] === dayjs(endDate).format(CalendarFormat)\n  );\n  endDateIndex = endDateIndex <= 0 ? stock.length - 1 : endDateIndex;\n  return { startDateIndex, endDateIndex };\n};\n\nexport const getTargetDateValue = (stock, targetDate) => {\n  let value = null;\n  if (stock.find((el) => el[0] === targetDate)) {\n    value = parseInt(stock.find((el) => el[0] === targetDate)[4], 10);\n  }\n  if (!value || value === 0) {\n    const _valueDate = stock.find((el) => el[4] !== '0');\n    value = _valueDate ? _valueDate[4] : null;\n  }\n  return value;\n};\n\nexport const getMinMaxValue = (stock) => {\n  const values = stock\n    .map((el) => {\n      if (el[4] !== '0') return parseInt(el[4], 10);\n      return null;\n    })\n    .filter((el) => el);\n\n  const minValue = parseInt(Math.min(...values), 10);\n  const maxValue = parseInt(Math.max(...values), 10);\n  return { minValue, maxValue };\n};\n","export const getRoundTwoPrecision = (number) => Math.round(number * 100) / 100;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useHistory } from 'react-router';\n\nimport Routes from 'routers/routes';\nimport { chartOption } from 'constants/chart';\nimport { LOCALE } from 'constants/locale';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport {\n  getCurrency,\n  getPercent,\n  getIndexOfDayBetween,\n  getTargetDateValue,\n  getMinMaxValue,\n} from 'utils/chart';\nimport { StockContext } from 'context/StockContext';\n\nimport { Container } from './Stock.styles';\n\nconst Stock = () => {\n  const {\n    params: { code: stockCode },\n  } = useRouteMatch();\n  const {\n    state: { stockList },\n    actions: { getStockData },\n  } = useContext(StockContext);\n\n  const history = useHistory();\n  const { root } = Routes;\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionPercent, setOptionPercent] = useState({\n    ...chartOption,\n  });\n\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n  const [percentTargetDate, setPercentTargetDate] = useState(startDate);\n  const [basePriceValue, setBasePriceValue] = useState(null);\n\n  useEffect(() => {\n    const getData = async () => {\n      setLoaded(false);\n      const currentStock = stockList.find((el) => el[0] === stockCode);\n      if (stockList.length > 0 && !currentStock) history.replace(root.path);\n\n      const stockData = { ...chartOption };\n      const stockDataPercent = { ...chartOption };\n\n      const stockAll = await getStockData(stockCode);\n      const { startDateIndex, endDateIndex } = getIndexOfDayBetween(\n        stockAll,\n        startDate,\n        endDate\n      );\n\n      const stock = stockAll.slice(startDateIndex, endDateIndex + 1);\n\n      const targetDateValue = getTargetDateValue(stock, percentTargetDate);\n\n      const _basePriceValue =\n        currentStock &&\n        currentStock.length > 0 &&\n        parseInt(currentStock[7], 10);\n\n      setBasePriceValue(_basePriceValue);\n\n      const { minValue, maxValue } = getMinMaxValue(stock);\n\n      // x축\n      stockData.xAxis = {\n        ...stockData.xAxis,\n        data: stock.map((el) => el[0]),\n      };\n      stockDataPercent.xAxis = {\n        ...stockData.xAxis,\n      };\n\n      // y축\n      stockData.yAxis = {\n        ...stockData.yAxis,\n        min: minValue,\n        max: maxValue,\n        axisLabel: {\n          formatter: `{value} ${getCurrency(currentStock)}`,\n        },\n      };\n      stockDataPercent.yAxis = {\n        ...stockDataPercent.yAxis,\n        axisLabel: {\n          formatter: '{value} %',\n        },\n      };\n\n      // series Data\n      stockData.series = [\n        ...stockData.series,\n        {\n          data: stock.map((el) => {\n            if (el[4] !== '0') {\n              if (currentStock && currentStock[2] === LOCALE.KO) {\n                return parseInt(el[4], 10);\n              }\n              if (currentStock && currentStock[2] === LOCALE.US) {\n                return parseFloat(el[4]);\n              }\n              return parseInt(el[4], 10);\n            }\n            return null;\n          }),\n          type: 'line',\n          connectNulls: true,\n          name: `${currentStock ? currentStock[1] : ''}/${stockCode}`,\n          lineStyle: {\n            color: '#ff457e',\n          },\n          markLine: {\n            slient: true,\n            symbol: ['none', 'none'],\n            lineStyle: {\n              color: '#f58c23',\n              width: 2,\n              type: 'solid',\n            },\n            data: [\n              {\n                name: 'Base Price',\n                yAxis: basePriceValue || 0,\n                label: {\n                  formatter: '{c}',\n                  position: 'end',\n                  distance: 10,\n                },\n              },\n            ],\n          },\n        },\n      ];\n\n      stockDataPercent.series = [\n        ...stockDataPercent.series,\n        {\n          data: stock.map((el) => {\n            if (el[4] !== '0')\n              return getPercent(targetDateValue, parseInt(el[4], 10));\n            return null;\n          }),\n          type: 'line',\n          connectNulls: true,\n          name: `${currentStock ? currentStock[1] : ''}/${stockCode}`,\n          lineStyle: {\n            color: '#ff457e',\n            width: 3,\n          },\n        },\n        {\n          data: stock.map((el) => {\n            if (el[4] !== '0')\n              return getPercent(_basePriceValue, parseInt(el[4], 10));\n            return null;\n          }),\n          type: 'line',\n          connectNulls: true,\n          name: `${currentStock ? currentStock[1] : ''}/${stockCode}`,\n          lineStyle: {\n            color: 'rgba(87,159,251,.5)',\n          },\n        },\n      ];\n\n      setOption(stockData);\n      setOptionPercent(stockDataPercent);\n      setLoaded(true);\n    };\n\n    getData();\n  }, [\n    basePriceValue,\n    endDate,\n    getStockData,\n    history,\n    percentTargetDate,\n    root.path,\n    startDate,\n    stockCode,\n    stockList,\n  ]);\n\n  const onChartClick = (params) => {\n    const { name } = params;\n    setPercentTargetDate(name);\n  };\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && (\n        <>\n          종가 그래프( Y축 : 기간 내 최저가 ~ 최고가)\n          <StockChart\n            stockList={stockList}\n            chartData={option}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n      {isLoaded && (\n        <>\n          {percentTargetDate}일( 기준일 = 0% ) 대비 상승/하락 률 ( 그래프 클릭\n          날짜 변경 )\n          <br />\n          {basePriceValue > 0 && (\n            <>기준 가격(0%): {basePriceValue} 원 대비 상승/하락 률</>\n          )}\n          <StockChart\n            stockList={stockList}\n            chartData={optionPercent}\n            onEvents={{\n              click: onChartClick,\n            }}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Stock;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState, useContext } from 'react';\n\nimport { chartOption } from 'constants/chart';\nimport { LOCALE } from 'constants/locale';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport { getCurrency, getIndexOfDayBetween } from 'utils/chart';\nimport { StockContext } from 'context/StockContext';\n\nimport { Container } from './Dashboard.styles';\n\nconst Dashboard = () => {\n  const {\n    state: { stockList },\n    actions: { getStockData },\n  } = useContext(StockContext);\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionHigh, setOptionHigh] = useState({\n    ...chartOption,\n  });\n  const [optionExtraHigh, setOptionExtraHigh] = useState({\n    ...chartOption,\n  });\n  const [optionLow, setOptionLow] = useState({\n    ...chartOption,\n  });\n  const [optionUs, setOptionUs] = useState({\n    ...chartOption,\n  });\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n\n  useEffect(() => {\n    const stockData = { ...chartOption };\n    const stockDataHigh = { ...chartOption };\n    const stockDataExtraHigh = { ...chartOption };\n    const stockDataLow = { ...chartOption };\n    const stockDataUs = { ...chartOption };\n    const fetchAllData = [];\n\n    stockList\n      .map((el) => el[0])\n      .forEach(async (number) => {\n        fetchAllData.push(getStockData(number));\n      });\n\n    Promise.all(fetchAllData).then((data) => {\n      data.forEach((stockAll, index) => {\n        const currentStock = stockList[index];\n        const currency = (currentStock && currentStock[2]) || LOCALE.KO;\n        const { startDateIndex, endDateIndex } = getIndexOfDayBetween(\n          stockAll,\n          startDate,\n          endDate\n        );\n\n        const stock = stockAll.slice(startDateIndex, endDateIndex + 1);\n\n        const priceList = stock\n          .slice(1)\n          .map((el) => {\n            if (el[4] !== '0') return parseInt(el[4], 10);\n            return null;\n          })\n          .filter((el) => el);\n\n        const mean = (Math.min(...priceList) + Math.max(...priceList)) / 2;\n        const ref =\n          // eslint-disable-next-line no-nested-ternary\n          currency === LOCALE.US\n            ? stockDataUs\n            : // eslint-disable-next-line no-nested-ternary\n            mean > 400000\n            ? stockDataExtraHigh\n            : // eslint-disable-next-line no-nested-ternary\n            mean > 200000\n            ? stockDataHigh\n            : mean < 50000\n            ? stockDataLow\n            : stockData;\n\n        ref.xAxis = {\n          ...ref.xAxis,\n          data: stock.map((el) => el[0]),\n        };\n\n        ref.yAxis = {\n          ...ref.yAxis,\n          axisLabel: {\n            formatter: `{value} ${getCurrency(currentStock)}`,\n          },\n        };\n\n        ref.series = [\n          ...ref.series,\n          {\n            data: stock.map((el) => {\n              if (el[4] !== '0') {\n                if (currentStock && currentStock[2] === LOCALE.KO) {\n                  return parseInt(el[4], 10);\n                }\n                if (currentStock && currentStock[2] === LOCALE.US) {\n                  return parseFloat(el[4]);\n                }\n                return parseInt(el[4], 10);\n              }\n              return null;\n            }),\n            type: 'line',\n            connectNulls: true,\n            name: `${currentStock[1]}/${currentStock[0]}`,\n          },\n        ];\n      });\n      setOption(stockData);\n      setOptionHigh(stockDataHigh);\n      setOptionExtraHigh(stockDataExtraHigh);\n      setOptionLow(stockDataLow);\n      setOptionUs(stockDataUs);\n      setLoaded(true);\n    });\n  }, [startDate, endDate, stockList, getStockData]);\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && (\n        <StockChart stockList={stockList} chartData={optionExtraHigh} />\n      )}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionHigh} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={option} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionLow} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionUs} />}\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useHistory } from 'react-router';\n\nimport Routes from 'routers/routes';\nimport { chartOption } from 'constants/chart';\nimport { LOCALE } from 'constants/locale';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport {\n  getCurrency,\n  getPercent,\n  getIndexOfDayBetween,\n  getTargetDateValue,\n} from 'utils/chart';\nimport { getStockListByTag } from 'utils/tag';\nimport { StockContext } from 'context/StockContext';\n\nimport { Container } from './Tag.styles';\n\nconst Tag = () => {\n  const {\n    params: { tag: tagName },\n  } = useRouteMatch();\n  const {\n    state: { stockList },\n    actions: { getStockData },\n  } = useContext(StockContext);\n\n  const history = useHistory();\n  const { root } = Routes;\n\n  const [tagStockList, setTagStockList] = useState([]);\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionUs, setOptionUs] = useState({\n    ...chartOption,\n  });\n  const [optionPercent, setOptionPercent] = useState({\n    ...chartOption,\n  });\n\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n  const [percentTargetDate, setPercentTargetDate] = useState(startDate);\n\n  useEffect(() => {\n    const _tagStockList = getStockListByTag(stockList, tagName);\n    if (stockList.length > 0 && _tagStockList.length === 0)\n      history.replace(root.path);\n\n    setTagStockList(_tagStockList);\n    const stockData = { ...chartOption };\n    const stockDataUs = { ...chartOption };\n    const stockDataPercent = { ...chartOption };\n    const fetchAllData = [];\n\n    _tagStockList\n      .map((el) => el[0])\n      .forEach(async (number) => {\n        fetchAllData.push(getStockData(number));\n      });\n\n    Promise.all(fetchAllData).then((data) => {\n      data.forEach((stockAll, index) => {\n        const currentStock = _tagStockList[index];\n\n        const currency = (currentStock && currentStock[2]) || LOCALE.KO;\n\n        const { startDateIndex, endDateIndex } = getIndexOfDayBetween(\n          stockAll,\n          startDate,\n          endDate\n        );\n\n        const stock = stockAll.slice(startDateIndex, endDateIndex + 1);\n\n        const targetDateValue = getTargetDateValue(stock, percentTargetDate);\n\n        const ref = currency === LOCALE.US ? stockDataUs : stockData;\n\n        ref.xAxis = {\n          ...ref.xAxis,\n          data: stock.map((el) => el[0]),\n        };\n        stockDataPercent.xAxis = {\n          ...ref.xAxis,\n        };\n\n        ref.yAxis = {\n          ...ref.yAxis,\n          axisLabel: {\n            formatter: `{value} ${getCurrency(currentStock)}`,\n          },\n        };\n        stockDataPercent.yAxis = {\n          ...stockDataPercent.yAxis,\n          axisLabel: {\n            formatter: '{value} %',\n          },\n        };\n\n        ref.series = [\n          ...ref.series,\n          {\n            data: stock.map((el) => {\n              if (el[4] !== '0') {\n                if (currentStock && currentStock[2] === LOCALE.KO) {\n                  return parseInt(el[4], 10);\n                }\n                if (currentStock && currentStock[2] === LOCALE.US) {\n                  return parseFloat(el[4]);\n                }\n                return parseInt(el[4], 10);\n              }\n              return null;\n            }),\n            type: 'line',\n            connectNulls: true,\n            name: `${currentStock[1]}/${currentStock[0]}`,\n          },\n        ];\n\n        stockDataPercent.series = [\n          ...stockDataPercent.series,\n          {\n            data: stock.map((el) => {\n              if (el[4] !== '0')\n                return getPercent(targetDateValue, parseInt(el[4], 10));\n              return null;\n            }),\n            type: 'line',\n            connectNulls: true,\n            name: `${currentStock[1]}/${currentStock[0]}`,\n          },\n        ];\n      });\n      setOption(stockData);\n      setOptionUs(stockDataUs);\n      setOptionPercent(stockDataPercent);\n      setLoaded(true);\n    });\n  }, [\n    startDate,\n    endDate,\n    stockList,\n    tagName,\n    history,\n    root.path,\n    percentTargetDate,\n    getStockData,\n  ]);\n\n  const onChartClick = (params) => {\n    const { name } = params;\n    setPercentTargetDate(name);\n  };\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && <StockChart stockList={tagStockList} chartData={option} />}\n\n      {isLoaded && tagStockList.find((el) => el[2] === LOCALE.US) && (\n        <StockChart stockList={tagStockList} chartData={optionUs} />\n      )}\n      {isLoaded && (\n        <>\n          {percentTargetDate}일( 기준일 = 0% ) 대비 상승/하락 률 ( 그래프 클릭\n          날짜 변경 )\n          <StockChart\n            stockList={tagStockList}\n            chartData={optionPercent}\n            onEvents={{\n              click: onChartClick,\n            }}\n          />\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Tag;\n","export const getStockListByTag = (stockList, tag) => {\n  return stockList.filter((el) => el[6] && el[6].includes(tag));\n};\n","import styled from 'styled-components';\n\nexport const AppBody = styled.div`\n  height: 100%;\n`;\n","import React from 'react';\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom';\nimport { GlobalTheme } from 'remember-ui';\n\nimport { StockProvider } from 'context/StockContext';\nimport Routes from 'routers/routes';\nimport CommonRoute from 'routers/CommonRoute';\nimport NavBar from 'components/NavBar/NavBar';\nimport Stock from 'pages/Stock/Stock';\nimport Dashboard from 'pages/Dashboard/Dashboard';\nimport Tag from 'pages/Tag/Tag';\n\nimport { AppBody } from './App.styles';\n\nfunction App() {\n  const { root, stock, tag } = Routes;\n\n  return (\n    <StockProvider>\n      <BrowserRouter>\n        <AppBody>\n          <GlobalTheme />\n          <NavBar />\n          <Switch>\n            <CommonRoute path={stock.path}>\n              <Stock />\n            </CommonRoute>\n            <CommonRoute path={tag.path}>\n              <Tag />\n            </CommonRoute>\n            <CommonRoute path={root.path}>\n              <Dashboard />\n            </CommonRoute>\n            <Redirect to={root.path} />\n          </Switch>\n        </AppBody>\n      </BrowserRouter>\n    </StockProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}