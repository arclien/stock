{"version":3,"sources":["services/stock.js","constants/trello.js","services/trelloApi.js","services/trello.js","context/StockContext.js","routers/routes.js","routers/CommonRoute.js","components/NavBar/Navbar.styles.js","components/NavBar/NavBar.js","hooks/useDebounce.js","constants/chart.js","constants/locale.js","components/StockChart/StockChart.js","constants/calendar.js","utils/day.js","components/StockCalendar/StockCalendar.styles.js","components/StockCalendar/StockCalendar.js","utils/chart.js","utils/utils.js","pages/Stock/Stock.styles.js","pages/Stock/Stock.js","pages/StockList/StockList.styles.js","pages/StockList/StockList.js","pages/Dashboard/Dashboard.styles.js","pages/Dashboard/Dashboard.js","pages/Tag/Tag.styles.js","pages/Tag/Tag.js","utils/tag.js","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["fetchStockDataFromCsv","stockNumber","a","fetch","window","location","origin","response","returnValue","text","data","split","slice","forEach","row","columns","push","process","TRELLO_BOARD_STUDY_ID","REACT_APP_TRELLO_BOARD_STUDY_ID","TRELLO_LIST_ID","REACT_APP_TRELLO_LIST_ID","TRELLO_API_KEY","REACT_APP_TRELLO_CARD_ID","REACT_APP_TRELLO_API_KEY","Trello","require","reqTrello","callback","Promise","resolve","then","localStorage","getItem","existingToken","auth","name","scope","read","write","account","expiration","token","key","catch","getTrello","path","params","get","postTrello","post","getLabelsOnBoard","listId","getCardsOnBoard","field","createCard","stock","idList","labels","code","nation","createdAt","updatedAt","tags","basePrice","length","idLabels","tag","label","find","_label","trim","id","desc","created_at","base_price","newCard","JSON","stringify","pos","due","Date","toISOString","toString","Context","createContext","Provider","STOCK_DATA_LIST","Consumer","StockProvider","children","useState","stockList","setStockList","tagList","setTagList","useEffect","_labels","reduce","acc","cur","_cards","_stockList","map","card","parse","join","user_id","updated_at","tag_list","getStockData","stockCode","value","state","actions","StockContext","url","description","CommonRoute","rest","Container","styled","div","flexColumnCenterX","StockList","StockItem","Link","StockText","Chip","active","css","mobileOnly","font","size","color","gold200","PageTitle","textExtraLarge","gray400","SearchInput","BaseInput","NavBar","pathname","useLocation","Routes","root","stockListPage","currentStock","setCurrentStock","searchResults","setSearchResults","searchKeyword","setSearchKeyword","debounceSearchKeyword","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","useContext","replace","_stock","el","result","filter","includes","getRelatedStockList","useCallback","_tag","concat","to","type","placeholder","maxLength","onChange","target","chartOption","xAxis","yAxis","series","chartStyle","height","width","LOCALE","US","KO","CURRENCY","defaultOption","legend","tooltip","trigger","axisPointer","animation","axisLabel","formatter","StockChart","chartData","onEvents","style","isLoaded","setLoaded","option","setOption","EchartsReact","setEchartsReact","_option","instance","getEchartsInstance","clear","ref","e","OffsetList","getTodayDate","dayjs","format","isWeekend","date","day","getAdjustDateToWeekDay","index","getDayOfWeek","subtract","flexCenterY","CalendarContainer","flexCenter","DateInput","MaskingInput","OffsetContainer","RadioButton","NewBaseButton","isChecked","yellow100","gray100","OffsetDate","Radio","Cursor","StockCalendar","startDate","setStartDate","endDate","setEndDate","calendarOffset","setCalendarOffset","handleChange","newDate","today","handleDateByOffset","dir","_endDate","_startDate","offsetValue","add","isAfter","isBefore","onClick","mask","required","outline","offset","handleCalendarOffset","getPercent","number","parseInt","Math","round","getCurrency","getIndexOfDayBetween","startDateIndex","findIndex","endDateIndex","getTargetDateValue","targetDate","_valueDate","getMinMaxValue","values","minValue","min","maxValue","max","Stock","useRouteMatch","history","useHistory","optionPercent","setOptionPercent","percentTargetDate","setPercentTargetDate","basePriceValue","setBasePriceValue","stockData","stockDataPercent","stockAll","targetDateValue","_basePriceValue","parseFloat","connectNulls","lineStyle","markLine","slient","symbol","position","distance","getData","click","flexContainer","List","Input","StockInput","Dropdown","BasePopover","DropdownList","PopoverItem","DropdownText","AddButton","stockDefaultValue","userId","cards","setCards","setLabels","setStock","prevState","res","disabled","placement","content","Object","keys","_nation","readOnly","Dashboard","optionHigh","setOptionHigh","optionExtraHigh","setOptionExtraHigh","optionLow","setOptionLow","optionUs","setOptionUs","stockDataHigh","stockDataExtraHigh","stockDataLow","stockDataUs","fetchAllData","all","currency","priceList","mean","Tag","tagName","tagStockList","setTagStockList","_tagStockList","getStockListByTag","AppBody","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.3df13d3c.chunk.js","sourcesContent":["export const fetchStockListFromCsv = async () => {\n  const response = await fetch(\n    `${window.location.origin}/stock/data/stock_list.csv`\n  );\n  const returnValue = [];\n  const data = await response.text();\n  const table = data.split(/\\n/);\n  table.forEach((row) => {\n    const columns = row.split(',');\n    returnValue.push(columns);\n  });\n  return returnValue;\n};\n\nexport const fetchStockDataFromCsv = async (stockNumber) => {\n  const response = await fetch(\n    `${window.location.origin}/stock/data/${stockNumber}.csv`\n  );\n  const returnValue = [];\n  const data = await response.text();\n  const table = data.split(/\\n/).slice(1);\n  table.forEach((row) => {\n    const columns = row.split(',');\n    returnValue.push(columns);\n  });\n  return returnValue;\n};\n","export const {\n  REACT_APP_TRELLO_BOARD_STUDY_ID: TRELLO_BOARD_STUDY_ID,\n  REACT_APP_TRELLO_LIST_ID: TRELLO_LIST_ID,\n  REACT_APP_TRELLO_CARD_ID: TRELLO_CARD_ID,\n  REACT_APP_TRELLO_API_KEY: TRELLO_API_KEY,\n} = process.env;\n\nexport const TRELLO_COLLECTION_TYPE = {\n  CARDS: 'cards',\n  CHECKLISTS: 'checklists',\n  BOARDS: 'boards',\n  LISTS: 'lists',\n  MEMBERS: 'members',\n  ORGANIZATIONS: 'organizations',\n  ACTIONS: 'actions',\n};\n\nexport const TRELLO_LABEL_COLOR = [\n  'yellow',\n  'purple',\n  'blue',\n  'red',\n  'green',\n  'orange',\n  'black',\n  'sky',\n  'pink',\n  'lime',\n];\n","import { TRELLO_API_KEY } from 'constants/trello';\n\nconst TrelloWeb = require('trello-web');\n\nconst Trello = new TrelloWeb(TRELLO_API_KEY);\n\nconst reqTrello = (callback) => {\n  return Promise.resolve()\n    .then(() => localStorage.getItem('trello_token'))\n    .then((existingToken) => {\n      if (existingToken) {\n        Trello.token = existingToken;\n        Trello.key = TRELLO_API_KEY;\n      } else {\n        return Trello.auth({\n          name: 'Stock App',\n          scope: {\n            read: true,\n            write: true,\n            account: true,\n          },\n          expiration: 'never',\n        });\n      }\n    })\n    .then(() => {\n      return callback();\n    })\n    .catch(() => {\n      // console.log(\n      //   'something bad happened, or the user took too long to authorize.',\n      //   e\n      // );\n    });\n};\n\nexport const getTrello = (path, params = {}) => {\n  return reqTrello(() => {\n    return Trello.get(`/1/${path}`, params);\n  });\n};\n\nexport const postTrello = (path, params = {}) => {\n  return reqTrello(() => {\n    return Trello.post(`/1/${path}`, params);\n  });\n};\n\nexport const putTrello = (path, params = {}) => {\n  return reqTrello(() => {\n    return Trello.put(`/1/${path}`, params);\n  });\n};\n\nexport const deleteTrello = (path, params = {}) => {\n  return reqTrello(() => {\n    return Trello.delete(`/1/${path}`, params);\n  });\n};\n\nexport const getColletionTrello = (type, id, params = {}) => {\n  return reqTrello(() => {\n    return Trello.get(`/1/${type}/${id}`, params);\n  });\n};\n","import { getRandomInt } from 'utils/utils';\nimport { getTrello, getColletionTrello, postTrello } from 'services/trelloApi';\nimport {\n  TRELLO_COLLECTION_TYPE,\n  TRELLO_LABEL_COLOR,\n  // TRELLO_BOARD_STUDY_ID,\n} from 'constants/trello';\n\nexport const getMe = () => {\n  return getTrello('members/me');\n};\n\nexport const getMyBoards = () => {\n  return getTrello('members/me/boards');\n};\n\n/** \n################ Get from board\n* */\nexport const getListsOnBoard = (listId, field = 'all') => {\n  return getTrello(`boards/${listId}/lists/${field}`);\n};\n\nexport const getLabelsOnBoard = (listId) => {\n  return getTrello(`boards/${listId}/labels`);\n};\n\nexport const getCardsOnBoard = (listId, field = 'all') => {\n  return getTrello(`boards/${listId}/cards/${field}`);\n};\n\nexport const getCardOnBoardById = (listId, cardId) => {\n  return getTrello(`boards/${listId}/cards/${cardId}`);\n};\n\n/** \n################ Get collections by id\n* */\nexport const getCardById = (cardId) => {\n  return getColletionTrello(TRELLO_COLLECTION_TYPE.CARDS, cardId);\n};\n\nexport const getListById = (listId) => {\n  return getColletionTrello(TRELLO_COLLECTION_TYPE.LISTS, listId);\n};\n\nexport const createLabel = async (tagName, idBoard) => {\n  const index = getRandomInt(0, TRELLO_LABEL_COLOR.length);\n  const newLabel = {\n    name: tagName,\n    color: TRELLO_LABEL_COLOR[index],\n    idBoard,\n  };\n  const res = await postTrello('labels', newLabel);\n  return res;\n};\n\nexport const createCard = async (stock, idList, labels) => {\n  if (!stock) return;\n\n  const code = stock[0];\n  const name = stock[1];\n  const nation = stock[2];\n  const createdAt = stock[4];\n  const updatedAt = stock[5];\n  const tags = stock[6].split('/');\n  const basePrice = stock.length === 8 ? stock[7] : '';\n\n  const idLabels = [];\n  await tags.forEach(async (tag) => {\n    const label = labels.find((_label) => _label.name.trim() === tag.trim());\n    if (label) {\n      idLabels.push(label.id);\n    }\n  });\n\n  const desc = {\n    code,\n    name,\n    nation,\n    created_at: createdAt,\n    base_price: basePrice,\n  };\n\n  const newCard = {\n    idList,\n    name,\n    desc: JSON.stringify(desc),\n    pos: 'top',\n    due: updatedAt ? new Date(updatedAt).toISOString() : '',\n    idLabels: idLabels.toString(),\n  };\n  await postTrello('cards', newCard);\n};\n","import React, { useState, createContext, useEffect } from 'react';\n\nimport { fetchStockDataFromCsv } from 'services/stock';\nimport { TRELLO_BOARD_STUDY_ID } from 'constants/trello';\nimport { getLabelsOnBoard, getCardsOnBoard } from 'services/trello';\n\nconst Context = createContext();\n\nconst { Provider, Consumer: StockConsumer } = Context;\nlet STOCK_DATA_LIST = {};\n\nconst StockProvider = ({ children }) => {\n  const [stockList, setStockList] = useState([]);\n  const [tagList, setTagList] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const _labels = await getLabelsOnBoard(TRELLO_BOARD_STUDY_ID);\n      const tags = _labels.reduce((acc, cur) => {\n        return [...acc, cur.name];\n      }, []);\n      setTagList([...tags]);\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      const _cards = await getCardsOnBoard(TRELLO_BOARD_STUDY_ID);\n      const _stockList = _cards.map((card) => {\n        const desc = JSON.parse(card.desc);\n        const array = [\n          desc.code,\n          card.name,\n          desc.nation,\n          '1',\n          desc.created_at,\n          card.due ? card.due.split('T')[0] : '',\n          card.labels.map((label) => label.name).join('/'),\n        ];\n        return array;\n      });\n      setStockList(_stockList);\n      STOCK_DATA_LIST = _stockList.reduce(\n        (acc, cur) => ({\n          ...acc,\n          [cur[0]]: {\n            code: cur[0],\n            name: cur[1],\n            nation: cur[2],\n            user_id: cur[3],\n            created_at: cur[4],\n            updated_at: cur[5],\n            tag_list: cur[6],\n            data: [],\n          },\n        }),\n        {}\n      );\n    })();\n  }, []);\n\n  const getStockData = async (stockCode) => {\n    if (!stockCode) return [];\n\n    if (\n      STOCK_DATA_LIST[stockCode]?.data &&\n      STOCK_DATA_LIST[stockCode]?.data.length > 0\n    ) {\n      return STOCK_DATA_LIST[stockCode].data;\n    }\n    const data = await fetchStockDataFromCsv(stockCode);\n\n    STOCK_DATA_LIST = {\n      ...STOCK_DATA_LIST,\n      [stockCode]: {\n        ...STOCK_DATA_LIST[stockCode],\n        data,\n      },\n    };\n    return data;\n  };\n\n  return (\n    <Provider\n      value={{\n        state: {\n          stockList,\n          tagList,\n          STOCK_DATA_LIST,\n        },\n        actions: { getStockData },\n      }}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nconst StockContext = Context;\n\nexport { StockProvider, StockConsumer, StockContext };\n","const root = {\n  path: '/stock/dashboard',\n  url: '/stock/dashboard',\n  description: 'Dashboard Page',\n};\n\nconst stock = {\n  path: '/stock/code/:code',\n  url: '/stock/code/',\n  description: 'Stock Page',\n};\n\nconst stockListPage = {\n  path: '/stock/list',\n  url: '/stock/list/',\n  description: 'Stock List Page',\n};\n\nconst tag = {\n  path: '/stock/tag/:tag',\n  url: '/stock/tag/',\n  description: 'Tag Page',\n};\n\nexport default {\n  root,\n  stock,\n  stockListPage,\n  tag,\n};\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst CommonRoute = ({ children, path, ...rest }) => {\n  return (\n    <Route path={path} {...rest}>\n      {children}\n    </Route>\n  );\n};\n\nexport default CommonRoute;\n","import styled, { css } from 'styled-components';\nimport {\n  Chip,\n  flexColumnCenterX,\n  textExtraLarge,\n  gray400,\n  BaseInput,\n  font,\n  gold200,\n  mobileOnly,\n} from 'remember-ui';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n\nexport const StockList = styled.div`\n  width: 100%;\n`;\nexport const StockItem = styled(Link)`\n  display: inline-block;\n  margin: 5px;\n  cursor: pointer;\n  text-decoration: none;\n`;\n\nexport const StockText = styled(Chip)`\n  ${({ active }) =>\n    active &&\n    css`\n      font-weight: bold;\n    `}\n  &:hover,\n  &:focus {\n    font-weight: bold;\n  }\n\n  ${mobileOnly(css`\n    ${font({ size: '12px', color: gold200 })}\n    padding: 5px;\n    min-width: 40px;\n  `)}\n`;\n\nexport const PageTitle = styled.div`\n  ${textExtraLarge({ color: gray400 })}\n`;\n\nexport const SearchInput = styled(BaseInput)`\n  width: 220px;\n`;\n","import React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport useDebounce from 'hooks/useDebounce';\nimport Routes from 'routers/routes';\nimport { StockContext } from 'context/StockContext';\n\nimport {\n  Container,\n  StockList,\n  StockItem,\n  StockText,\n  PageTitle,\n  SearchInput,\n} from './Navbar.styles';\n\nconst NavBar = () => {\n  const { pathname } = useLocation();\n  const { stock, tag, root, stockListPage } = Routes;\n  const [currentStock, setCurrentStock] = useState(null);\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const debounceSearchKeyword = useDebounce(searchKeyword, 500);\n\n  const {\n    state: { stockList, tagList },\n  } = useContext(StockContext);\n\n  useEffect(() => {\n    const stockCode = pathname.replace(stock.url, '');\n    const _stock = stockList.find((el) => el[0] === stockCode);\n    setCurrentStock(_stock);\n  }, [pathname, stock.url, stockList]);\n\n  useEffect(() => {\n    (async function searchStockList() {\n      if (debounceSearchKeyword) {\n        const result = stockList.filter(\n          (el) =>\n            el[0].includes(debounceSearchKeyword) ||\n            el[1].includes(debounceSearchKeyword) ||\n            el[6].includes(debounceSearchKeyword)\n        );\n        setSearchResults([...result]);\n      } else {\n        setSearchResults([]);\n      }\n    })();\n  }, [debounceSearchKeyword, stockList]);\n\n  const getRelatedStockList = useCallback(\n    (_tag) => [\n      ...stockList.reduce(\n        (acc, cur) => (cur[6].includes(_tag) ? acc.concat([cur]) : acc),\n        []\n      ),\n    ],\n    [stockList]\n  );\n\n  const handleChange = ({ target: { value } }) => {\n    setSearchKeyword(value.trim());\n  };\n\n  return (\n    <Container>\n      <StockList>\n        <StockItem to={`${root.path}`}>\n          <StockText active={pathname === `${root.path}`}>\n            {`${root.description}`}\n          </StockText>\n        </StockItem>\n        <StockItem to={`${stockListPage.path}`}>\n          <StockText active={pathname === `${stockListPage.path}`}>\n            {`${stockListPage.description}`}\n          </StockText>\n        </StockItem>\n        {tagList &&\n          tagList.map((el) => (\n            <StockItem key={el} to={`${tag.url}${el}`}>\n              <StockText active={pathname === `${tag.url}${el}`}>\n                {`${el}`}\n              </StockText>\n            </StockItem>\n          ))}\n      </StockList>\n\n      {pathname.includes(tag.url) && (\n        <StockList>\n          <PageTitle>\n            {pathname.replace(tag.url, '')} 태그 관련 종목\n            <br />\n            {getRelatedStockList(pathname.replace(tag.url, '')).map((el) => (\n              <StockItem key={el} to={`${stock.url}${el[0]}`}>\n                <StockText active={pathname === `${stock.url}${el[0]}`}>\n                  {`${el[1]} (${el[0]})`}\n                </StockText>\n              </StockItem>\n            ))}\n          </PageTitle>\n        </StockList>\n      )}\n\n      {currentStock && (\n        <StockList>\n          <PageTitle>\n            {`${currentStock[1]} (${currentStock[0]})`} 종목 관련 태그\n            <br />\n            {currentStock[6].split('/').map((el) => (\n              <StockItem key={el} to={`${tag.url}${el}`}>\n                <StockText active={pathname === `${tag.url}${el}`}>\n                  {`${el}`}\n                </StockText>\n              </StockItem>\n            ))}\n          </PageTitle>\n        </StockList>\n      )}\n      <StockList>\n        <SearchInput\n          type=\"text\"\n          name=\"searchKeyword\"\n          placeholder=\"종목, 코드, 태그를 검색\"\n          maxLength={20}\n          value={searchKeyword}\n          onChange={handleChange}\n        />\n        {searchResults &&\n          searchResults.map((el) => (\n            <StockItem key={el[0]} to={`${stock.url}${el[0]}`}>\n              <StockText active={pathname === `${stock.url}${el[0]}`}>\n                {`${el[1]} (${el[0]})`}\n              </StockText>\n            </StockItem>\n          ))}\n      </StockList>\n    </Container>\n  );\n};\n\nexport default NavBar;\n","import { useState, useEffect } from 'react';\n\nexport default function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      // value 값이 바뀌면 이전 setTimeout을 clear 해줌\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","export const chartOption = { xAxis: {}, yAxis: {}, series: [] };\nexport const chartStyle = { height: '700px', width: '100%' };\n","export const LOCALE = {\n  US: 'us',\n  KO: 'ko',\n};\n\nexport const CURRENCY = {\n  US: '$',\n  KO: '원',\n};\n","import React, { useEffect, useState } from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nimport { chartStyle } from 'constants/chart';\nimport { CURRENCY } from 'constants/locale';\n\nconst defaultOption = {\n  legend: {\n    // data: stockList.map((el) => `${el[1]}/${el[0]}`),\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      animation: false,\n    },\n    // formatter: function (params) {\n    //   console.log(params);\n    //   return `날짜 : ${params[0].name} <br> 가격 : ${params[0].value} <br> 종목 :  ${params[0].seriesName}`;\n    // },\n  },\n  xAxis: {\n    type: 'category',\n    data: [],\n  },\n  yAxis: {\n    type: 'value',\n    axisLabel: {\n      formatter: `{value} ${CURRENCY.KO}`,\n    },\n    // min: 0,\n    // max: 0,\n    // interval: 0,\n  },\n  series: [],\n};\n\nconst StockChart = ({\n  chartData,\n  onEvents,\n  stockList,\n  style = { ...chartStyle },\n}) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({ ...defaultOption });\n  const [EchartsReact, setEchartsReact] = useState(null);\n\n  useEffect(() => {\n    const _option = {\n      legend: {\n        ...defaultOption.legend,\n        data: stockList.map((el) => `${el[1]}/${el[0]}`),\n      },\n      tooltip: {\n        ...defaultOption.tooltip,\n      },\n      xAxis: {\n        ...defaultOption.xAxis,\n        ...chartData.xAxis,\n      },\n      yAxis: {\n        ...defaultOption.yAxis,\n        ...chartData.yAxis,\n      },\n      series: [...defaultOption.series, ...chartData.series],\n    };\n    setOption(_option);\n\n    const instance = EchartsReact?.getEchartsInstance();\n    if (instance) {\n      instance.clear();\n      instance.setOption(_option);\n    }\n\n    setLoaded(true);\n  }, [EchartsReact, chartData, stockList]);\n\n  return (\n    <>\n      {isLoaded && (\n        <ReactEcharts\n          ref={(e) => {\n            setEchartsReact(e);\n          }}\n          style={style}\n          option={option}\n          onEvents={onEvents}\n        />\n      )}\n    </>\n  );\n};\n\nexport default StockChart;\n","export const CalendarFormat = 'YYYY-MM-DD';\nexport const defaultOffset = '1 year';\nexport const OffsetList = [\n  { name: '1 month', value: 1 },\n  { name: '3 month', value: 3 },\n  { name: '6 month', value: 6 },\n  { name: '1 year', value: 12 },\n  { name: '3 year', value: 36 },\n  { name: '5 year', value: 60 },\n];\nexport const chartStartDate = '2015-01-02';\n","import dayjs from 'dayjs';\n\nimport { CalendarFormat } from 'constants/calendar';\n\nexport const getTodayDate = () => dayjs().format(CalendarFormat);\n\nexport const isWeekend = (date) =>\n  dayjs(date).day() === 0 || dayjs(date).day() === 6;\n\nexport const getDayOfWeek = (date) => dayjs(date).day();\n\nexport const getAdjustDateToWeekDay = (date) => {\n  const day = getDayOfWeek(date);\n  const index = day === 0 ? 2 : 1;\n  return dayjs(date).subtract(index, 'day').format(CalendarFormat);\n};\n","import styled, { css } from 'styled-components';\nimport {\n  flexCenter,\n  Radio,\n  MaskingInput,\n  flexCenterY,\n  NewBaseButton,\n  font,\n  text,\n  gray100,\n  yellow100,\n  mobileOnly,\n} from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexCenterY}\n\n  width:100%;\n  justify-content: space-between;\n\n  ${mobileOnly(css`\n    flex-direction: column;\n    justify-content: center;\n  `)}\n`;\n\nexport const CalendarContainer = styled.div`\n  ${flexCenter}\n`;\n\nexport const DateInput = styled(MaskingInput)`\n  padding: 0px 10px;\n`;\n\nexport const OffsetContainer = styled.div`\n  ${flexCenter}\n  padding:20px;\n\n  ${mobileOnly(css`\n    padding: 20px 0px;\n  `)}\n`;\n\nexport const RadioButton = styled(NewBaseButton)`\n  ${font({ size: '15px', color: text })}\n\n  ${({ isChecked }) =>\n    isChecked &&\n    css`\n      background-color: ${yellow100};\n    `}\n\n  border-radius:0px;\n  border: 1px solid ${gray100};\n\n  ${mobileOnly(css`\n    display: none;\n    ${font({ size: '12px', color: text })}\n    padding:0px;\n  `)}\n`;\n\nexport const OffsetDate = styled(Radio)``;\n\nexport const Cursor = styled.div`\n  cursor: pointer;\n`;\n","import React, { useState } from 'react';\nimport dayjs from 'dayjs';\n\nimport {\n  defaultOffset,\n  OffsetList,\n  chartStartDate,\n  CalendarFormat,\n} from 'constants/calendar';\nimport { isWeekend, getAdjustDateToWeekDay, getTodayDate } from 'utils/day';\n\nimport {\n  CalendarContainer,\n  DateInput,\n  Container,\n  OffsetContainer,\n  OffsetDate,\n  Cursor,\n  RadioButton,\n} from './StockCalendar.styles';\n\nconst StockCalendar = ({ startDate, setStartDate, endDate, setEndDate }) => {\n  const [calendarOffset, setCalendarOffset] = useState(defaultOffset);\n\n  const handleChange = (e) => {\n    const target = e.target.name;\n    const date = e.target.value;\n    if (date.length === 10) {\n      const newDate = new Date(date);\n      const today = new Date();\n      const _chartStartDate = new Date(chartStartDate);\n      if (+newDate >= +_chartStartDate && +newDate <= +today) {\n        target === 'startDate' ? setStartDate(date) : setEndDate(date);\n      }\n    }\n  };\n\n  const handleCalendarOffset = (offset, offsetValue) => {\n    let date = dayjs(endDate, CalendarFormat);\n    date = date.subtract(offsetValue, 'month');\n    setCalendarOffset(offset);\n    if (isWeekend(date)) {\n      date = getAdjustDateToWeekDay(date);\n    }\n    setStartDate(dayjs(date).format(CalendarFormat));\n  };\n\n  const handleDateByOffset = (dir) => {\n    let _endDate = dayjs(endDate, CalendarFormat);\n    let _startDate = dayjs(startDate, CalendarFormat);\n    const offsetValue = OffsetList.find((el) => el.name === calendarOffset)\n      .value;\n    if (dir === 'next') {\n      _endDate = _endDate.add(offsetValue, 'month');\n      _startDate = _startDate.add(offsetValue, 'month');\n      if (dayjs(_endDate).isAfter(getTodayDate())) {\n        // alert('오늘 이후의 날짜는 선택할 수 없습니다.');\n        return;\n      }\n    } else if (dir === 'prev') {\n      _endDate = _endDate.subtract(offsetValue, 'month');\n      _startDate = _startDate.subtract(offsetValue, 'month');\n\n      if (dayjs(_startDate).isBefore(chartStartDate)) {\n        // alert(`${chartStartDate} 이전의 날짜는 선택할 수 없습니다.`);\n        return;\n      }\n    }\n\n    if (isWeekend(_endDate)) {\n      _endDate = getAdjustDateToWeekDay(_endDate);\n    }\n    if (isWeekend(_startDate)) {\n      _startDate = getAdjustDateToWeekDay(_startDate);\n    }\n    setEndDate(dayjs(_endDate).format(CalendarFormat));\n    setStartDate(dayjs(_startDate).format(CalendarFormat));\n  };\n\n  return (\n    <Container>\n      <CalendarContainer>\n        <Cursor onClick={() => handleDateByOffset('prev')}>{'<'}</Cursor>\n        <DateInput\n          mask={[\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n            '-',\n            /[0-9]/,\n            /[0-9]/,\n            '-',\n            /[0-9]/,\n            /[0-9]/,\n          ]}\n          type=\"text\"\n          name=\"startDate\"\n          value={startDate}\n          required\n          onChange={handleChange}\n          placeholder=\"8자리 숫자 입력(2015-01-02)\"\n        />\n        ~\n        <DateInput\n          mask={[\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n            /[0-9]/,\n            '-',\n            /[0-9]/,\n            /[0-9]/,\n            '-',\n            /[0-9]/,\n            /[0-9]/,\n          ]}\n          type=\"text\"\n          name=\"endDate\"\n          value={endDate}\n          required\n          onChange={handleChange}\n          placeholder=\"8자리 숫자 입력(2015-01-02)\"\n        />\n        <Cursor onClick={() => handleDateByOffset('next')}>{'>'}</Cursor>\n      </CalendarContainer>\n      <OffsetContainer>\n        {OffsetList &&\n          OffsetList.map((el) => (\n            <RadioButton\n              isChecked={calendarOffset === el.name}\n              size=\"medium\"\n              outline\n              key={el.value}\n            >\n              <OffsetDate\n                isChecked={calendarOffset === el.name}\n                onClick={() => handleCalendarOffset(el.name, el.value)}\n              />\n              <span>{el.name}</span>\n            </RadioButton>\n          ))}\n      </OffsetContainer>\n    </Container>\n  );\n};\n\nexport default StockCalendar;\n","import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\n\nimport { CalendarFormat } from 'constants/calendar';\nimport { LOCALE, CURRENCY } from 'constants/locale';\nimport { getRoundTwoPrecision } from 'utils/utils';\n\nexport const getPercent = (target, value) => {\n  return getRoundTwoPrecision(\n    ((parseInt(value, 10) - parseInt(target, 10)) / parseInt(target, 10)) * 100\n  );\n};\n\nexport const generateDayBetween = (startDate, endDate) => {\n  let _start = dayjs(startDate).format(CalendarFormat);\n  const _end = dayjs(endDate).format(CalendarFormat);\n  const days = [];\n\n  dayjs.extend(isSameOrBefore);\n  while (dayjs(_start).isSameOrBefore(_end)) {\n    days.push([_start, '0', '0', '0', '0', '0', '0']);\n    _start = dayjs(_start).add(1, 'day').format(CalendarFormat);\n  }\n\n  return days;\n};\n\nexport const getCurrency = (stock) => {\n  const nation = (stock && stock[2]) || '';\n  if (nation === LOCALE.KO) {\n    return CURRENCY.KO;\n  }\n  if (nation === LOCALE.US) {\n    return CURRENCY.US;\n  }\n  return '';\n};\n\nexport const getIndexOfDayBetween = (stock, startDate, endDate) => {\n  let startDateIndex = stock.findIndex(\n    (el) => el[0] === dayjs(startDate).format(CalendarFormat)\n  );\n  startDateIndex = startDateIndex <= 0 ? 0 : startDateIndex;\n\n  let endDateIndex = stock.findIndex(\n    (el) => el[0] === dayjs(endDate).format(CalendarFormat)\n  );\n  endDateIndex = endDateIndex <= 0 ? stock.length - 1 : endDateIndex;\n  return { startDateIndex, endDateIndex };\n};\n\nexport const getTargetDateValue = (stock, targetDate) => {\n  let value = null;\n  if (stock.find((el) => el[0] === targetDate)) {\n    value = parseInt(stock.find((el) => el[0] === targetDate)[4], 10);\n  }\n  if (!value || value === 0) {\n    const _valueDate = stock.find((el) => el[4] !== '0');\n    value = _valueDate ? _valueDate[4] : null;\n  }\n  return value;\n};\n\nexport const getMinMaxValue = (stock) => {\n  const values = stock\n    .map((el) => {\n      if (el[4] !== '0') return parseInt(el[4], 10);\n      return null;\n    })\n    .filter((el) => el);\n\n  const minValue = parseInt(Math.min(...values), 10);\n  const maxValue = parseInt(Math.max(...values), 10);\n  return { minValue, maxValue };\n};\n","export const getRoundTwoPrecision = (number) => Math.round(number * 100) / 100;\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useHistory } from 'react-router';\n\nimport Routes from 'routers/routes';\nimport { chartOption } from 'constants/chart';\nimport { LOCALE } from 'constants/locale';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport {\n  getCurrency,\n  getPercent,\n  getIndexOfDayBetween,\n  getTargetDateValue,\n  getMinMaxValue,\n} from 'utils/chart';\nimport { StockContext } from 'context/StockContext';\n\nimport { Container } from './Stock.styles';\n\nconst Stock = () => {\n  const {\n    params: { code: stockCode },\n  } = useRouteMatch();\n  const {\n    state: { stockList },\n    actions: { getStockData },\n  } = useContext(StockContext);\n\n  const history = useHistory();\n  const { stockListPage } = Routes;\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionPercent, setOptionPercent] = useState({\n    ...chartOption,\n  });\n\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n  const [percentTargetDate, setPercentTargetDate] = useState(startDate);\n  const [basePriceValue, setBasePriceValue] = useState(null);\n\n  useEffect(() => {\n    const getData = async () => {\n      setLoaded(false);\n      const currentStock = stockList.find((el) => el[0] === stockCode);\n      if (stockList.length > 0 && !currentStock)\n        history.replace(stockListPage.path);\n\n      const stockData = { ...chartOption };\n      const stockDataPercent = { ...chartOption };\n\n      const stockAll = await getStockData(stockCode);\n      const { startDateIndex, endDateIndex } = getIndexOfDayBetween(\n        stockAll,\n        startDate,\n        endDate\n      );\n\n      const stock = stockAll.slice(startDateIndex, endDateIndex + 1);\n\n      const targetDateValue = getTargetDateValue(stock, percentTargetDate);\n\n      const _basePriceValue =\n        currentStock &&\n        currentStock.length > 0 &&\n        parseInt(currentStock[7], 10);\n\n      setBasePriceValue(_basePriceValue);\n\n      const { minValue, maxValue } = getMinMaxValue(stock);\n\n      // x축\n      stockData.xAxis = {\n        ...stockData.xAxis,\n        data: stock.map((el) => el[0]),\n      };\n      stockDataPercent.xAxis = {\n        ...stockData.xAxis,\n      };\n\n      // y축\n      stockData.yAxis = {\n        ...stockData.yAxis,\n        min: minValue,\n        max: maxValue,\n        axisLabel: {\n          formatter: `{value} ${getCurrency(currentStock)}`,\n        },\n      };\n      stockDataPercent.yAxis = {\n        ...stockDataPercent.yAxis,\n        axisLabel: {\n          formatter: '{value} %',\n        },\n      };\n\n      // series Data\n      stockData.series = [\n        ...stockData.series,\n        {\n          data: stock.map((el) => {\n            if (el[4] !== '0') {\n              if (currentStock && currentStock[2] === LOCALE.KO) {\n                return parseInt(el[4], 10);\n              }\n              if (currentStock && currentStock[2] === LOCALE.US) {\n                return parseFloat(el[4]);\n              }\n              return parseInt(el[4], 10);\n            }\n            return null;\n          }),\n          type: 'line',\n          connectNulls: true,\n          name: `${currentStock ? currentStock[1] : ''}/${stockCode}`,\n          lineStyle: {\n            color: '#ff457e',\n          },\n          markLine: {\n            slient: true,\n            symbol: ['none', 'none'],\n            lineStyle: {\n              color: '#f58c23',\n              width: 2,\n              type: 'solid',\n            },\n            data: [\n              {\n                name: 'Base Price',\n                yAxis: basePriceValue || 0,\n                label: {\n                  formatter: '{c}',\n                  position: 'end',\n                  distance: 10,\n                },\n              },\n            ],\n          },\n        },\n      ];\n\n      stockDataPercent.series = [\n        ...stockDataPercent.series,\n        {\n          data: stock.map((el) => {\n            if (el[4] !== '0')\n              return getPercent(targetDateValue, parseInt(el[4], 10));\n            return null;\n          }),\n          type: 'line',\n          connectNulls: true,\n          name: `${currentStock ? currentStock[1] : ''}/${stockCode}`,\n          lineStyle: {\n            color: '#ff457e',\n            width: 3,\n          },\n        },\n        {\n          data: stock.map((el) => {\n            if (el[4] !== '0')\n              return getPercent(_basePriceValue, parseInt(el[4], 10));\n            return null;\n          }),\n          type: 'line',\n          connectNulls: true,\n          name: `${currentStock ? currentStock[1] : ''}/${stockCode}`,\n          lineStyle: {\n            color: 'rgba(87,159,251,.5)',\n          },\n        },\n      ];\n\n      setOption(stockData);\n      setOptionPercent(stockDataPercent);\n      setLoaded(true);\n    };\n\n    getData();\n  }, [\n    basePriceValue,\n    endDate,\n    getStockData,\n    history,\n    percentTargetDate,\n    startDate,\n    stockCode,\n    stockList,\n    stockListPage.path,\n  ]);\n\n  const onChartClick = (params) => {\n    const { name } = params;\n    setPercentTargetDate(name);\n  };\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && (\n        <>\n          종가 그래프( Y축 : 기간 내 최저가 ~ 최고가)\n          <StockChart\n            stockList={stockList}\n            chartData={option}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n      {isLoaded && (\n        <>\n          {percentTargetDate}일( 기준일 = 0% ) 대비 상승/하락 률 ( 그래프 클릭\n          날짜 변경 )\n          <br />\n          {basePriceValue > 0 && (\n            <>기준 가격(0%): {basePriceValue} 원 대비 상승/하락 률</>\n          )}\n          <StockChart\n            stockList={stockList}\n            chartData={optionPercent}\n            onEvents={{\n              click: onChartClick,\n            }}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Stock;\n","import styled from 'styled-components';\nimport {\n  font,\n  gray100,\n  text,\n  Chip,\n  BaseInput,\n  flexContainer,\n  BasePopover,\n  PopoverItem,\n  NewBaseButton,\n} from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexContainer('flex-start', false, 'column')};\n\n  padding: 20px;\n`;\n\nexport const List = styled.div`\n  width: 100%;\n`;\n\nexport const StockItem = styled.div`\n  ${flexContainer('flex-start', 'center', 'row')};\n  margin: 5px;\n`;\n\nexport const StockText = styled(Chip)``;\n\nexport const Input = styled.div`\n  ${flexContainer('flex-start', 'center', 'row')};\n\n  width: 100%;\n`;\n\nexport const StockInput = styled(BaseInput)`\n  width: 120px;\n`;\n\nexport const Dropdown = styled(BasePopover)`\n  height: 500px;\n  max-height: 500px;\n  overflow-y: scroll;\n`;\n\nexport const DropdownList = styled(PopoverItem)``;\n\nexport const DropdownText = styled.div`\n  width: 120px;\n  font-size: 15px;\n  color: ${text};\n  height: 44px;\n  border-radius: 4px;\n  border: 1px solid ${gray100};\n  padding: 11px 12px;\n  box-sizing: border-box;\n  outline: none;\n  cursor: pointer;\n`;\n\nexport const AddButton = styled(NewBaseButton)`\n  ${font({ size: '15px', color: text })};\n\n  width: 200px;\n`;\n","import React, { useState, useEffect, useContext } from 'react';\nimport dayjs from 'dayjs';\n\nimport { StockContext } from 'context/StockContext';\nimport {\n  // TRELLO_CARD_ID,\n  TRELLO_LIST_ID,\n  TRELLO_BOARD_STUDY_ID,\n} from 'constants/trello';\nimport { CalendarFormat } from 'constants/calendar';\nimport { LOCALE } from 'constants/locale';\nimport {\n  // getMe,\n  // getMyBoards,\n  // getListsOnBoard,\n  getLabelsOnBoard,\n  getCardsOnBoard,\n  // getCardOnBoardById,\n  // getCardById,\n  // getListById,\n  // createLabel,\n  createCard,\n} from 'services/trello';\n\nimport {\n  AddButton,\n  Container,\n  List,\n  StockItem,\n  StockText,\n  Input,\n  StockInput,\n  Dropdown,\n  DropdownList,\n  DropdownText,\n} from './StockList.styles';\n\nconst stockDefaultValue = {\n  name: '',\n  code: '',\n  nation: LOCALE.KO,\n  userId: '1',\n  createdAt: dayjs(new Date()).format(CalendarFormat),\n  tags: '',\n  basePrice: '',\n};\n\nconst StockList = () => {\n  const {\n    state: { tagList },\n  } = useContext(StockContext);\n\n  const [cards, setCards] = useState([]);\n  const [labels, setLabels] = useState([]);\n  const [stock, setStock] = useState({ ...stockDefaultValue });\n\n  useEffect(() => {\n    (async function searchStockList() {\n      const _cards = await getCardsOnBoard(TRELLO_BOARD_STUDY_ID);\n      setCards(_cards);\n      const _labels = await getLabelsOnBoard(TRELLO_BOARD_STUDY_ID);\n      setLabels(_labels);\n    })();\n  }, []);\n\n  const addCardToTrello = () => {\n    const { code, name, nation, userId, createdAt, tags, basePrice } = stock;\n    const _stock = [code, name, nation, userId, createdAt, '', tags, basePrice];\n    createCard(_stock, TRELLO_LIST_ID, labels).then((res) => {\n      if (res) setStock({ ...stockDefaultValue });\n    });\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setStock((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const { name, code, nation, createdAt, basePrice } = stock;\n\n  return (\n    <Container>\n      <AddButton onClick={addCardToTrello} disabled={!name || !code}>\n        AddCARD\n      </AddButton>\n      <Input>\n        <StockInput\n          type=\"text\"\n          name=\"code\"\n          placeholder=\"종목코드\"\n          maxLength={20}\n          value={code}\n          onChange={handleChange}\n        />\n        <StockInput\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"종목이름\"\n          maxLength={20}\n          value={name}\n          onChange={handleChange}\n        />\n        <Dropdown\n          size=\"medium\"\n          placement=\"bottom-start\"\n          content={\n            <div>\n              {Object.keys(LOCALE).map((_nation) => (\n                <DropdownList\n                  key={_nation}\n                  onClick={() => {\n                    setStock((prevState) => ({\n                      ...prevState,\n                      nation: LOCALE[_nation],\n                    }));\n                  }}\n                >\n                  {LOCALE[_nation]}\n                </DropdownList>\n              ))}\n            </div>\n          }\n        >\n          <DropdownText> {nation || LOCALE.KO}</DropdownText>\n        </Dropdown>\n\n        <StockInput\n          type=\"text\"\n          name=\"createdAt\"\n          placeholder=\"추가날짜\"\n          maxLength={20}\n          value={createdAt}\n          onChange={handleChange}\n          readOnly\n        />\n        <StockInput\n          type=\"text\"\n          name=\"basePrice\"\n          placeholder=\"basePrice\"\n          maxLength={20}\n          value={basePrice}\n          onChange={handleChange}\n        />\n        <Dropdown\n          size=\"medium\"\n          placement=\"bottom-start\"\n          content={\n            <div>\n              {tagList.map((tag) => (\n                <DropdownList\n                  key={tag}\n                  onClick={() => {\n                    setStock((prevState) => ({\n                      ...prevState,\n                      tags: prevState.tags\n                        ? `${prevState.tags}/${tag}`\n                        : `${tag}`,\n                    }));\n                  }}\n                >\n                  {tag}\n                </DropdownList>\n              ))}\n            </div>\n          }\n        >\n          <DropdownText>태그 추가</DropdownText>\n        </Dropdown>\n        {stock.tags &&\n          stock.tags\n            .split('/')\n            .map((tag) => <StockText key={tag}>{tag}</StockText>)}\n      </Input>\n      <List>\n        {cards?.map((card) => (\n          <StockItem key={card.id}>\n            {Object.keys(JSON.parse(card.desc)).map((key) => {\n              return (\n                <StockInput\n                  key={key}\n                  type=\"text\"\n                  name={key}\n                  placeholder={key}\n                  maxLength={20}\n                  value={JSON.parse(card.desc)[key]}\n                  onChange={handleChange}\n                  disabled\n                />\n              );\n            })}\n            {card.labels.map((label) => (\n              <StockText key={label.id}>{label.name}</StockText>\n            ))}\n          </StockItem>\n        ))}\n      </List>\n    </Container>\n  );\n};\n\nexport default StockList;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState, useContext } from 'react';\n\nimport { chartOption } from 'constants/chart';\nimport { LOCALE } from 'constants/locale';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport { getCurrency, getIndexOfDayBetween } from 'utils/chart';\nimport { StockContext } from 'context/StockContext';\n\nimport { Container } from './Dashboard.styles';\n\nconst Dashboard = () => {\n  const {\n    state: { stockList },\n    actions: { getStockData },\n  } = useContext(StockContext);\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionHigh, setOptionHigh] = useState({\n    ...chartOption,\n  });\n  const [optionExtraHigh, setOptionExtraHigh] = useState({\n    ...chartOption,\n  });\n  const [optionLow, setOptionLow] = useState({\n    ...chartOption,\n  });\n  const [optionUs, setOptionUs] = useState({\n    ...chartOption,\n  });\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n\n  useEffect(() => {\n    const stockData = { ...chartOption };\n    const stockDataHigh = { ...chartOption };\n    const stockDataExtraHigh = { ...chartOption };\n    const stockDataLow = { ...chartOption };\n    const stockDataUs = { ...chartOption };\n    const fetchAllData = [];\n\n    stockList\n      .map((el) => el[0])\n      .forEach(async (number) => {\n        fetchAllData.push(getStockData(number));\n      });\n\n    Promise.all(fetchAllData).then((data) => {\n      data.forEach((stockAll, index) => {\n        const currentStock = stockList[index];\n        const currency = (currentStock && currentStock[2]) || LOCALE.KO;\n        const { startDateIndex, endDateIndex } = getIndexOfDayBetween(\n          stockAll,\n          startDate,\n          endDate\n        );\n\n        const stock = stockAll.slice(startDateIndex, endDateIndex + 1);\n\n        const priceList = stock\n          .slice(1)\n          .map((el) => {\n            if (el[4] !== '0') return parseInt(el[4], 10);\n            return null;\n          })\n          .filter((el) => el);\n\n        const mean = (Math.min(...priceList) + Math.max(...priceList)) / 2;\n        const ref =\n          // eslint-disable-next-line no-nested-ternary\n          currency === LOCALE.US\n            ? stockDataUs\n            : // eslint-disable-next-line no-nested-ternary\n            mean > 400000\n            ? stockDataExtraHigh\n            : // eslint-disable-next-line no-nested-ternary\n            mean > 200000\n            ? stockDataHigh\n            : mean < 50000\n            ? stockDataLow\n            : stockData;\n\n        ref.xAxis = {\n          ...ref.xAxis,\n          data: stock.map((el) => el[0]),\n        };\n\n        ref.yAxis = {\n          ...ref.yAxis,\n          axisLabel: {\n            formatter: `{value} ${getCurrency(currentStock)}`,\n          },\n        };\n\n        ref.series = [\n          ...ref.series,\n          {\n            data: stock.map((el) => {\n              if (el[4] !== '0') {\n                if (currentStock && currentStock[2] === LOCALE.KO) {\n                  return parseInt(el[4], 10);\n                }\n                if (currentStock && currentStock[2] === LOCALE.US) {\n                  return parseFloat(el[4]);\n                }\n                return parseInt(el[4], 10);\n              }\n              return null;\n            }),\n            type: 'line',\n            connectNulls: true,\n            name: `${currentStock[1]}/${currentStock[0]}`,\n          },\n        ];\n      });\n      setOption(stockData);\n      setOptionHigh(stockDataHigh);\n      setOptionExtraHigh(stockDataExtraHigh);\n      setOptionLow(stockDataLow);\n      setOptionUs(stockDataUs);\n      setLoaded(true);\n    });\n  }, [startDate, endDate, stockList, getStockData]);\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && (\n        <StockChart stockList={stockList} chartData={optionExtraHigh} />\n      )}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionHigh} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={option} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionLow} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionUs} />}\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useHistory } from 'react-router';\n\nimport Routes from 'routers/routes';\nimport { chartOption } from 'constants/chart';\nimport { LOCALE } from 'constants/locale';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport {\n  getCurrency,\n  getPercent,\n  getIndexOfDayBetween,\n  getTargetDateValue,\n} from 'utils/chart';\nimport { getStockListByTag } from 'utils/tag';\nimport { StockContext } from 'context/StockContext';\n\nimport { Container } from './Tag.styles';\n\nconst Tag = () => {\n  const {\n    params: { tag: tagName },\n  } = useRouteMatch();\n  const {\n    state: { stockList },\n    actions: { getStockData },\n  } = useContext(StockContext);\n\n  const history = useHistory();\n  const { stockListPage } = Routes;\n\n  const [tagStockList, setTagStockList] = useState([]);\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionUs, setOptionUs] = useState({\n    ...chartOption,\n  });\n  const [optionPercent, setOptionPercent] = useState({\n    ...chartOption,\n  });\n\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n  const [percentTargetDate, setPercentTargetDate] = useState(startDate);\n\n  useEffect(() => {\n    const _tagStockList = getStockListByTag(stockList, tagName);\n    if (stockList.length > 0 && _tagStockList.length === 0)\n      history.replace(stockListPage.path);\n\n    setTagStockList(_tagStockList);\n    const stockData = { ...chartOption };\n    const stockDataUs = { ...chartOption };\n    const stockDataPercent = { ...chartOption };\n    const fetchAllData = [];\n\n    _tagStockList\n      .map((el) => el[0])\n      .forEach(async (number) => {\n        fetchAllData.push(getStockData(number));\n      });\n\n    Promise.all(fetchAllData).then((data) => {\n      data.forEach((stockAll, index) => {\n        const currentStock = _tagStockList[index];\n\n        const currency = (currentStock && currentStock[2]) || LOCALE.KO;\n\n        const { startDateIndex, endDateIndex } = getIndexOfDayBetween(\n          stockAll,\n          startDate,\n          endDate\n        );\n\n        const stock = stockAll.slice(startDateIndex, endDateIndex + 1);\n\n        const targetDateValue = getTargetDateValue(stock, percentTargetDate);\n\n        const ref = currency === LOCALE.US ? stockDataUs : stockData;\n\n        ref.xAxis = {\n          ...ref.xAxis,\n          data: stock.map((el) => el[0]),\n        };\n        stockDataPercent.xAxis = {\n          ...ref.xAxis,\n        };\n\n        ref.yAxis = {\n          ...ref.yAxis,\n          axisLabel: {\n            formatter: `{value} ${getCurrency(currentStock)}`,\n          },\n        };\n        stockDataPercent.yAxis = {\n          ...stockDataPercent.yAxis,\n          axisLabel: {\n            formatter: '{value} %',\n          },\n        };\n\n        ref.series = [\n          ...ref.series,\n          {\n            data: stock.map((el) => {\n              if (el[4] !== '0') {\n                if (currentStock && currentStock[2] === LOCALE.KO) {\n                  return parseInt(el[4], 10);\n                }\n                if (currentStock && currentStock[2] === LOCALE.US) {\n                  return parseFloat(el[4]);\n                }\n                return parseInt(el[4], 10);\n              }\n              return null;\n            }),\n            type: 'line',\n            connectNulls: true,\n            name: `${currentStock[1]}/${currentStock[0]}`,\n          },\n        ];\n\n        stockDataPercent.series = [\n          ...stockDataPercent.series,\n          {\n            data: stock.map((el) => {\n              if (el[4] !== '0')\n                return getPercent(targetDateValue, parseInt(el[4], 10));\n              return null;\n            }),\n            type: 'line',\n            connectNulls: true,\n            name: `${currentStock[1]}/${currentStock[0]}`,\n          },\n        ];\n      });\n      setOption(stockData);\n      setOptionUs(stockDataUs);\n      setOptionPercent(stockDataPercent);\n      setLoaded(true);\n    });\n  }, [\n    startDate,\n    endDate,\n    stockList,\n    tagName,\n    history,\n    stockListPage.path,\n    percentTargetDate,\n    getStockData,\n  ]);\n\n  const onChartClick = (params) => {\n    const { name } = params;\n    setPercentTargetDate(name);\n  };\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && tagStockList.find((el) => el[2] === LOCALE.KO) && (\n        <StockChart stockList={tagStockList} chartData={option} />\n      )}\n\n      {isLoaded && tagStockList.find((el) => el[2] === LOCALE.US) && (\n        <StockChart stockList={tagStockList} chartData={optionUs} />\n      )}\n      {isLoaded && (\n        <>\n          {percentTargetDate}일( 기준일 = 0% ) 대비 상승/하락 률 ( 그래프 클릭\n          날짜 변경 )\n          <StockChart\n            stockList={tagStockList}\n            chartData={optionPercent}\n            onEvents={{\n              click: onChartClick,\n            }}\n          />\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Tag;\n","export const getStockListByTag = (stockList, tag) => {\n  return stockList.filter((el) => el[6] && el[6].includes(tag));\n};\n","import styled from 'styled-components';\n\nexport const AppBody = styled.div`\n  height: 100%;\n`;\n","import React from 'react';\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom';\nimport { GlobalTheme } from 'remember-ui';\n\nimport { StockProvider } from 'context/StockContext';\nimport Routes from 'routers/routes';\nimport CommonRoute from 'routers/CommonRoute';\nimport NavBar from 'components/NavBar/NavBar';\nimport Stock from 'pages/Stock/Stock';\nimport StockList from 'pages/StockList/StockList';\nimport Dashboard from 'pages/Dashboard/Dashboard';\nimport Tag from 'pages/Tag/Tag';\n\nimport { AppBody } from './App.styles';\n\nfunction App() {\n  const { root, stock, stockListPage, tag } = Routes;\n\n  return (\n    <StockProvider>\n      <BrowserRouter>\n        <AppBody>\n          <GlobalTheme />\n          <NavBar />\n          <Switch>\n            <CommonRoute path={stock.path}>\n              <Stock />\n            </CommonRoute>\n            <CommonRoute path={tag.path}>\n              <Tag />\n            </CommonRoute>\n            <CommonRoute path={stockListPage.path}>\n              <StockList />\n            </CommonRoute>\n            <CommonRoute path={root.path}>\n              <Dashboard />\n            </CommonRoute>\n            <Redirect to={stockListPage.path} />\n          </Switch>\n        </AppBody>\n      </BrowserRouter>\n    </StockProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // console.log(\n              //   'New content is available and will be used when all ' +\n              //     'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              // );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // console.log('Content is cached for offline use.');\n\n              // Execute callback\n              // eslint-disable-next-line no-lonely-if\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}