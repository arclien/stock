{"version":3,"sources":["routers/routes.js","routers/CommonRoute.js","components/NavBar/Navbar.styles.js","components/NavBar/NavBar.js","constants/chart.js","services/stock.js","components/StockChart/StockChart.js","components/StockTable/StockTable.js","constants/calendar.js","utils/day.js","components/StockCalendar/StockCalendar.styles.js","components/StockCalendar/StockCalendar.js","utils/utils.js","utils/chart.js","pages/Stock/Stock.styles.js","pages/Stock/Stock.js","pages/Dashboard/Dashboard.styles.js","pages/Dashboard/Dashboard.js","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["path","url","description","CommonRoute","children","rest","Container","styled","div","flexColumnCenterX","StockList","StockItem","Link","StockText","Chip","active","css","NavBar","stockList","pathname","useLocation","stock","Routes","root","to","map","el","key","chartOption","xAxis","yAxis","series","chartStyle","height","width","fetchStockListFromCsv","a","fetch","window","location","origin","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","readString","fetchStockDataFromCsv","stockNumber","defaultOption","legend","tooltip","trigger","axisPointer","type","animation","data","axisLabel","formatter","StockChart","chartData","onEvents","style","useState","isLoaded","setLoaded","option","setOption","useEffect","StockTable","stockCode","startDate","setStock","axios","get","then","res","XMLParser","parseFromString","JSON","stringify","fetchData","OffsetList","name","getTodayDate","dayjs","format","isWeekend","date","day","getAdjustDateToWeekDay","index","getDayOfWeek","subtract","flexCenterX","DateInput","MaskingInput","OffsetContainer","OffsetDate","Radio","Cursor","StockCalendar","setStartDate","endDate","setEndDate","calendarOffset","setCalendarOffset","handleChange","e","target","length","newDate","Date","today","handleDateByOffset","dir","_endDate","_startDate","offsetValue","find","add","isAfter","alert","isBefore","onClick","mask","required","onChange","placeholder","isChecked","offset","handleCalendarOffset","getRoundTwoPrecision","number","Math","round","getRelative","maxValue","minValue","parseInt","Stock","useRouteMatch","params","code","optionPercent","setOptionPercent","optionRelative","setOptionRelative","percentTargetDate","setPercentTargetDate","stockData","stockDataPercent","stockDataRelative","stockAll","startDateIndex","findIndex","endDateIndex","slice","targetDateValue","min","filter","max","currentStock","connectNulls","getData","click","Dashboard","optionHigh","setOptionHigh","optionExtraHigh","setOptionExtraHigh","optionLow","setOptionLow","stockDataHigh","stockDataExtraHigh","stockDataLow","fetchAllData","forEach","push","Promise","all","priceList","mean","ref","AppBody","App","setStockList","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ceb0fb66.chunk.js","sourcesContent":["const root = {\n  path: '/stock',\n  url: '/stock',\n  description: 'Main Page',\n};\n\nconst stock = {\n  path: '/stock/code/:code',\n  url: '/stock/code/',\n  description: 'Stock Page',\n};\n\nexport default {\n  root,\n  stock,\n};\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst CommonRoute = ({ children, path, ...rest }) => {\n  return (\n    <Route path={path} {...rest}>\n      {children}\n    </Route>\n  );\n};\n\nexport default CommonRoute;\n","import styled, { css } from 'styled-components';\nimport { Chip, flexColumnCenterX } from 'remember-ui';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n\nexport const StockList = styled.div``;\nexport const StockItem = styled(Link)`\n  display: inline-block;\n  margin: 5px;\n  cursor: pointer;\n  text-decoration: none;\n`;\nexport const StockText = styled(Chip)`\n  ${({ active }) =>\n    active &&\n    css`\n      font-weight: bold;\n    `}\n  &:hover,\n  &:focus {\n    font-weight: bold;\n  }\n`;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport Routes from 'routers//routes';\n\nimport { Container, StockList, StockItem, StockText } from './Navbar.styles';\n\nconst NavBar = ({ stockList }) => {\n  const { pathname } = useLocation();\n  const { stock, root } = Routes;\n\n  return (\n    <Container>\n      <StockList>\n        <StockItem to={`${root.path}`}>\n          <StockText active={pathname === `${root.path}`}>\n            {`${root.description}`}\n          </StockText>\n        </StockItem>\n        {stockList &&\n          stockList.map((el) => (\n            <StockItem key={el[0]} to={`${stock.url}${el[0]}`}>\n              <StockText active={pathname === `${stock.url}${el[0]}`}>\n                {`${el[1]} (${el[0]})`}\n              </StockText>\n            </StockItem>\n          ))}\n      </StockList>\n    </Container>\n  );\n};\n\nexport default NavBar;\n","export const chartOption = { xAxis: {}, yAxis: {}, series: [] };\nexport const chartStyle = { height: '700px', width: '100%' };\n","import { readString } from 'react-papaparse';\n\nexport const fetchStockListFromCsv = async () => {\n  const response = await fetch(\n    `${window.location.origin}/stock/data/stock_list.csv`\n  );\n  const reader = response.body.getReader();\n  const result = await reader.read(); // raw array\n  const decoder = new TextDecoder('utf-8');\n  const csv = decoder.decode(result.value); // the csv text\n  return readString(csv);\n};\n\nexport const fetchStockDataFromCsv = async (stockNumber) => {\n  const response = await fetch(\n    `${window.location.origin}/stock/data/${stockNumber}.csv`\n  );\n  const reader = response.body.getReader();\n  const result = await reader.read(); // raw array\n  const decoder = new TextDecoder('utf-8');\n  const csv = decoder.decode(result.value); // the csv text\n  return readString(csv);\n};\n","import React, { useEffect, useState } from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nimport { chartStyle } from 'constants/chart';\n\nconst defaultOption = {\n  legend: {\n    // data: stockList.map((el) => `${el[1]}/${el[0]}`),\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      animation: false,\n    },\n    // formatter: function (params) {\n    //   console.log(params);\n    //   return `날짜 : ${params[0].name} <br> 가격 : ${params[0].value} <br> 종목 :  ${params[0].seriesName}`;\n    // },\n  },\n  xAxis: {\n    type: 'category',\n    data: [],\n  },\n  yAxis: {\n    type: 'value',\n    axisLabel: {\n      formatter: '{value} 원',\n    },\n    // min: 0,\n    // max: 0,\n    // interval: 0,\n  },\n  series: [],\n};\n\nconst StockChart = ({\n  chartData,\n  onEvents,\n  stockList,\n  style = { ...chartStyle },\n}) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({ ...defaultOption });\n\n  useEffect(() => {\n    setOption({\n      legend: {\n        ...defaultOption.legend,\n        data: stockList.map((el) => `${el[1]}/${el[0]}`),\n      },\n      tooltip: {\n        ...defaultOption.tooltip,\n      },\n      xAxis: {\n        ...defaultOption.xAxis,\n        ...chartData.xAxis,\n      },\n      yAxis: {\n        ...defaultOption.yAxis,\n        ...chartData.yAxis,\n      },\n      series: [...defaultOption.series, ...chartData.series],\n    });\n    setLoaded(true);\n  }, [chartData, stockList]);\n\n  return (\n    <>\n      {isLoaded && (\n        <ReactEcharts style={style} option={option} onEvents={onEvents} />\n      )}\n    </>\n  );\n};\n\nexport default StockChart;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport XMLParser from 'react-xml-parser';\n\nconst StockTable = ({ stockCode, startDate }) => {\n  const [stock, setStock] = useState('');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await axios\n        .get(\n          `https://cors-anywhere.herokuapp.com/http://asp1.krx.co.kr/servlet/krx.asp.XMLSiseEng?code=${stockCode}`,\n          {\n            'Content-Type': 'application/xml; charset=utf-8',\n          }\n        )\n        .then((res) => {\n          const xml = new XMLParser();\n          const { children } = xml.parseFromString(res.data);\n          setStock(JSON.stringify(children));\n        });\n    };\n    fetchData();\n  }, [stockCode]);\n\n  return <>{stock && <div>{stock}</div>}</>;\n};\n\nexport default StockTable;\n","export const CalendarFormat = 'YYYY-MM-DD';\nexport const defaultOffset = '1 year';\nexport const OffsetList = [\n  { name: '1 month', value: 1 },\n  { name: '3 month', value: 3 },\n  { name: '6 month', value: 6 },\n  { name: '1 year', value: 12 },\n  { name: '3 year', value: 36 },\n  { name: '5 year', value: 60 },\n];\nexport const chartStartDate = '2015-01-02';\n","import dayjs from 'dayjs';\n\nimport { CalendarFormat } from 'constants/calendar';\n\nexport const getTodayDate = () => dayjs().format(CalendarFormat);\n\nexport const isWeekend = (date) =>\n  dayjs(date).day() === 0 || dayjs(date).day() === 6;\n\nexport const getDayOfWeek = (date) => dayjs(date).day();\n\nexport const getAdjustDateToWeekDay = (date) => {\n  const day = getDayOfWeek(date);\n  const index = day === 0 ? 2 : 1;\n  return dayjs(date).subtract(index, 'day').format(CalendarFormat);\n};\n","import styled from 'styled-components';\nimport { flexCenterX, Radio, MaskingInput } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexCenterX}\n\n  align-items: center;\n`;\n\nexport const DateInput = styled(MaskingInput)`\n  padding: 0px 10px;\n`;\n\nexport const OffsetContainer = styled.div`\n  ${flexCenterX}\n  padding:20px;\n`;\n\nexport const OffsetDate = styled(Radio)``;\n\nexport const Cursor = styled.div`\n  cursor: pointer;\n`;\n","import React, { useState } from 'react';\nimport dayjs from 'dayjs';\n\nimport {\n  defaultOffset,\n  OffsetList,\n  chartStartDate,\n  CalendarFormat,\n} from 'constants/calendar';\nimport { isWeekend, getAdjustDateToWeekDay, getTodayDate } from 'utils/day';\n\nimport {\n  DateInput,\n  Container,\n  OffsetContainer,\n  OffsetDate,\n  Cursor,\n} from './StockCalendar.styles';\n\nconst StockCalendar = ({ startDate, setStartDate, endDate, setEndDate }) => {\n  const [calendarOffset, setCalendarOffset] = useState(defaultOffset);\n\n  const handleChange = (e) => {\n    const target = e.target.name;\n    const date = e.target.value;\n    if (date.length === 10) {\n      const newDate = new Date(date);\n      const today = new Date();\n      const _chartStartDate = new Date(chartStartDate);\n      if (+newDate >= +_chartStartDate && +newDate <= +today) {\n        target === 'startDate' ? setStartDate(date) : setEndDate(date);\n      }\n    }\n  };\n\n  const handleCalendarOffset = (offset, offsetValue) => {\n    let date = dayjs(endDate, CalendarFormat);\n    date = date.subtract(offsetValue, 'month');\n    setCalendarOffset(offset);\n    if (isWeekend(date)) {\n      date = getAdjustDateToWeekDay(date);\n    }\n    setStartDate(dayjs(date).format(CalendarFormat));\n  };\n\n  const handleDateByOffset = (dir) => {\n    let _endDate = dayjs(endDate, CalendarFormat);\n    let _startDate = dayjs(startDate, CalendarFormat);\n    const offsetValue = OffsetList.find((el) => el.name === calendarOffset)\n      .value;\n    if (dir === 'next') {\n      _endDate = _endDate.add(offsetValue, 'month');\n      _startDate = _startDate.add(offsetValue, 'month');\n      if (dayjs(_endDate).isAfter(getTodayDate())) {\n        alert('오늘 이후의 날짜는 선택할 수 없습니다.');\n        return;\n      }\n    } else if (dir === 'prev') {\n      _endDate = _endDate.subtract(offsetValue, 'month');\n      _startDate = _startDate.subtract(offsetValue, 'month');\n\n      if (dayjs(_startDate).isBefore(chartStartDate)) {\n        alert(`${chartStartDate} 이전의 날짜는 선택할 수 없습니다.`);\n        return;\n      }\n    }\n\n    if (isWeekend(_endDate)) {\n      _endDate = getAdjustDateToWeekDay(_endDate);\n    }\n    if (isWeekend(_startDate)) {\n      _startDate = getAdjustDateToWeekDay(_startDate);\n    }\n    setEndDate(dayjs(_endDate).format(CalendarFormat));\n    setStartDate(dayjs(_startDate).format(CalendarFormat));\n  };\n\n  return (\n    <Container>\n      <Cursor onClick={() => handleDateByOffset('prev')}>{'<'}</Cursor>\n      <DateInput\n        mask={[\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n        ]}\n        type=\"text\"\n        name=\"startDate\"\n        value={startDate}\n        required\n        onChange={handleChange}\n        placeholder=\"8자리 숫자 입력(2015-01-02)\"\n      />\n      ~\n      <DateInput\n        mask={[\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n        ]}\n        type=\"text\"\n        name=\"endDate\"\n        value={endDate}\n        required\n        onChange={handleChange}\n        placeholder=\"8자리 숫자 입력(2015-01-02)\"\n      />\n      <Cursor onClick={() => handleDateByOffset('next')}>{'>'}</Cursor>\n      <OffsetContainer>\n        {OffsetList &&\n          OffsetList.map((el) => (\n            <div key={el.value}>\n              <OffsetDate\n                isChecked={calendarOffset === el.name}\n                onClick={() => handleCalendarOffset(el.name, el.value)}\n              />\n              <span>{el.name}</span>\n            </div>\n          ))}\n      </OffsetContainer>\n    </Container>\n  );\n};\n\nexport default StockCalendar;\n","export const getRoundTwoPrecision = (number) => Math.round(number * 100) / 100;\n","import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\n\nimport { CalendarFormat } from 'constants/calendar';\nimport { getRoundTwoPrecision } from 'utils/utils';\n\nexport const getPercent = (target, value) => {\n  return getRoundTwoPrecision(\n    ((parseInt(value, 10) - parseInt(target, 10)) / parseInt(target, 10)) * 100\n  );\n};\n\nexport const getRelative = (maxValue, minValue, value) => {\n  return getRoundTwoPrecision(\n    ((parseInt(value, 10) - parseInt(minValue, 10)) /\n      (parseInt(maxValue, 10) - parseInt(minValue, 10))) *\n      100\n  );\n};\n\nexport const generateDayBetween = (startDate, endDate) => {\n  let _start = dayjs(startDate).format(CalendarFormat);\n  const _end = dayjs(endDate).format(CalendarFormat);\n  const days = [];\n\n  dayjs.extend(isSameOrBefore);\n  while (dayjs(_start).isSameOrBefore(_end)) {\n    days.push([_start, '0', '0', '0', '0', '0', '0']);\n    _start = dayjs(_start).add(1, 'day').format(CalendarFormat);\n  }\n\n  return days;\n};\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport dayjs from 'dayjs';\n\nimport { chartOption } from 'constants/chart';\nimport { fetchStockDataFromCsv } from 'services/stock';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockTable from 'components/StockTable/StockTable';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport { getPercent, getRelative } from 'utils/chart';\nimport { CalendarFormat } from 'constants/calendar';\n\nimport { Container } from './Stock.styles';\n\nconst Stock = ({ stockList }) => {\n  const {\n    params: { code: stockCode },\n  } = useRouteMatch();\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionPercent, setOptionPercent] = useState({\n    ...chartOption,\n  });\n  const [optionRelative, setOptionRelative] = useState({\n    ...chartOption,\n  });\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n  const [percentTargetDate, setPercentTargetDate] = useState(startDate);\n\n  useEffect(() => {\n    const getData = async () => {\n      const stockData = { ...chartOption };\n      const stockDataPercent = { ...chartOption };\n      const stockDataRelative = { ...chartOption };\n\n      const { data: stockAll } = await fetchStockDataFromCsv(stockCode);\n\n      let startDateIndex;\n      let index = 0;\n      while (\n        !startDateIndex ||\n        // eslint-disable-next-line no-plusplus\n        (startDateIndex < 0 && index++ <= stockAll.length)\n      ) {\n        startDateIndex = stockAll.findIndex(\n          // eslint-disable-next-line no-loop-func\n          (el) =>\n            el[0] ===\n            dayjs(startDate).subtract(index, 'day').format(CalendarFormat)\n        );\n      }\n\n      let endDateIndex;\n      index = 0;\n      while (\n        !endDateIndex ||\n        // eslint-disable-next-line no-plusplus\n        (endDateIndex < 0 && index++ <= stockAll.length)\n      ) {\n        endDateIndex = stockAll.findIndex(\n          // eslint-disable-next-line no-loop-func\n          (el) =>\n            el[0] ===\n            dayjs(endDate).subtract(index, 'day').format(CalendarFormat)\n        );\n      }\n\n      const stock = [\n        stockAll[0],\n        ...stockAll.slice(startDateIndex, endDateIndex + 1),\n      ];\n      // console.log(startDateIndex, endDateIndex);\n\n      const targetDateValue = stock.find((el) => el[0] === percentTargetDate)\n        ? parseInt(stock.find((el) => el[0] === percentTargetDate)[4], 10)\n        : stock[1]\n        ? stock[1][4]\n        : null;\n\n      const minValue = parseInt(\n        Math.min(\n          ...stock\n            .slice(1)\n            .map((el) => {\n              if (el[4] !== '0') return parseInt(el[4], 10);\n              return null;\n            })\n            .filter((el) => el)\n        ),\n        10\n      );\n\n      const maxValue = parseInt(\n        Math.max(\n          ...stock\n            .slice(1)\n            .map((el) => {\n              if (el[4] !== '0') return parseInt(el[4], 10);\n              return null;\n            })\n            .filter((el) => el)\n        ),\n        10\n      );\n      const currentStock = stockList.find((el) => el[0] === stockCode);\n\n      // x축\n      stockData.xAxis = {\n        ...stockData.xAxis,\n        data: stock.slice(1).map((el) => el[0]),\n      };\n      stockDataPercent.xAxis = {\n        ...stockData.xAxis,\n      };\n      stockDataRelative.xAxis = {\n        ...stockData.xAxis,\n      };\n\n      // y축\n      stockData.yAxis = {\n        ...stockData.yAxis,\n        min: minValue,\n        max: maxValue,\n      };\n      stockDataPercent.yAxis = {\n        ...stockDataPercent.yAxis,\n        axisLabel: {\n          formatter: '{value} %',\n        },\n      };\n      stockDataRelative.yAxis = {\n        ...stockDataPercent.yAxis,\n      };\n\n      // series Data\n      stockData.series = [\n        ...stockData.series,\n        {\n          data: stock.slice(1).map((el) => {\n            if (el[4] !== '0') return parseInt(el[4], 10);\n            return null;\n          }),\n          type: 'line',\n          connectNulls: true,\n          name: `${currentStock ? currentStock[1] : ''}/${stockCode}`,\n        },\n      ];\n      stockDataPercent.series = [\n        ...stockDataPercent.series,\n        {\n          data: stock.slice(1).map((el) => {\n            if (el[4] !== '0')\n              return getPercent(targetDateValue, parseInt(el[4], 10));\n            return null;\n          }),\n          type: 'line',\n          connectNulls: true,\n          name: `${currentStock ? currentStock[1] : ''}/${stockCode}`,\n        },\n      ];\n      stockDataRelative.series = [\n        ...stockDataRelative.series,\n        {\n          data: stock.slice(1).map((el) => {\n            if (el[4] !== '0') {\n              return getRelative(maxValue, minValue, parseInt(el[4], 10));\n            }\n            return null;\n          }),\n          type: 'line',\n          connectNulls: true,\n          name: `${currentStock ? currentStock[1] : ''}/${stockCode}`,\n        },\n      ];\n\n      setOption(stockData);\n      setOptionPercent(stockDataPercent);\n      setOptionRelative(stockDataRelative);\n      setLoaded(true);\n    };\n\n    getData();\n  }, [endDate, percentTargetDate, startDate, stockCode, stockList]);\n\n  const onChartClick = (params) => {\n    const { name } = params;\n    setPercentTargetDate(name);\n  };\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && (\n        <>\n          종가 그래프( Y축 : 기간 내 최저가 ~ 최고가)\n          <StockChart\n            stockList={stockList}\n            chartData={option}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n      {isLoaded && (\n        <>\n          {percentTargetDate}일( 기준일 = 0% ) 대비 상승/하락 률 ( 그래프 클릭\n          날짜 변경 )\n          <StockChart\n            stockList={stockList}\n            chartData={optionPercent}\n            onEvents={{\n              click: onChartClick,\n            }}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n      {isLoaded && (\n        <>\n          최저가(0%) / 최고가(100%) 대비 그래프\n          <StockChart\n            stockList={stockList}\n            chartData={optionRelative}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n      {isLoaded && <StockTable stockCode={stockCode} startDate={startDate} />}\n    </Container>\n  );\n};\n\nexport default Stock;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\n\nimport { chartOption } from 'constants/chart';\nimport { fetchStockDataFromCsv } from 'services/stock';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport { CalendarFormat } from 'constants/calendar';\n\nimport { Container } from './Dashboard.styles';\n\nconst Dashboard = ({ stockList }) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionHigh, setOptionHigh] = useState({\n    ...chartOption,\n  });\n  const [optionExtraHigh, setOptionExtraHigh] = useState({\n    ...chartOption,\n  });\n  const [optionLow, setOptionLow] = useState({\n    ...chartOption,\n  });\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n\n  useEffect(() => {\n    const stockData = { ...chartOption };\n    const stockDataHigh = { ...chartOption };\n    const stockDataExtraHigh = { ...chartOption };\n    const stockDataLow = { ...chartOption };\n    const fetchAllData = [];\n\n    stockList\n      .map((el) => el[0])\n      .forEach(async (number) => {\n        fetchAllData.push(fetchStockDataFromCsv(number));\n      });\n\n    Promise.all(fetchAllData).then((data) => {\n      data.forEach(({ data: stockAll }, index) => {\n        const startDateIndex = stockAll.findIndex(\n          (el) => el[0] === dayjs(startDate).format(CalendarFormat)\n        );\n        const endDateIndex = stockAll.findIndex(\n          (el) => el[0] === dayjs(endDate).format(CalendarFormat)\n        );\n\n        const stock = [\n          stockAll[0],\n          ...stockAll.slice(startDateIndex, endDateIndex + 1),\n        ];\n\n        const priceList = stock\n          .slice(1)\n          .map((el) => {\n            if (el[4] !== '0') return parseInt(el[4], 10);\n            return null;\n          })\n          .filter((el) => el);\n\n        const mean = (Math.min(...priceList) + Math.max(...priceList)) / 2;\n        const ref =\n          // eslint-disable-next-line no-nested-ternary\n          mean > 400000\n            ? stockDataExtraHigh\n            : // eslint-disable-next-line no-nested-ternary\n            mean > 200000\n            ? stockDataHigh\n            : mean < 50000\n            ? stockDataLow\n            : stockData;\n\n        ref.xAxis = {\n          ...ref.xAxis,\n          data: stock.slice(1).map((el) => el[0]),\n        };\n\n        ref.yAxis = {\n          ...ref.yAxis,\n        };\n\n        ref.series = [\n          ...ref.series,\n          {\n            data: stock.slice(1).map((el) => {\n              if (el[4] !== '0') return parseInt(el[4], 10);\n              return null;\n            }),\n            type: 'line',\n            connectNulls: true,\n            name: `${stockList[index][1]}/${stockList[index][0]}`,\n          },\n        ];\n      });\n      setOption(stockData);\n      setOptionHigh(stockDataHigh);\n      setOptionExtraHigh(stockDataExtraHigh);\n      setOptionLow(stockDataLow);\n      setLoaded(true);\n    });\n  }, [startDate, endDate, stockList]);\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && (\n        <StockChart stockList={stockList} chartData={optionExtraHigh} />\n      )}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionHigh} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={option} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionLow} />}\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const AppBody = styled.div`\n  height: 100%;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom';\nimport { GlobalTheme } from 'remember-ui';\n\nimport Routes from 'routers//routes';\nimport CommonRoute from 'routers/CommonRoute';\nimport NavBar from 'components/NavBar/NavBar';\nimport Stock from 'pages/Stock/Stock';\nimport Dashboard from 'pages/Dashboard/Dashboard';\nimport { fetchStockListFromCsv } from 'services/stock';\n\nimport { AppBody } from './App.styles';\n\nfunction App() {\n  const { root, stock } = Routes;\n  const [stockList, setStockList] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const { data } = await fetchStockListFromCsv();\n      setStockList(data.slice(1));\n    })();\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <AppBody>\n        <GlobalTheme />\n        <NavBar stockList={stockList} />\n        <Switch>\n          <CommonRoute path={stock.path}>\n            <Stock stockList={stockList} />\n          </CommonRoute>\n          <CommonRoute path={root.path}>\n            <Dashboard stockList={stockList} />\n          </CommonRoute>\n          <Redirect to={root.path} />\n        </Switch>\n      </AppBody>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}