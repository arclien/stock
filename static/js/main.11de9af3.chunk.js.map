{"version":3,"sources":["services/stock.js","context/StockContext.js","routers/routes.js","routers/CommonRoute.js","components/NavBar/Navbar.styles.js","components/NavBar/NavBar.js","constants/chart.js","constants/calendar.js","constants/locale.js","components/StockChart/StockChart.js","utils/day.js","components/StockCalendar/StockCalendar.styles.js","components/StockCalendar/StockCalendar.js","utils/chart.js","utils/utils.js","pages/Stock/Stock.styles.js","pages/Stock/Stock.js","pages/Dashboard/Dashboard.styles.js","pages/Dashboard/Dashboard.js","pages/Tag/Tag.styles.js","pages/Tag/Tag.js","utils/tag.js","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["fetchStockListFromCsv","a","fetch","window","location","origin","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","readString","fetchStockDataFromCsv","stockNumber","Context","createContext","Provider","STOCK_DATA_LIST","Consumer","StockProvider","children","useState","stockList","setStockList","useEffect","data","slice","filter","el","length","reduce","acc","cur","code","name","nation","user_id","created_at","updated_at","tag_list","getStockData","stockCode","state","actions","StockContext","path","url","description","CommonRoute","rest","Container","styled","div","flexColumnCenterX","StockList","StockItem","Link","StockText","Chip","active","css","NavBar","pathname","useLocation","stock","Routes","tag","root","tagList","setTagList","useContext","tags","Set","map","split","concat","trim","to","key","chartOption","xAxis","yAxis","series","chartStyle","height","width","OffsetList","LOCALE","CURRENCY","defaultOption","legend","tooltip","trigger","axisPointer","type","animation","axisLabel","formatter","StockChart","chartData","onEvents","style","isLoaded","setLoaded","option","setOption","EchartsReact","setEchartsReact","_option","instance","getEchartsInstance","clear","ref","e","getTodayDate","dayjs","format","isWeekend","date","day","getAdjustDateToWeekDay","index","getDayOfWeek","subtract","flexCenterX","DateInput","MaskingInput","OffsetContainer","OffsetDate","Radio","Cursor","StockCalendar","startDate","setStartDate","endDate","setEndDate","calendarOffset","setCalendarOffset","handleChange","target","newDate","Date","today","handleDateByOffset","dir","_endDate","_startDate","offsetValue","find","add","isAfter","alert","isBefore","onClick","mask","required","onChange","placeholder","isChecked","offset","handleCalendarOffset","getPercent","number","parseInt","Math","round","getCurrency","Stock","useRouteMatch","params","history","useHistory","optionPercent","setOptionPercent","percentTargetDate","setPercentTargetDate","currentStock","replace","stockData","stockDataPercent","stockAll","startDateIndex","findIndex","endDateIndex","targetDateValue","_valueDate","minValue","min","maxValue","max","parseFloat","connectNulls","getData","click","Dashboard","optionHigh","setOptionHigh","optionExtraHigh","setOptionExtraHigh","optionLow","setOptionLow","optionUs","setOptionUs","stockDataHigh","stockDataExtraHigh","stockDataLow","stockDataUs","fetchAllData","forEach","push","Promise","all","then","currency","priceList","mean","Tag","tagName","tagStockList","setTagStockList","_tagStockList","includes","getStockListByTag","AppBody","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0UAEaA,EAAqB,uCAAG,oCAAAC,EAAA,sEACZC,MAAM,GAAD,OACvBC,OAAOC,SAASC,OADO,+BADO,cAC7BC,EAD6B,OAI7BC,EAASD,EAASE,KAAKC,YAJM,SAKdF,EAAOG,OALO,cAK7BC,EAL6B,OAM7BC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAPC,kBAQ5BC,YAAWH,IARiB,4CAAH,qDAWrBI,EAAqB,uCAAG,WAAOC,GAAP,uBAAAlB,EAAA,sEACZC,MAAM,GAAD,OACvBC,OAAOC,SAASC,OADO,uBACcc,EADd,SADO,cAC7Bb,EAD6B,OAI7BC,EAASD,EAASE,KAAKC,YAJM,SAKdF,EAAOG,OALO,cAK7BC,EAL6B,OAM7BC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAPC,kBAQ5BC,YAAWH,IARiB,4CAAH,sDCT5BM,EAAUC,0BAERC,EAAsCF,EAAtCE,SACJC,GAD0CH,EAA5BI,SACI,IAEhBC,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACJC,mBAAS,IADL,mBAC/BC,EAD+B,KACpBC,EADoB,KAGtCC,qBAAU,WACR,sBAAC,8BAAA7B,EAAA,sEACwBD,IADxB,gBACS+B,EADT,EACSA,KACRF,EAAaE,EAAKC,MAAM,GAAGC,QAAO,SAACC,GAAD,OAAQA,EAAGC,OAAS,MACtDZ,EAAkBQ,EACfC,MAAM,GACNC,QAAO,SAACC,GAAD,OAAQA,EAAGC,OAAS,KAC3BC,QACC,SAACC,EAAKC,GAAN,sBACKD,EADL,eAEGC,EAAI,GAAK,CACRC,KAAMD,EAAI,GACVE,KAAMF,EAAI,GACVG,OAAQH,EAAI,GACZI,QAASJ,EAAI,GACbK,WAAYL,EAAI,GAChBM,WAAYN,EAAI,GAChBO,SAAUP,EAAI,GACdP,KAAM,QAGV,IApBL,0CAAD,KAuBC,IAEH,IAAMe,EAAY,uCAAG,WAAOC,GAAP,qBAAA9C,EAAA,yDACd8C,EADc,yCACI,IADJ,aAIjB,UAAAxB,EAAgBwB,UAAhB,eAA4BhB,QAC5B,UAAAR,EAAgBwB,UAAhB,eAA4BhB,KAAKI,QAAS,GALzB,yCAOVZ,EAAgBwB,GAAWhB,MAPjB,uBASIb,EAAsB6B,GAT1B,uBASXhB,EATW,EASXA,KAERR,EAAe,eACVA,EADU,eAEZwB,EAFY,eAGRxB,EAAgBwB,GAHR,CAIXhB,WAfe,kBAmBZA,GAnBY,4CAAH,sDAsBlB,OACE,kBAACT,EAAD,CACEN,MAAO,CACLgC,MAAO,CACLpB,YACAL,mBAEF0B,QAAS,CAAEH,kBAGZpB,IAKDwB,EAAe9B,ECzDN,EAlBF,CACX+B,KAAM,SACNC,IAAK,SACLC,YAAa,aAeA,EAZD,CACZF,KAAM,oBACNC,IAAK,eACLC,YAAa,cASA,EANH,CACVF,KAAM,kBACNC,IAAK,cACLC,YAAa,Y,SCJAC,EARK,SAAC,GAAiC,IAA/B5B,EAA8B,EAA9BA,SAAUyB,EAAoB,EAApBA,KAASI,EAAW,mCACnD,OACE,kBAAC,IAAD,eAAOJ,KAAMA,GAAUI,GACpB7B,I,mkBCFA,IAAM8B,EAAYC,IAAOC,IAAV,IAClBC,KAISC,EAAYH,IAAOC,IAAV,KACTG,EAAYJ,YAAOK,IAAPL,CAAH,KAMTM,EAAYN,YAAOO,IAAPP,CAAH,KAClB,qBAAGQ,QAEHC,YADM,QCuCKC,EAjDA,WAAO,IACZC,EAAaC,cAAbD,SACAE,EAAqBC,EAAdC,EAAcD,EAATE,EAASF,EAFV,EAGW5C,mBAAS,IAHpB,mBAGZ+C,EAHY,KAGHC,EAHG,KAMR/C,EACPgD,qBAAW1B,GADbF,MAASpB,UAcX,OAXAE,qBAAU,WACR,IAAM+C,EAAO,IAAIC,IAAJ,YACRlD,EACAmD,KAAI,SAAC7C,GAAD,OAAQA,EAAG,GAAG8C,MAAM,QACxB5C,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAI4C,OAAO3C,KAAM,IACtCL,QAAO,SAACC,GAAD,MAAe,KAAPA,KACf6C,KAAI,SAAC7C,GAAD,OAAQA,EAAGgD,YAEpBP,EAAW,YAAIE,MACd,CAACjD,IAGF,kBAAC4B,EAAD,KACE,kBAACI,EAAD,KACE,kBAACC,EAAD,CAAWsB,GAAE,UAAKV,EAAKtB,OACrB,kBAACY,EAAD,CAAWE,OAAQG,IAAQ,UAAQK,EAAKtB,OAAxC,UACMsB,EAAKpB,eAGZzB,GACCA,EAAUmD,KAAI,SAAC7C,GAAD,OACZ,kBAAC2B,EAAD,CAAWuB,IAAKlD,EAAG,GAAIiD,GAAE,UAAKb,EAAMlB,KAAX,OAAiBlB,EAAG,KAC3C,kBAAC6B,EAAD,CAAWE,OAAQG,IAAQ,UAAQE,EAAMlB,KAAd,OAAoBlB,EAAG,KAAlD,UACMA,EAAG,GADT,aACgBA,EAAG,GADnB,UAKLwC,GACCA,EAAQK,KAAI,SAAC7C,GAAD,OACV,kBAAC2B,EAAD,CAAWuB,IAAKlD,EAAIiD,GAAE,UAAKX,EAAIpB,KAAT,OAAelB,IACnC,kBAAC6B,EAAD,CAAWE,OAAQG,IAAQ,UAAQI,EAAIpB,KAAZ,OAAkBlB,IAA7C,UACMA,W,iBChDPmD,EAAc,CAAEC,MAAO,GAAIC,MAAO,GAAIC,OAAQ,IAC9CC,EAAa,CAAEC,OAAQ,QAASC,MAAO,QCCvCC,EAAa,CACxB,CAAEpD,KAAM,UAAWxB,MAAO,GAC1B,CAAEwB,KAAM,UAAWxB,MAAO,GAC1B,CAAEwB,KAAM,UAAWxB,MAAO,GAC1B,CAAEwB,KAAM,SAAUxB,MAAO,IACzB,CAAEwB,KAAM,SAAUxB,MAAO,IACzB,CAAEwB,KAAM,SAAUxB,MAAO,KCRd6E,EACP,KADOA,EAEP,KAGOC,EACP,IADOA,EAEP,S,kBCDAC,EAAgB,CACpBC,OAAQ,GAGRC,QAAS,CACPC,QAAS,OACTC,YAAa,CACXC,KAAM,QACNC,WAAW,IAOff,MAAO,CACLc,KAAM,WACNrE,KAAM,IAERwD,MAAO,CACLa,KAAM,QACNE,UAAW,CACTC,UAAU,WAAD,OAAaT,KAM1BN,OAAQ,IA2DKgB,GAxDI,SAAC,GAKb,IAJLC,EAII,EAJJA,UACAC,EAGI,EAHJA,SACA9E,EAEI,EAFJA,UAEI,IADJ+E,aACI,qBADSlB,GACT,IAC0B9D,oBAAS,GADnC,mBACGiF,EADH,KACaC,EADb,OAEwBlF,mBAAS,eAAKoE,IAFtC,mBAEGe,EAFH,KAEWC,EAFX,OAGoCpF,mBAAS,MAH7C,mBAGGqF,EAHH,KAGiBC,EAHjB,KAmCJ,OA9BAnF,qBAAU,WACR,IAAMoF,EAAU,CACdlB,OAAO,eACFD,EAAcC,OADb,CAEJjE,KAAMH,EAAUmD,KAAI,SAAC7C,GAAD,gBAAWA,EAAG,GAAd,YAAoBA,EAAG,SAE7C+D,QAAQ,eACHF,EAAcE,SAEnBX,MAAM,eACDS,EAAcT,MADd,GAEAmB,EAAUnB,OAEfC,MAAM,eACDQ,EAAcR,MADd,GAEAkB,EAAUlB,OAEfC,OAAO,GAAD,mBAAMO,EAAcP,QAApB,YAA+BiB,EAAUjB,UAEjDuB,EAAUG,GAEV,IAAMC,EAAQ,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAcI,qBAC3BD,IACFA,EAASE,QACTF,EAASJ,UAAUG,IAGrBL,GAAU,KACT,CAACG,EAAcP,EAAW7E,IAG3B,oCACGgF,GACC,kBAAC,IAAD,CACEU,IAAK,SAACC,GACJN,EAAgBM,IAElBZ,MAAOA,EACPG,OAAQA,EACRJ,SAAUA,MClFPc,GAAe,kBAAMC,MAAQC,OHJZ,eGMjBC,GAAY,SAACC,GAAD,OACD,IAAtBH,IAAMG,GAAMC,OAAqC,IAAtBJ,IAAMG,GAAMC,OAI5BC,GAAyB,SAACF,GACrC,IACMG,EAAgB,IAJI,SAACH,GAAD,OAAUH,IAAMG,GAAMC,MAGpCG,CAAaJ,GACC,EAAI,EAC9B,OAAOH,IAAMG,GAAMK,SAASF,EAAO,OAAOL,OHdd,e,8cIGvB,IAAMlE,GAAYC,IAAOC,IAAV,KAClBwE,KAKSC,GAAY1E,YAAO2E,IAAP3E,CAAH,MAIT4E,GAAkB5E,IAAOC,IAAV,KACxBwE,KAISI,GAAa7E,YAAO8E,IAAP9E,CAAH,MAEV+E,GAAS/E,IAAOC,IAAV,MCsHJ+E,GAvHO,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAAiB,EAC9BlH,mBLnBjB,UKkB+C,mBACnEmH,EADmE,KACnDC,EADmD,KAGpEC,EAAe,SAACzB,GACpB,IAAM0B,EAAS1B,EAAE0B,OAAOzG,KAClBoF,EAAOL,EAAE0B,OAAOjI,MACtB,GAAoB,KAAhB4G,EAAKzF,OAAe,CACtB,IAAM+G,EAAU,IAAIC,KAAKvB,GACnBwB,EAAQ,IAAID,MAEbD,IADmB,IAAIC,KLlBJ,gBKmBaD,IAAYE,IACpC,cAAXH,EAAyBN,EAAaf,GAAQiB,EAAWjB,MAezDyB,EAAqB,SAACC,GAC1B,IAAIC,EAAW9B,IAAMmB,EL9CK,cK+CtBY,EAAa/B,IAAMiB,EL/CG,cKgDpBe,EAAc7D,EAAW8D,MAAK,SAACxH,GAAD,OAAQA,EAAGM,OAASsG,KACrD9H,MACH,GAAY,SAARsI,GAGF,GAFAC,EAAWA,EAASI,IAAIF,EAAa,SACrCD,EAAaA,EAAWG,IAAIF,EAAa,SACrChC,IAAM8B,GAAUK,QAAQpC,MAE1B,YADAqC,MAAM,+GAGH,GAAY,SAARP,IACTC,EAAWA,EAAStB,SAASwB,EAAa,SAC1CD,EAAaA,EAAWvB,SAASwB,EAAa,SAE1ChC,IAAM+B,GAAYM,SLnDE,eKqDtB,YADAD,MAAM,GAAD,OLpDiB,aKoDjB,+FAKLlC,GAAU4B,KACZA,EAAWzB,GAAuByB,IAEhC5B,GAAU6B,KACZA,EAAa1B,GAAuB0B,IAEtCX,EAAWpB,IAAM8B,GAAU7B,OLzED,eK0E1BiB,EAAalB,IAAM+B,GAAY9B,OL1EL,gBK6E5B,OACE,kBAAC,GAAD,KACE,kBAACc,GAAD,CAAQuB,QAAS,kBAAMV,EAAmB,UAAU,KACpD,kBAAClB,GAAD,CACE6B,KAAM,CACJ,QACA,QACA,QACA,QACA,IACA,QACA,QACA,IACA,QACA,SAEF5D,KAAK,OACL5D,KAAK,YACLxB,MAAO0H,EACPuB,UAAQ,EACRC,SAAUlB,EACVmB,YAAY,wDApBhB,IAuBE,kBAAChC,GAAD,CACE6B,KAAM,CACJ,QACA,QACA,QACA,QACA,IACA,QACA,QACA,IACA,QACA,SAEF5D,KAAK,OACL5D,KAAK,UACLxB,MAAO4H,EACPqB,UAAQ,EACRC,SAAUlB,EACVmB,YAAY,wDAEd,kBAAC3B,GAAD,CAAQuB,QAAS,kBAAMV,EAAmB,UAAU,KACpD,kBAAChB,GAAD,KACGzC,GACCA,EAAWb,KAAI,SAAC7C,GAAD,OACb,yBAAKkD,IAAKlD,EAAGlB,OACX,kBAACsH,GAAD,CACE8B,UAAWtB,IAAmB5G,EAAGM,KACjCuH,QAAS,kBA7FM,SAACM,EAAQZ,GACpC,IAAI7B,EAAOH,IAAMmB,ELpCS,cKqC1BhB,EAAOA,EAAKK,SAASwB,EAAa,SAClCV,EAAkBsB,GACd1C,GAAUC,KACZA,EAAOE,GAAuBF,IAEhCe,EAAalB,IAAMG,GAAMF,OL1CC,eKgIC4C,CAAqBpI,EAAGM,KAAMN,EAAGlB,UAElD,8BAAOkB,EAAGM,aC3HX+H,I,OAAa,SAACtB,EAAQjI,GACjC,OCRmCwJ,GDS/BC,SAASzJ,EAAO,IAAMyJ,SAASxB,EAAQ,KAAOwB,SAASxB,EAAQ,IAAO,ICT5ByB,KAAKC,MAAe,IAATH,GAAgB,IAAvC,IAACA,ID2BxBI,GAAc,SAACtG,GAC1B,IAAM7B,EAAU6B,GAASA,EAAM,IAAO,GACtC,OAAI7B,IAAWoD,EACNC,EAELrD,IAAWoD,EACNC,EAEF,I,iGEhCF,IAAMtC,GAAYC,IAAOC,IAAV,KAClBC,KC8NWkH,GAjND,WAAO,IAED9H,EACd+H,cADFC,OAAUxI,KAFM,EAOdqC,qBAAW1B,GAFJtB,EALO,EAKhBoB,MAASpB,UACEkB,EANK,EAMhBG,QAAWH,aAGPkI,EAAUC,cACRxG,EAASF,EAVC,EAYY5C,oBAAS,GAZrB,mBAYXiF,EAZW,KAYDC,EAZC,OAaUlF,mBAAS,eAChC0D,IAda,mBAaXyB,EAbW,KAaHC,EAbG,OAgBwBpF,mBAAS,eAC9C0D,IAjBa,mBAgBX6F,EAhBW,KAgBIC,EAhBJ,OAoBgBxJ,mBAAS,cApBzB,mBAoBX+G,EApBW,KAoBAC,EApBA,OAqBYhH,mBAAS6F,MArBrB,mBAqBXoB,EArBW,KAqBFC,EArBE,OAsBgClH,mBAAS+G,GAtBzC,mBAsBX0C,EAtBW,KAsBQC,EAtBR,KAwBlBvJ,qBAAU,YACK,uCAAG,gDAAA7B,EAAA,6DACRqL,EAAe1J,EAAU8H,MAAK,SAACxH,GAAD,OAAQA,EAAG,KAAOa,KAClDnB,EAAUO,OAAS,IAAMmJ,GAAcN,EAAQO,QAAQ9G,EAAKtB,MAE1DqI,EAJQ,eAISnG,GACjBoG,EALQ,eAKgBpG,GALhB,SAOSvC,EAAaC,GAPtB,OAOR2I,EAPQ,OASRC,EAAiBD,EAASE,WAC9B,SAAC1J,GAAD,OAAQA,EAAG,KAAOuF,IAAMiB,GAAWhB,OTpDb,iBS0DxBmE,GAHIA,EAAeH,EAASE,WAC1B,SAAC1J,GAAD,OAAQA,EAAG,KAAOuF,IAAMmB,GAASlB,OTxDX,mBS0DO,EAAIgE,EAASvJ,OAAS,EAAI0J,EACnDvH,EAjBQ,CAkBZoH,EAAS,IAlBG,mBAmBTA,EAAS1J,MAAM2J,EAAgBE,EAAe,KAG/CC,EAAkB,KAElBxH,EAAMoF,MAAK,SAACxH,GAAD,OAAQA,EAAG,KAAOkJ,KAKP,KAJxBU,EAAkBrB,SAChBnG,EAAMoF,MAAK,SAACxH,GAAD,OAAQA,EAAG,KAAOkJ,KAAmB,GAChD,OAGMW,EAAazH,EAAMoF,MAAK,SAACxH,GAAD,MAAkB,MAAVA,EAAG,MACzC4J,EAAkBC,EAAaA,EAAW,GAAK,MAExCzH,EAAM,KACfwH,EAAkBxH,EAAM,GAAG,IAGvB0H,EAAWvB,SACfC,KAAKuB,IAAL,MAAAvB,KAAI,YACCpG,EACAtC,MAAM,GACN+C,KAAI,SAAC7C,GACJ,MAAc,MAAVA,EAAG,GAAmBuI,SAASvI,EAAG,GAAI,IACnC,QAERD,QAAO,SAACC,GAAD,OAAQA,OAEpB,IAGIgK,EAAWzB,SACfC,KAAKyB,IAAL,MAAAzB,KAAI,YACCpG,EACAtC,MAAM,GACN+C,KAAI,SAAC7C,GACJ,MAAc,MAAVA,EAAG,GAAmBuI,SAASvI,EAAG,GAAI,IACnC,QAERD,QAAO,SAACC,GAAD,OAAQA,OAEpB,IAIFsJ,EAAUlG,MAAV,eACKkG,EAAUlG,MADf,CAEEvD,KAAMuC,EAAMtC,MAAM,GAAG+C,KAAI,SAAC7C,GAAD,OAAQA,EAAG,QAEtCuJ,EAAiBnG,MAAjB,eACKkG,EAAUlG,OAIfkG,EAAUjG,MAAV,eACKiG,EAAUjG,MADf,CAEE0G,IAAKD,EACLG,IAAKD,EACL5F,UAAW,CACTC,UAAU,WAAD,OAAaqE,GAAYU,OAGtCG,EAAiBlG,MAAjB,eACKkG,EAAiBlG,MADtB,CAEEe,UAAW,CACTC,UAAW,eAKfiF,EAAUhG,OAAV,sBACKgG,EAAUhG,QADf,CAEE,CACEzD,KAAMuC,EAAMtC,MAAM,GAAG+C,KAAI,SAAC7C,GACxB,MAAc,MAAVA,EAAG,GACDoJ,GAAgBA,EAAa,KAAOzF,EAC/B4E,SAASvI,EAAG,GAAI,IAErBoJ,GAAgBA,EAAa,KAAOzF,EAC/BuG,WAAWlK,EAAG,IAEhBuI,SAASvI,EAAG,GAAI,IAElB,QAETkE,KAAM,OACNiG,cAAc,EACd7J,KAAK,GAAD,OAAK8I,EAAeA,EAAa,GAAK,GAAtC,YAA4CvI,MAIpD0I,EAAiBjG,OAAjB,sBACKiG,EAAiBjG,QADtB,CAEE,CACEzD,KAAMuC,EAAMtC,MAAM,GAAG+C,KAAI,SAAC7C,GACxB,MAAc,MAAVA,EAAG,GACEqI,GAAWuB,EAAiBrB,SAASvI,EAAG,GAAI,KAC9C,QAETkE,KAAM,OACNiG,cAAc,EACd7J,KAAK,GAAD,OAAK8I,EAAeA,EAAa,GAAK,GAAtC,YAA4CvI,MAIpDgE,EAAUyE,GACVL,EAAiBM,GACjB5E,GAAU,GA9HI,4CAAH,qDAiIbyF,KACC,CACD1D,EACA9F,EACAkI,EACAI,EACA3G,EAAKtB,KACLuF,EACA3F,EACAnB,IAQF,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CACE8G,UAAWA,EACXC,aAAcA,EACdC,QAASA,EACTC,WAAYA,IAEbjC,GACC,8IAEE,kBAAC,GAAD,CACEhF,UAAWA,EACX6E,UAAWK,EACXH,MAAO,CAAEjB,OAAQ,QAASC,MAAO,WAItCiB,GACC,oCACGwE,EADH,gJAGE,kBAAC,GAAD,CACExJ,UAAWA,EACX6E,UAAWyE,EACXxE,SAAU,CACR6F,MA/BS,SAACxB,GAAY,IACxBvI,EAASuI,EAATvI,KACR6I,EAAqB7I,KA+BbmE,MAAO,CAAEjB,OAAQ,QAASC,MAAO,a,iGCrNtC,IAAMnC,GAAYC,IAAOC,IAAV,KAClBC,KCuJW6I,GA7IG,WAAO,IAAD,EAIlB5H,qBAAW1B,GAFJtB,EAFW,EAEpBoB,MAASpB,UACEkB,EAHS,EAGpBG,QAAWH,aAHS,EAMQnB,oBAAS,GANjB,mBAMfiF,EANe,KAMLC,EANK,OAOMlF,mBAAS,eAChC0D,IARiB,mBAOfyB,EAPe,KAOPC,EAPO,OAUcpF,mBAAS,eACxC0D,IAXiB,mBAUfoH,EAVe,KAUHC,EAVG,OAawB/K,mBAAS,eAClD0D,IAdiB,mBAafsH,EAbe,KAaEC,EAbF,OAgBYjL,mBAAS,eACtC0D,IAjBiB,mBAgBfwH,EAhBe,KAgBJC,EAhBI,OAmBUnL,mBAAS,eACpC0D,IApBiB,mBAmBf0H,EAnBe,KAmBLC,EAnBK,OAsBYrL,mBAAS,cAtBrB,mBAsBf+G,EAtBe,KAsBJC,EAtBI,OAuBQhH,mBAAS6F,MAvBjB,mBAuBfoB,EAvBe,KAuBNC,EAvBM,KA0HtB,OAjGA/G,qBAAU,WACR,IAAM0J,EAAS,eAAQnG,GACjB4H,EAAa,eAAQ5H,GACrB6H,EAAkB,eAAQ7H,GAC1B8H,EAAY,eAAQ9H,GACpB+H,EAAW,eAAQ/H,GACnBgI,EAAe,GAErBzL,EACGmD,KAAI,SAAC7C,GAAD,OAAQA,EAAG,MACfoL,QAFH,uCAEW,WAAO9C,GAAP,SAAAvK,EAAA,sDACPoN,EAAaE,KAAKzK,EAAa0H,IADxB,2CAFX,uDAMAgD,QAAQC,IAAIJ,GAAcK,MAAK,SAAC3L,GAC9BA,EAAKuL,SAAQ,SAAC5B,EAAU3D,GACtB,IAAMuD,EAAe1J,EAAUmG,GACzB4F,EAAYrC,GAAgBA,EAAa,IAAOzF,EAChD8F,EAAiBD,EAASE,WAC9B,SAAC1J,GAAD,OAAQA,EAAG,KAAOuF,IAAMiB,GAAWhB,OX1Df,iBW6DlBmE,EAAeH,EAASE,WAC1B,SAAC1J,GAAD,OAAQA,EAAG,KAAOuF,IAAMmB,GAASlB,OX9Db,iBWgEtBmE,EAAeA,GAAgB,EAAIH,EAASvJ,OAAS,EAAI0J,EAEzD,IAAMvH,EAAK,CACToH,EAAS,IADA,mBAENA,EAAS1J,MAAM2J,EAAgBE,EAAe,KAG7C+B,EAAYtJ,EACftC,MAAM,GACN+C,KAAI,SAAC7C,GACJ,MAAc,MAAVA,EAAG,GAAmBuI,SAASvI,EAAG,GAAI,IACnC,QAERD,QAAO,SAACC,GAAD,OAAQA,KAEZ2L,GAAQnD,KAAKuB,IAAL,MAAAvB,KAAI,YAAQkD,IAAalD,KAAKyB,IAAL,MAAAzB,KAAI,YAAQkD,KAAc,EAC3DtG,EAEJqG,IAAa9H,EACTuH,EAEFS,EAAO,IACLX,EAEFW,EAAO,IACLZ,EACAY,EAAO,IACPV,EACA3B,EAENlE,EAAIhC,MAAJ,eACKgC,EAAIhC,MADT,CAEEvD,KAAMuC,EAAMtC,MAAM,GAAG+C,KAAI,SAAC7C,GAAD,OAAQA,EAAG,QAGtCoF,EAAI/B,MAAJ,eACK+B,EAAI/B,MADT,CAEEe,UAAW,CACTC,UAAU,WAAD,OAAaqE,GAAYU,OAItChE,EAAI9B,OAAJ,sBACK8B,EAAI9B,QADT,CAEE,CACEzD,KAAMuC,EAAMtC,MAAM,GAAG+C,KAAI,SAAC7C,GACxB,MAAc,MAAVA,EAAG,GACDoJ,GAAgBA,EAAa,KAAOzF,EAC/B4E,SAASvI,EAAG,GAAI,IAErBoJ,GAAgBA,EAAa,KAAOzF,EAC/BuG,WAAWlK,EAAG,IAEhBuI,SAASvI,EAAG,GAAI,IAElB,QAETkE,KAAM,OACNiG,cAAc,EACd7J,KAAK,GAAD,OAAK8I,EAAa,GAAlB,YAAwBA,EAAa,UAI/CvE,EAAUyE,GACVkB,EAAcO,GACdL,EAAmBM,GACnBJ,EAAaK,GACbH,EAAYI,GACZvG,GAAU,QAEX,CAAC6B,EAAWE,EAAShH,EAAWkB,IAGjC,kBAAC,GAAD,KACE,kBAAC,GAAD,CACE4F,UAAWA,EACXC,aAAcA,EACdC,QAASA,EACTC,WAAYA,IAEbjC,GACC,kBAAC,GAAD,CAAYhF,UAAWA,EAAW6E,UAAWkG,IAE9C/F,GAAY,kBAAC,GAAD,CAAYhF,UAAWA,EAAW6E,UAAWgG,IACzD7F,GAAY,kBAAC,GAAD,CAAYhF,UAAWA,EAAW6E,UAAWK,IACzDF,GAAY,kBAAC,GAAD,CAAYhF,UAAWA,EAAW6E,UAAWoG,IACzDjG,GAAY,kBAAC,GAAD,CAAYhF,UAAWA,EAAW6E,UAAWsG,M,iGCnJzD,IAAMvJ,GAAYC,IAAOC,IAAV,KAClBC,KC0MWmK,GA5LH,WAAO,IAEAC,EACbjD,cADFC,OAAUvG,IAFI,EAOZI,qBAAW1B,GAFJtB,EALK,EAKdoB,MAASpB,UACEkB,EANG,EAMdG,QAAWH,aAGPkI,EAAUC,cACRxG,EAASF,EAVD,EAYwB5C,mBAAS,IAZjC,mBAYTqM,EAZS,KAYKC,EAZL,OAactM,oBAAS,GAbvB,mBAaTiF,EAbS,KAaCC,EAbD,OAcYlF,mBAAS,eAChC0D,IAfW,mBAcTyB,EAdS,KAcDC,EAdC,OAiBgBpF,mBAAS,eACpC0D,IAlBW,mBAiBT0H,EAjBS,KAiBCC,EAjBD,OAoB0BrL,mBAAS,eAC9C0D,IArBW,mBAoBT6F,EApBS,KAoBMC,EApBN,OAwBkBxJ,mBAAS,cAxB3B,mBAwBT+G,EAxBS,KAwBEC,EAxBF,OAyBchH,mBAAS6F,MAzBvB,mBAyBToB,EAzBS,KAyBAC,EAzBA,OA0BkClH,mBAAS+G,GA1B3C,mBA0BT0C,EA1BS,KA0BUC,EA1BV,KA4BhBvJ,qBAAU,WACR,IAAMoM,EC/CuB,SAACtM,EAAW4C,GAC3C,OAAO5C,EAAUK,QAAO,SAACC,GAAD,OAAQA,EAAG,IAAMA,EAAG,GAAGiM,SAAS3J,MD8ChC4J,CAAkBxM,EAAWmM,GAC/CnM,EAAUO,OAAS,GAA8B,IAAzB+L,EAAc/L,QACxC6I,EAAQO,QAAQ9G,EAAKtB,MAEvB8K,EAAgBC,GAChB,IAAM1C,EAAS,eAAQnG,GACjB+H,EAAW,eAAQ/H,GACnBoG,EAAgB,eAAQpG,GACxBgI,EAAe,GAErBa,EACGnJ,KAAI,SAAC7C,GAAD,OAAQA,EAAG,MACfoL,QAFH,uCAEW,WAAO9C,GAAP,SAAAvK,EAAA,sDACPoN,EAAaE,KAAKzK,EAAa0H,IADxB,2CAFX,uDAMAgD,QAAQC,IAAIJ,GAAcK,MAAK,SAAC3L,GAC9BA,EAAKuL,SAAQ,SAAC5B,EAAU3D,GACtB,IAAMuD,EAAe4C,EAAcnG,GAE7B4F,EAAYrC,GAAgBA,EAAa,IAAOzF,EAChD8F,EAAiBD,EAASE,WAC9B,SAAC1J,GAAD,OAAQA,EAAG,KAAOuF,IAAMiB,GAAWhB,ObrEf,iBawElBmE,EAAeH,EAASE,WAC1B,SAAC1J,GAAD,OAAQA,EAAG,KAAOuF,IAAMmB,GAASlB,ObzEb,iBa2EtBmE,EAAeA,GAAgB,EAAIH,EAASvJ,OAAS,EAAI0J,EAEzD,IAAMvH,EAAK,CACToH,EAAS,IADA,mBAENA,EAAS1J,MAAM2J,EAAgBE,EAAe,KAG/CC,EAAkB,KAEtB,GAAIxH,EAAMoF,MAAK,SAACxH,GAAD,OAAQA,EAAG,KAAOkJ,MAK/B,GAAwB,KAJxBU,EAAkBrB,SAChBnG,EAAMoF,MAAK,SAACxH,GAAD,OAAQA,EAAG,KAAOkJ,KAAmB,GAChD,KAEyB,CACzB,IAAMW,EAAazH,EAAMoF,MAAK,SAACxH,GAAD,MAAkB,MAAVA,EAAG,MACzC4J,EAAkBC,EAAaA,EAAW,GAAK,WAExCzH,EAAM,KACfwH,EAAkBxH,EAAM,GAAG,IAG7B,IAAMgD,EAAMqG,IAAa9H,EAAYuH,EAAc5B,EAEnDlE,EAAIhC,MAAJ,eACKgC,EAAIhC,MADT,CAEEvD,KAAMuC,EAAMtC,MAAM,GAAG+C,KAAI,SAAC7C,GAAD,OAAQA,EAAG,QAEtCuJ,EAAiBnG,MAAjB,eACKgC,EAAIhC,OAGTgC,EAAI/B,MAAJ,eACK+B,EAAI/B,MADT,CAEEe,UAAW,CACTC,UAAU,WAAD,OAAaqE,GAAYU,OAGtCG,EAAiBlG,MAAjB,eACKkG,EAAiBlG,MADtB,CAEEe,UAAW,CACTC,UAAW,eAIfe,EAAI9B,OAAJ,sBACK8B,EAAI9B,QADT,CAEE,CACEzD,KAAMuC,EAAMtC,MAAM,GAAG+C,KAAI,SAAC7C,GACxB,MAAc,MAAVA,EAAG,GACDoJ,GAAgBA,EAAa,KAAOzF,EAC/B4E,SAASvI,EAAG,GAAI,IAErBoJ,GAAgBA,EAAa,KAAOzF,EAC/BuG,WAAWlK,EAAG,IAEhBuI,SAASvI,EAAG,GAAI,IAElB,QAETkE,KAAM,OACNiG,cAAc,EACd7J,KAAK,GAAD,OAAK8I,EAAa,GAAlB,YAAwBA,EAAa,OAI7CG,EAAiBjG,OAAjB,sBACKiG,EAAiBjG,QADtB,CAEE,CACEzD,KAAMuC,EAAMtC,MAAM,GAAG+C,KAAI,SAAC7C,GACxB,MAAc,MAAVA,EAAG,GACEqI,GAAWuB,EAAiBrB,SAASvI,EAAG,GAAI,KAC9C,QAETkE,KAAM,OACNiG,cAAc,EACd7J,KAAK,GAAD,OAAK8I,EAAa,GAAlB,YAAwBA,EAAa,UAI/CvE,EAAUyE,GACVwB,EAAYI,GACZjC,EAAiBM,GACjB5E,GAAU,QAEX,CACD6B,EACAE,EACAhH,EACAmM,EACA/C,EACAvG,EAAKtB,KACLiI,EACAtI,IAQF,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CACE4F,UAAWA,EACXC,aAAcA,EACdC,QAASA,EACTC,WAAYA,IAEbjC,GAAY,kBAAC,GAAD,CAAYhF,UAAWoM,EAAcvH,UAAWK,IAE5DF,GAAYoH,EAAatE,MAAK,SAACxH,GAAD,OAAQA,EAAG,KAAO2D,MAC/C,kBAAC,GAAD,CAAYjE,UAAWoM,EAAcvH,UAAWsG,IAEjDnG,GACC,oCACGwE,EADH,gJAGE,kBAAC,GAAD,CACExJ,UAAWoM,EACXvH,UAAWyE,EACXxE,SAAU,CACR6F,MA1BS,SAACxB,GAAY,IACxBvI,EAASuI,EAATvI,KACR6I,EAAqB7I,U,0FE3KlB,IAAM6L,GAAU5K,IAAOC,IAAV,MCuCL4K,OA3Bf,WAAgB,IACN7J,EAAqBF,EAAfD,EAAeC,EAARC,EAAQD,EAE7B,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC8J,GAAD,KACE,kBAAC,IAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAalL,KAAMmB,EAAMnB,MACvB,kBAAC,GAAD,OAEF,kBAAC,EAAD,CAAaA,KAAMqB,EAAIrB,MACrB,kBAAC,GAAD,OAEF,kBAAC,EAAD,CAAaA,KAAMsB,EAAKtB,MACtB,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAUgC,GAAIV,EAAKtB,YCrBXoL,QACW,cAA7BpO,OAAOC,SAASoO,UAEe,UAA7BrO,OAAOC,SAASoO,UAEhBrO,OAAOC,SAASoO,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.11de9af3.chunk.js","sourcesContent":["import { readString } from 'react-papaparse';\n\nexport const fetchStockListFromCsv = async () => {\n  const response = await fetch(\n    `${window.location.origin}/stock/data/stock_list.csv`\n  );\n  const reader = response.body.getReader();\n  const result = await reader.read(); // raw array\n  const decoder = new TextDecoder('utf-8');\n  const csv = decoder.decode(result.value); // the csv text\n  return readString(csv);\n};\n\nexport const fetchStockDataFromCsv = async (stockNumber) => {\n  const response = await fetch(\n    `${window.location.origin}/stock/data/${stockNumber}.csv`\n  );\n  const reader = response.body.getReader();\n  const result = await reader.read(); // raw array\n  const decoder = new TextDecoder('utf-8');\n  const csv = decoder.decode(result.value); // the csv text\n  return readString(csv);\n};\n","import React, { useState, createContext, useEffect } from 'react';\n\nimport { fetchStockListFromCsv, fetchStockDataFromCsv } from 'services/stock';\n\nconst Context = createContext();\n\nconst { Provider, Consumer: StockConsumer } = Context;\nlet STOCK_DATA_LIST = {};\n\nconst StockProvider = ({ children }) => {\n  const [stockList, setStockList] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const { data } = await fetchStockListFromCsv();\n      setStockList(data.slice(1).filter((el) => el.length > 1));\n      STOCK_DATA_LIST = data\n        .slice(1)\n        .filter((el) => el.length > 1)\n        .reduce(\n          (acc, cur) => ({\n            ...acc,\n            [cur[0]]: {\n              code: cur[0],\n              name: cur[1],\n              nation: cur[2],\n              user_id: cur[3],\n              created_at: cur[4],\n              updated_at: cur[5],\n              tag_list: cur[6],\n              data: [],\n            },\n          }),\n          {}\n        );\n    })();\n  }, []);\n\n  const getStockData = async (stockCode) => {\n    if (!stockCode) return [];\n\n    if (\n      STOCK_DATA_LIST[stockCode]?.data &&\n      STOCK_DATA_LIST[stockCode]?.data.length > 0\n    ) {\n      return STOCK_DATA_LIST[stockCode].data;\n    }\n    const { data } = await fetchStockDataFromCsv(stockCode);\n\n    STOCK_DATA_LIST = {\n      ...STOCK_DATA_LIST,\n      [stockCode]: {\n        ...STOCK_DATA_LIST[stockCode],\n        data,\n      },\n    };\n\n    return data;\n  };\n\n  return (\n    <Provider\n      value={{\n        state: {\n          stockList,\n          STOCK_DATA_LIST,\n        },\n        actions: { getStockData },\n      }}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nconst StockContext = Context;\n\nexport { StockProvider, StockConsumer, StockContext };\n","const root = {\n  path: '/stock',\n  url: '/stock',\n  description: 'Main Page',\n};\n\nconst stock = {\n  path: '/stock/code/:code',\n  url: '/stock/code/',\n  description: 'Stock Page',\n};\n\nconst tag = {\n  path: '/stock/tag/:tag',\n  url: '/stock/tag/',\n  description: 'Tag Page',\n};\n\nexport default {\n  root,\n  stock,\n  tag,\n};\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst CommonRoute = ({ children, path, ...rest }) => {\n  return (\n    <Route path={path} {...rest}>\n      {children}\n    </Route>\n  );\n};\n\nexport default CommonRoute;\n","import styled, { css } from 'styled-components';\nimport { Chip, flexColumnCenterX } from 'remember-ui';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n\nexport const StockList = styled.div``;\nexport const StockItem = styled(Link)`\n  display: inline-block;\n  margin: 5px;\n  cursor: pointer;\n  text-decoration: none;\n`;\nexport const StockText = styled(Chip)`\n  ${({ active }) =>\n    active &&\n    css`\n      font-weight: bold;\n    `}\n  &:hover,\n  &:focus {\n    font-weight: bold;\n  }\n`;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport Routes from 'routers/routes';\nimport { StockContext } from 'context/StockContext';\n\nimport { Container, StockList, StockItem, StockText } from './Navbar.styles';\n\nconst NavBar = () => {\n  const { pathname } = useLocation();\n  const { stock, tag, root } = Routes;\n  const [tagList, setTagList] = useState([]);\n\n  const {\n    state: { stockList },\n  } = useContext(StockContext);\n\n  useEffect(() => {\n    const tags = new Set([\n      ...stockList\n        .map((el) => el[6].split(','))\n        .reduce((acc, cur) => acc.concat(cur), [])\n        .filter((el) => el !== '')\n        .map((el) => el.trim()),\n    ]);\n    setTagList([...tags]);\n  }, [stockList]);\n\n  return (\n    <Container>\n      <StockList>\n        <StockItem to={`${root.path}`}>\n          <StockText active={pathname === `${root.path}`}>\n            {`${root.description}`}\n          </StockText>\n        </StockItem>\n        {stockList &&\n          stockList.map((el) => (\n            <StockItem key={el[0]} to={`${stock.url}${el[0]}`}>\n              <StockText active={pathname === `${stock.url}${el[0]}`}>\n                {`${el[1]} (${el[0]})`}\n              </StockText>\n            </StockItem>\n          ))}\n        {tagList &&\n          tagList.map((el) => (\n            <StockItem key={el} to={`${tag.url}${el}`}>\n              <StockText active={pathname === `${tag.url}${el}`}>\n                {`${el}`}\n              </StockText>\n            </StockItem>\n          ))}\n      </StockList>\n    </Container>\n  );\n};\n\nexport default NavBar;\n","export const chartOption = { xAxis: {}, yAxis: {}, series: [] };\nexport const chartStyle = { height: '700px', width: '100%' };\n","export const CalendarFormat = 'YYYY-MM-DD';\nexport const defaultOffset = '1 year';\nexport const OffsetList = [\n  { name: '1 month', value: 1 },\n  { name: '3 month', value: 3 },\n  { name: '6 month', value: 6 },\n  { name: '1 year', value: 12 },\n  { name: '3 year', value: 36 },\n  { name: '5 year', value: 60 },\n];\nexport const chartStartDate = '2015-01-02';\n","export const LOCALE = {\n  US: 'us',\n  KO: 'ko',\n};\n\nexport const CURRENCY = {\n  US: '$',\n  KO: '원',\n};\n","import React, { useEffect, useState } from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nimport { chartStyle } from 'constants/chart';\nimport { CURRENCY } from 'constants/locale';\n\nconst defaultOption = {\n  legend: {\n    // data: stockList.map((el) => `${el[1]}/${el[0]}`),\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      animation: false,\n    },\n    // formatter: function (params) {\n    //   console.log(params);\n    //   return `날짜 : ${params[0].name} <br> 가격 : ${params[0].value} <br> 종목 :  ${params[0].seriesName}`;\n    // },\n  },\n  xAxis: {\n    type: 'category',\n    data: [],\n  },\n  yAxis: {\n    type: 'value',\n    axisLabel: {\n      formatter: `{value} ${CURRENCY.KO}`,\n    },\n    // min: 0,\n    // max: 0,\n    // interval: 0,\n  },\n  series: [],\n};\n\nconst StockChart = ({\n  chartData,\n  onEvents,\n  stockList,\n  style = { ...chartStyle },\n}) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({ ...defaultOption });\n  const [EchartsReact, setEchartsReact] = useState(null);\n\n  useEffect(() => {\n    const _option = {\n      legend: {\n        ...defaultOption.legend,\n        data: stockList.map((el) => `${el[1]}/${el[0]}`),\n      },\n      tooltip: {\n        ...defaultOption.tooltip,\n      },\n      xAxis: {\n        ...defaultOption.xAxis,\n        ...chartData.xAxis,\n      },\n      yAxis: {\n        ...defaultOption.yAxis,\n        ...chartData.yAxis,\n      },\n      series: [...defaultOption.series, ...chartData.series],\n    };\n    setOption(_option);\n\n    const instance = EchartsReact?.getEchartsInstance();\n    if (instance) {\n      instance.clear();\n      instance.setOption(_option);\n    }\n\n    setLoaded(true);\n  }, [EchartsReact, chartData, stockList]);\n\n  return (\n    <>\n      {isLoaded && (\n        <ReactEcharts\n          ref={(e) => {\n            setEchartsReact(e);\n          }}\n          style={style}\n          option={option}\n          onEvents={onEvents}\n        />\n      )}\n    </>\n  );\n};\n\nexport default StockChart;\n","import dayjs from 'dayjs';\n\nimport { CalendarFormat } from 'constants/calendar';\n\nexport const getTodayDate = () => dayjs().format(CalendarFormat);\n\nexport const isWeekend = (date) =>\n  dayjs(date).day() === 0 || dayjs(date).day() === 6;\n\nexport const getDayOfWeek = (date) => dayjs(date).day();\n\nexport const getAdjustDateToWeekDay = (date) => {\n  const day = getDayOfWeek(date);\n  const index = day === 0 ? 2 : 1;\n  return dayjs(date).subtract(index, 'day').format(CalendarFormat);\n};\n","import styled from 'styled-components';\nimport { flexCenterX, Radio, MaskingInput } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexCenterX}\n\n  align-items: center;\n`;\n\nexport const DateInput = styled(MaskingInput)`\n  padding: 0px 10px;\n`;\n\nexport const OffsetContainer = styled.div`\n  ${flexCenterX}\n  padding:20px;\n`;\n\nexport const OffsetDate = styled(Radio)``;\n\nexport const Cursor = styled.div`\n  cursor: pointer;\n`;\n","import React, { useState } from 'react';\nimport dayjs from 'dayjs';\n\nimport {\n  defaultOffset,\n  OffsetList,\n  chartStartDate,\n  CalendarFormat,\n} from 'constants/calendar';\nimport { isWeekend, getAdjustDateToWeekDay, getTodayDate } from 'utils/day';\n\nimport {\n  DateInput,\n  Container,\n  OffsetContainer,\n  OffsetDate,\n  Cursor,\n} from './StockCalendar.styles';\n\nconst StockCalendar = ({ startDate, setStartDate, endDate, setEndDate }) => {\n  const [calendarOffset, setCalendarOffset] = useState(defaultOffset);\n\n  const handleChange = (e) => {\n    const target = e.target.name;\n    const date = e.target.value;\n    if (date.length === 10) {\n      const newDate = new Date(date);\n      const today = new Date();\n      const _chartStartDate = new Date(chartStartDate);\n      if (+newDate >= +_chartStartDate && +newDate <= +today) {\n        target === 'startDate' ? setStartDate(date) : setEndDate(date);\n      }\n    }\n  };\n\n  const handleCalendarOffset = (offset, offsetValue) => {\n    let date = dayjs(endDate, CalendarFormat);\n    date = date.subtract(offsetValue, 'month');\n    setCalendarOffset(offset);\n    if (isWeekend(date)) {\n      date = getAdjustDateToWeekDay(date);\n    }\n    setStartDate(dayjs(date).format(CalendarFormat));\n  };\n\n  const handleDateByOffset = (dir) => {\n    let _endDate = dayjs(endDate, CalendarFormat);\n    let _startDate = dayjs(startDate, CalendarFormat);\n    const offsetValue = OffsetList.find((el) => el.name === calendarOffset)\n      .value;\n    if (dir === 'next') {\n      _endDate = _endDate.add(offsetValue, 'month');\n      _startDate = _startDate.add(offsetValue, 'month');\n      if (dayjs(_endDate).isAfter(getTodayDate())) {\n        alert('오늘 이후의 날짜는 선택할 수 없습니다.');\n        return;\n      }\n    } else if (dir === 'prev') {\n      _endDate = _endDate.subtract(offsetValue, 'month');\n      _startDate = _startDate.subtract(offsetValue, 'month');\n\n      if (dayjs(_startDate).isBefore(chartStartDate)) {\n        alert(`${chartStartDate} 이전의 날짜는 선택할 수 없습니다.`);\n        return;\n      }\n    }\n\n    if (isWeekend(_endDate)) {\n      _endDate = getAdjustDateToWeekDay(_endDate);\n    }\n    if (isWeekend(_startDate)) {\n      _startDate = getAdjustDateToWeekDay(_startDate);\n    }\n    setEndDate(dayjs(_endDate).format(CalendarFormat));\n    setStartDate(dayjs(_startDate).format(CalendarFormat));\n  };\n\n  return (\n    <Container>\n      <Cursor onClick={() => handleDateByOffset('prev')}>{'<'}</Cursor>\n      <DateInput\n        mask={[\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n        ]}\n        type=\"text\"\n        name=\"startDate\"\n        value={startDate}\n        required\n        onChange={handleChange}\n        placeholder=\"8자리 숫자 입력(2015-01-02)\"\n      />\n      ~\n      <DateInput\n        mask={[\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n        ]}\n        type=\"text\"\n        name=\"endDate\"\n        value={endDate}\n        required\n        onChange={handleChange}\n        placeholder=\"8자리 숫자 입력(2015-01-02)\"\n      />\n      <Cursor onClick={() => handleDateByOffset('next')}>{'>'}</Cursor>\n      <OffsetContainer>\n        {OffsetList &&\n          OffsetList.map((el) => (\n            <div key={el.value}>\n              <OffsetDate\n                isChecked={calendarOffset === el.name}\n                onClick={() => handleCalendarOffset(el.name, el.value)}\n              />\n              <span>{el.name}</span>\n            </div>\n          ))}\n      </OffsetContainer>\n    </Container>\n  );\n};\n\nexport default StockCalendar;\n","import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\n\nimport { CalendarFormat } from 'constants/calendar';\nimport { LOCALE, CURRENCY } from 'constants/locale';\nimport { getRoundTwoPrecision } from 'utils/utils';\n\nexport const getPercent = (target, value) => {\n  return getRoundTwoPrecision(\n    ((parseInt(value, 10) - parseInt(target, 10)) / parseInt(target, 10)) * 100\n  );\n};\n\nexport const generateDayBetween = (startDate, endDate) => {\n  let _start = dayjs(startDate).format(CalendarFormat);\n  const _end = dayjs(endDate).format(CalendarFormat);\n  const days = [];\n\n  dayjs.extend(isSameOrBefore);\n  while (dayjs(_start).isSameOrBefore(_end)) {\n    days.push([_start, '0', '0', '0', '0', '0', '0']);\n    _start = dayjs(_start).add(1, 'day').format(CalendarFormat);\n  }\n\n  return days;\n};\n\nexport const getCurrency = (stock) => {\n  const nation = (stock && stock[2]) || '';\n  if (nation === LOCALE.KO) {\n    return CURRENCY.KO;\n  }\n  if (nation === LOCALE.US) {\n    return CURRENCY.US;\n  }\n  return '';\n};\n","export const getRoundTwoPrecision = (number) => Math.round(number * 100) / 100;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useHistory } from 'react-router';\nimport dayjs from 'dayjs';\n\nimport Routes from 'routers/routes';\nimport { chartOption } from 'constants/chart';\nimport { CalendarFormat } from 'constants/calendar';\nimport { LOCALE } from 'constants/locale';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport { getCurrency, getPercent } from 'utils/chart';\nimport { StockContext } from 'context/StockContext';\n\nimport { Container } from './Stock.styles';\n\nconst Stock = () => {\n  const {\n    params: { code: stockCode },\n  } = useRouteMatch();\n  const {\n    state: { stockList },\n    actions: { getStockData },\n  } = useContext(StockContext);\n\n  const history = useHistory();\n  const { root } = Routes;\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionPercent, setOptionPercent] = useState({\n    ...chartOption,\n  });\n\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n  const [percentTargetDate, setPercentTargetDate] = useState(startDate);\n\n  useEffect(() => {\n    const getData = async () => {\n      const currentStock = stockList.find((el) => el[0] === stockCode);\n      if (stockList.length > 0 && !currentStock) history.replace(root.path);\n\n      const stockData = { ...chartOption };\n      const stockDataPercent = { ...chartOption };\n\n      const stockAll = await getStockData(stockCode);\n\n      const startDateIndex = stockAll.findIndex(\n        (el) => el[0] === dayjs(startDate).format(CalendarFormat)\n      );\n\n      let endDateIndex = stockAll.findIndex(\n        (el) => el[0] === dayjs(endDate).format(CalendarFormat)\n      );\n      endDateIndex = endDateIndex <= 0 ? stockAll.length - 1 : endDateIndex;\n      const stock = [\n        stockAll[0],\n        ...stockAll.slice(startDateIndex, endDateIndex + 1),\n      ];\n\n      let targetDateValue = null;\n\n      if (stock.find((el) => el[0] === percentTargetDate)) {\n        targetDateValue = parseInt(\n          stock.find((el) => el[0] === percentTargetDate)[4],\n          10\n        );\n        if (targetDateValue === 0) {\n          const _valueDate = stock.find((el) => el[4] !== '0');\n          targetDateValue = _valueDate ? _valueDate[4] : null;\n        }\n      } else if (stock[1]) {\n        targetDateValue = stock[1][4];\n      }\n\n      const minValue = parseInt(\n        Math.min(\n          ...stock\n            .slice(1)\n            .map((el) => {\n              if (el[4] !== '0') return parseInt(el[4], 10);\n              return null;\n            })\n            .filter((el) => el)\n        ),\n        10\n      );\n\n      const maxValue = parseInt(\n        Math.max(\n          ...stock\n            .slice(1)\n            .map((el) => {\n              if (el[4] !== '0') return parseInt(el[4], 10);\n              return null;\n            })\n            .filter((el) => el)\n        ),\n        10\n      );\n\n      // x축\n      stockData.xAxis = {\n        ...stockData.xAxis,\n        data: stock.slice(1).map((el) => el[0]),\n      };\n      stockDataPercent.xAxis = {\n        ...stockData.xAxis,\n      };\n\n      // y축\n      stockData.yAxis = {\n        ...stockData.yAxis,\n        min: minValue,\n        max: maxValue,\n        axisLabel: {\n          formatter: `{value} ${getCurrency(currentStock)}`,\n        },\n      };\n      stockDataPercent.yAxis = {\n        ...stockDataPercent.yAxis,\n        axisLabel: {\n          formatter: '{value} %',\n        },\n      };\n\n      // series Data\n      stockData.series = [\n        ...stockData.series,\n        {\n          data: stock.slice(1).map((el) => {\n            if (el[4] !== '0') {\n              if (currentStock && currentStock[2] === LOCALE.KO) {\n                return parseInt(el[4], 10);\n              }\n              if (currentStock && currentStock[2] === LOCALE.US) {\n                return parseFloat(el[4]);\n              }\n              return parseInt(el[4], 10);\n            }\n            return null;\n          }),\n          type: 'line',\n          connectNulls: true,\n          name: `${currentStock ? currentStock[1] : ''}/${stockCode}`,\n        },\n      ];\n\n      stockDataPercent.series = [\n        ...stockDataPercent.series,\n        {\n          data: stock.slice(1).map((el) => {\n            if (el[4] !== '0')\n              return getPercent(targetDateValue, parseInt(el[4], 10));\n            return null;\n          }),\n          type: 'line',\n          connectNulls: true,\n          name: `${currentStock ? currentStock[1] : ''}/${stockCode}`,\n        },\n      ];\n\n      setOption(stockData);\n      setOptionPercent(stockDataPercent);\n      setLoaded(true);\n    };\n\n    getData();\n  }, [\n    endDate,\n    getStockData,\n    history,\n    percentTargetDate,\n    root.path,\n    startDate,\n    stockCode,\n    stockList,\n  ]);\n\n  const onChartClick = (params) => {\n    const { name } = params;\n    setPercentTargetDate(name);\n  };\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && (\n        <>\n          종가 그래프( Y축 : 기간 내 최저가 ~ 최고가)\n          <StockChart\n            stockList={stockList}\n            chartData={option}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n      {isLoaded && (\n        <>\n          {percentTargetDate}일( 기준일 = 0% ) 대비 상승/하락 률 ( 그래프 클릭\n          날짜 변경 )\n          <StockChart\n            stockList={stockList}\n            chartData={optionPercent}\n            onEvents={{\n              click: onChartClick,\n            }}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n\n      {/* {isLoaded && <StockTable stockCode={stockCode} startDate={startDate} />} */}\n    </Container>\n  );\n};\n\nexport default Stock;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState, useContext } from 'react';\nimport dayjs from 'dayjs';\n\nimport { chartOption } from 'constants/chart';\nimport { CalendarFormat } from 'constants/calendar';\nimport { LOCALE } from 'constants/locale';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport { getCurrency } from 'utils/chart';\nimport { StockContext } from 'context/StockContext';\n\nimport { Container } from './Dashboard.styles';\n\nconst Dashboard = () => {\n  const {\n    state: { stockList },\n    actions: { getStockData },\n  } = useContext(StockContext);\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionHigh, setOptionHigh] = useState({\n    ...chartOption,\n  });\n  const [optionExtraHigh, setOptionExtraHigh] = useState({\n    ...chartOption,\n  });\n  const [optionLow, setOptionLow] = useState({\n    ...chartOption,\n  });\n  const [optionUs, setOptionUs] = useState({\n    ...chartOption,\n  });\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n\n  useEffect(() => {\n    const stockData = { ...chartOption };\n    const stockDataHigh = { ...chartOption };\n    const stockDataExtraHigh = { ...chartOption };\n    const stockDataLow = { ...chartOption };\n    const stockDataUs = { ...chartOption };\n    const fetchAllData = [];\n\n    stockList\n      .map((el) => el[0])\n      .forEach(async (number) => {\n        fetchAllData.push(getStockData(number));\n      });\n\n    Promise.all(fetchAllData).then((data) => {\n      data.forEach((stockAll, index) => {\n        const currentStock = stockList[index];\n        const currency = (currentStock && currentStock[2]) || LOCALE.KO;\n        const startDateIndex = stockAll.findIndex(\n          (el) => el[0] === dayjs(startDate).format(CalendarFormat)\n        );\n\n        let endDateIndex = stockAll.findIndex(\n          (el) => el[0] === dayjs(endDate).format(CalendarFormat)\n        );\n        endDateIndex = endDateIndex <= 0 ? stockAll.length - 1 : endDateIndex;\n\n        const stock = [\n          stockAll[0],\n          ...stockAll.slice(startDateIndex, endDateIndex + 1),\n        ];\n\n        const priceList = stock\n          .slice(1)\n          .map((el) => {\n            if (el[4] !== '0') return parseInt(el[4], 10);\n            return null;\n          })\n          .filter((el) => el);\n\n        const mean = (Math.min(...priceList) + Math.max(...priceList)) / 2;\n        const ref =\n          // eslint-disable-next-line no-nested-ternary\n          currency === LOCALE.US\n            ? stockDataUs\n            : // eslint-disable-next-line no-nested-ternary\n            mean > 400000\n            ? stockDataExtraHigh\n            : // eslint-disable-next-line no-nested-ternary\n            mean > 200000\n            ? stockDataHigh\n            : mean < 50000\n            ? stockDataLow\n            : stockData;\n\n        ref.xAxis = {\n          ...ref.xAxis,\n          data: stock.slice(1).map((el) => el[0]),\n        };\n\n        ref.yAxis = {\n          ...ref.yAxis,\n          axisLabel: {\n            formatter: `{value} ${getCurrency(currentStock)}`,\n          },\n        };\n\n        ref.series = [\n          ...ref.series,\n          {\n            data: stock.slice(1).map((el) => {\n              if (el[4] !== '0') {\n                if (currentStock && currentStock[2] === LOCALE.KO) {\n                  return parseInt(el[4], 10);\n                }\n                if (currentStock && currentStock[2] === LOCALE.US) {\n                  return parseFloat(el[4]);\n                }\n                return parseInt(el[4], 10);\n              }\n              return null;\n            }),\n            type: 'line',\n            connectNulls: true,\n            name: `${currentStock[1]}/${currentStock[0]}`,\n          },\n        ];\n      });\n      setOption(stockData);\n      setOptionHigh(stockDataHigh);\n      setOptionExtraHigh(stockDataExtraHigh);\n      setOptionLow(stockDataLow);\n      setOptionUs(stockDataUs);\n      setLoaded(true);\n    });\n  }, [startDate, endDate, stockList, getStockData]);\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && (\n        <StockChart stockList={stockList} chartData={optionExtraHigh} />\n      )}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionHigh} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={option} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionLow} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionUs} />}\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useHistory } from 'react-router';\nimport dayjs from 'dayjs';\n\nimport Routes from 'routers/routes';\nimport { chartOption } from 'constants/chart';\nimport { CalendarFormat } from 'constants/calendar';\nimport { LOCALE } from 'constants/locale';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport { getCurrency, getPercent } from 'utils/chart';\nimport { getStockListByTag } from 'utils/tag';\nimport { StockContext } from 'context/StockContext';\n\nimport { Container } from './Tag.styles';\n\nconst Tag = () => {\n  const {\n    params: { tag: tagName },\n  } = useRouteMatch();\n  const {\n    state: { stockList },\n    actions: { getStockData },\n  } = useContext(StockContext);\n\n  const history = useHistory();\n  const { root } = Routes;\n\n  const [tagStockList, setTagStockList] = useState([]);\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionUs, setOptionUs] = useState({\n    ...chartOption,\n  });\n  const [optionPercent, setOptionPercent] = useState({\n    ...chartOption,\n  });\n\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n  const [percentTargetDate, setPercentTargetDate] = useState(startDate);\n\n  useEffect(() => {\n    const _tagStockList = getStockListByTag(stockList, tagName);\n    if (stockList.length > 0 && _tagStockList.length === 0)\n      history.replace(root.path);\n\n    setTagStockList(_tagStockList);\n    const stockData = { ...chartOption };\n    const stockDataUs = { ...chartOption };\n    const stockDataPercent = { ...chartOption };\n    const fetchAllData = [];\n\n    _tagStockList\n      .map((el) => el[0])\n      .forEach(async (number) => {\n        fetchAllData.push(getStockData(number));\n      });\n\n    Promise.all(fetchAllData).then((data) => {\n      data.forEach((stockAll, index) => {\n        const currentStock = _tagStockList[index];\n\n        const currency = (currentStock && currentStock[2]) || LOCALE.KO;\n        const startDateIndex = stockAll.findIndex(\n          (el) => el[0] === dayjs(startDate).format(CalendarFormat)\n        );\n\n        let endDateIndex = stockAll.findIndex(\n          (el) => el[0] === dayjs(endDate).format(CalendarFormat)\n        );\n        endDateIndex = endDateIndex <= 0 ? stockAll.length - 1 : endDateIndex;\n\n        const stock = [\n          stockAll[0],\n          ...stockAll.slice(startDateIndex, endDateIndex + 1),\n        ];\n\n        let targetDateValue = null;\n\n        if (stock.find((el) => el[0] === percentTargetDate)) {\n          targetDateValue = parseInt(\n            stock.find((el) => el[0] === percentTargetDate)[4],\n            10\n          );\n          if (targetDateValue === 0) {\n            const _valueDate = stock.find((el) => el[4] !== '0');\n            targetDateValue = _valueDate ? _valueDate[4] : null;\n          }\n        } else if (stock[1]) {\n          targetDateValue = stock[1][4];\n        }\n\n        const ref = currency === LOCALE.US ? stockDataUs : stockData;\n\n        ref.xAxis = {\n          ...ref.xAxis,\n          data: stock.slice(1).map((el) => el[0]),\n        };\n        stockDataPercent.xAxis = {\n          ...ref.xAxis,\n        };\n\n        ref.yAxis = {\n          ...ref.yAxis,\n          axisLabel: {\n            formatter: `{value} ${getCurrency(currentStock)}`,\n          },\n        };\n        stockDataPercent.yAxis = {\n          ...stockDataPercent.yAxis,\n          axisLabel: {\n            formatter: '{value} %',\n          },\n        };\n\n        ref.series = [\n          ...ref.series,\n          {\n            data: stock.slice(1).map((el) => {\n              if (el[4] !== '0') {\n                if (currentStock && currentStock[2] === LOCALE.KO) {\n                  return parseInt(el[4], 10);\n                }\n                if (currentStock && currentStock[2] === LOCALE.US) {\n                  return parseFloat(el[4]);\n                }\n                return parseInt(el[4], 10);\n              }\n              return null;\n            }),\n            type: 'line',\n            connectNulls: true,\n            name: `${currentStock[1]}/${currentStock[0]}`,\n          },\n        ];\n\n        stockDataPercent.series = [\n          ...stockDataPercent.series,\n          {\n            data: stock.slice(1).map((el) => {\n              if (el[4] !== '0')\n                return getPercent(targetDateValue, parseInt(el[4], 10));\n              return null;\n            }),\n            type: 'line',\n            connectNulls: true,\n            name: `${currentStock[1]}/${currentStock[0]}`,\n          },\n        ];\n      });\n      setOption(stockData);\n      setOptionUs(stockDataUs);\n      setOptionPercent(stockDataPercent);\n      setLoaded(true);\n    });\n  }, [\n    startDate,\n    endDate,\n    stockList,\n    tagName,\n    history,\n    root.path,\n    percentTargetDate,\n    getStockData,\n  ]);\n\n  const onChartClick = (params) => {\n    const { name } = params;\n    setPercentTargetDate(name);\n  };\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && <StockChart stockList={tagStockList} chartData={option} />}\n\n      {isLoaded && tagStockList.find((el) => el[2] === LOCALE.US) && (\n        <StockChart stockList={tagStockList} chartData={optionUs} />\n      )}\n      {isLoaded && (\n        <>\n          {percentTargetDate}일( 기준일 = 0% ) 대비 상승/하락 률 ( 그래프 클릭\n          날짜 변경 )\n          <StockChart\n            stockList={tagStockList}\n            chartData={optionPercent}\n            onEvents={{\n              click: onChartClick,\n            }}\n          />\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Tag;\n","export const getStockListByTag = (stockList, tag) => {\n  return stockList.filter((el) => el[6] && el[6].includes(tag));\n};\n","import styled from 'styled-components';\n\nexport const AppBody = styled.div`\n  height: 100%;\n`;\n","import React from 'react';\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom';\nimport { GlobalTheme } from 'remember-ui';\n\nimport { StockProvider } from 'context/StockContext';\nimport Routes from 'routers/routes';\nimport CommonRoute from 'routers/CommonRoute';\nimport NavBar from 'components/NavBar/NavBar';\nimport Stock from 'pages/Stock/Stock';\nimport Dashboard from 'pages/Dashboard/Dashboard';\nimport Tag from 'pages/Tag/Tag';\n\nimport { AppBody } from './App.styles';\n\nfunction App() {\n  const { root, stock, tag } = Routes;\n\n  return (\n    <StockProvider>\n      <BrowserRouter>\n        <AppBody>\n          <GlobalTheme />\n          <NavBar />\n          <Switch>\n            <CommonRoute path={stock.path}>\n              <Stock />\n            </CommonRoute>\n            <CommonRoute path={tag.path}>\n              <Tag />\n            </CommonRoute>\n            <CommonRoute path={root.path}>\n              <Dashboard />\n            </CommonRoute>\n            <Redirect to={root.path} />\n          </Switch>\n        </AppBody>\n      </BrowserRouter>\n    </StockProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}