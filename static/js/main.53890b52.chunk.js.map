{"version":3,"sources":["routers/routes.js","routers/CommonRoute.js","components/NavBar/Navbar.styles.js","components/NavBar/NavBar.js","constants/chart.js","constants/calendar.js","constants/locale.js","services/stock.js","components/StockChart/StockChart.js","utils/day.js","components/StockCalendar/StockCalendar.styles.js","components/StockCalendar/StockCalendar.js","utils/chart.js","utils/utils.js","pages/Stock/Stock.styles.js","pages/Stock/Stock.js","pages/Dashboard/Dashboard.styles.js","pages/Dashboard/Dashboard.js","pages/Tag/Tag.styles.js","pages/Tag/Tag.js","utils/tag.js","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["path","url","description","CommonRoute","children","rest","Container","styled","div","flexColumnCenterX","StockList","StockItem","Link","StockText","Chip","active","css","NavBar","stockList","pathname","useLocation","stock","Routes","tag","root","useState","tagList","setTagList","useEffect","tags","Set","map","el","split","reduce","acc","cur","concat","filter","trim","to","key","chartOption","xAxis","yAxis","series","chartStyle","height","width","OffsetList","name","value","LOCALE","CURRENCY","fetchStockListFromCsv","a","fetch","window","location","origin","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","readString","fetchStockDataFromCsv","stockNumber","defaultOption","legend","tooltip","trigger","axisPointer","type","animation","data","axisLabel","formatter","StockChart","chartData","onEvents","style","isLoaded","setLoaded","option","setOption","getTodayDate","dayjs","format","isWeekend","date","day","getAdjustDateToWeekDay","index","getDayOfWeek","subtract","flexCenterX","DateInput","MaskingInput","OffsetContainer","OffsetDate","Radio","Cursor","StockCalendar","startDate","setStartDate","endDate","setEndDate","calendarOffset","setCalendarOffset","handleChange","e","target","length","newDate","Date","today","handleDateByOffset","dir","_endDate","_startDate","offsetValue","find","add","isAfter","alert","isBefore","onClick","mask","required","onChange","placeholder","isChecked","offset","handleCalendarOffset","getPercent","number","parseInt","Math","round","getCurrency","nation","Stock","stockCode","useRouteMatch","params","code","history","useHistory","optionPercent","setOptionPercent","percentTargetDate","setPercentTargetDate","currentStock","replace","stockData","stockDataPercent","stockAll","startDateIndex","findIndex","endDateIndex","slice","targetDateValue","minValue","min","maxValue","max","parseFloat","connectNulls","getData","click","Dashboard","optionHigh","setOptionHigh","optionExtraHigh","setOptionExtraHigh","optionLow","setOptionLow","optionUs","setOptionUs","stockDataHigh","stockDataExtraHigh","stockDataLow","stockDataUs","fetchAllData","forEach","push","Promise","all","then","currency","i","priceList","mean","ref","Tag","tagName","tagStockList","setTagStockList","_tagStockList","includes","getStockListByTag","AppBody","App","setStockList","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53890b52.chunk.js","sourcesContent":["const root = {\n  path: '/stock',\n  url: '/stock',\n  description: 'Main Page',\n};\n\nconst stock = {\n  path: '/stock/code/:code',\n  url: '/stock/code/',\n  description: 'Stock Page',\n};\n\nconst tag = {\n  path: '/stock/tag/:tag',\n  url: '/stock/tag/',\n  description: 'Tag Page',\n};\n\nexport default {\n  root,\n  stock,\n  tag,\n};\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst CommonRoute = ({ children, path, ...rest }) => {\n  return (\n    <Route path={path} {...rest}>\n      {children}\n    </Route>\n  );\n};\n\nexport default CommonRoute;\n","import styled, { css } from 'styled-components';\nimport { Chip, flexColumnCenterX } from 'remember-ui';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n\nexport const StockList = styled.div``;\nexport const StockItem = styled(Link)`\n  display: inline-block;\n  margin: 5px;\n  cursor: pointer;\n  text-decoration: none;\n`;\nexport const StockText = styled(Chip)`\n  ${({ active }) =>\n    active &&\n    css`\n      font-weight: bold;\n    `}\n  &:hover,\n  &:focus {\n    font-weight: bold;\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport Routes from 'routers/routes';\n\nimport { Container, StockList, StockItem, StockText } from './Navbar.styles';\n\nconst NavBar = ({ stockList }) => {\n  const { pathname } = useLocation();\n  const { stock, tag, root } = Routes;\n  const [tagList, setTagList] = useState([]);\n\n  useEffect(() => {\n    const tags = new Set([\n      ...stockList\n        .map((el) => el[6].split(','))\n        .reduce((acc, cur) => acc.concat(cur), [])\n        .filter((el) => el !== '')\n        .map((el) => el.trim()),\n    ]);\n    setTagList([...tags]);\n  }, [stockList]);\n\n  return (\n    <Container>\n      <StockList>\n        <StockItem to={`${root.path}`}>\n          <StockText active={pathname === `${root.path}`}>\n            {`${root.description}`}\n          </StockText>\n        </StockItem>\n        {stockList &&\n          stockList.map((el) => (\n            <StockItem key={el[0]} to={`${stock.url}${el[0]}`}>\n              <StockText active={pathname === `${stock.url}${el[0]}`}>\n                {`${el[1]} (${el[0]})`}\n              </StockText>\n            </StockItem>\n          ))}\n        {tagList &&\n          tagList.map((el) => (\n            <StockItem key={el} to={`${tag.url}${el}`}>\n              <StockText active={pathname === `${tag.url}${el}`}>\n                {`${el}`}\n              </StockText>\n            </StockItem>\n          ))}\n      </StockList>\n    </Container>\n  );\n};\n\nexport default NavBar;\n","export const chartOption = { xAxis: {}, yAxis: {}, series: [] };\nexport const chartStyle = { height: '700px', width: '100%' };\n","export const CalendarFormat = 'YYYY-MM-DD';\nexport const defaultOffset = '1 year';\nexport const OffsetList = [\n  { name: '1 month', value: 1 },\n  { name: '3 month', value: 3 },\n  { name: '6 month', value: 6 },\n  { name: '1 year', value: 12 },\n  { name: '3 year', value: 36 },\n  { name: '5 year', value: 60 },\n];\nexport const chartStartDate = '2015-01-02';\n","export const LOCALE = {\n  US: 'us',\n  KO: 'ko',\n};\n\nexport const CURRENCY = {\n  US: '$',\n  KO: '원',\n};\n","import { readString } from 'react-papaparse';\n\nexport const fetchStockListFromCsv = async () => {\n  const response = await fetch(\n    `${window.location.origin}/stock/data/stock_list.csv`\n  );\n  const reader = response.body.getReader();\n  const result = await reader.read(); // raw array\n  const decoder = new TextDecoder('utf-8');\n  const csv = decoder.decode(result.value); // the csv text\n  return readString(csv);\n};\n\nexport const fetchStockDataFromCsv = async (stockNumber) => {\n  const response = await fetch(\n    `${window.location.origin}/stock/data/${stockNumber}.csv`\n  );\n  const reader = response.body.getReader();\n  const result = await reader.read(); // raw array\n  const decoder = new TextDecoder('utf-8');\n  const csv = decoder.decode(result.value); // the csv text\n  return readString(csv);\n};\n","import React, { useEffect, useState } from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nimport { chartStyle } from 'constants/chart';\nimport { CURRENCY } from 'constants/locale';\n\nconst defaultOption = {\n  legend: {\n    // data: stockList.map((el) => `${el[1]}/${el[0]}`),\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      animation: false,\n    },\n    // formatter: function (params) {\n    //   console.log(params);\n    //   return `날짜 : ${params[0].name} <br> 가격 : ${params[0].value} <br> 종목 :  ${params[0].seriesName}`;\n    // },\n  },\n  xAxis: {\n    type: 'category',\n    data: [],\n  },\n  yAxis: {\n    type: 'value',\n    axisLabel: {\n      formatter: `{value} ${CURRENCY.KO}`,\n    },\n    // min: 0,\n    // max: 0,\n    // interval: 0,\n  },\n  series: [],\n};\n\nconst StockChart = ({\n  chartData,\n  onEvents,\n  stockList,\n  style = { ...chartStyle },\n}) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({ ...defaultOption });\n\n  useEffect(() => {\n    setOption({\n      legend: {\n        ...defaultOption.legend,\n        data: stockList.map((el) => `${el[1]}/${el[0]}`),\n      },\n      tooltip: {\n        ...defaultOption.tooltip,\n      },\n      xAxis: {\n        ...defaultOption.xAxis,\n        ...chartData.xAxis,\n      },\n      yAxis: {\n        ...defaultOption.yAxis,\n        ...chartData.yAxis,\n      },\n      series: [...defaultOption.series, ...chartData.series],\n    });\n    setLoaded(true);\n  }, [chartData, stockList]);\n\n  return (\n    <>\n      {isLoaded && (\n        <ReactEcharts style={style} option={option} onEvents={onEvents} />\n      )}\n    </>\n  );\n};\n\nexport default StockChart;\n","import dayjs from 'dayjs';\n\nimport { CalendarFormat } from 'constants/calendar';\n\nexport const getTodayDate = () => dayjs().format(CalendarFormat);\n\nexport const isWeekend = (date) =>\n  dayjs(date).day() === 0 || dayjs(date).day() === 6;\n\nexport const getDayOfWeek = (date) => dayjs(date).day();\n\nexport const getAdjustDateToWeekDay = (date) => {\n  const day = getDayOfWeek(date);\n  const index = day === 0 ? 2 : 1;\n  return dayjs(date).subtract(index, 'day').format(CalendarFormat);\n};\n","import styled from 'styled-components';\nimport { flexCenterX, Radio, MaskingInput } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexCenterX}\n\n  align-items: center;\n`;\n\nexport const DateInput = styled(MaskingInput)`\n  padding: 0px 10px;\n`;\n\nexport const OffsetContainer = styled.div`\n  ${flexCenterX}\n  padding:20px;\n`;\n\nexport const OffsetDate = styled(Radio)``;\n\nexport const Cursor = styled.div`\n  cursor: pointer;\n`;\n","import React, { useState } from 'react';\nimport dayjs from 'dayjs';\n\nimport {\n  defaultOffset,\n  OffsetList,\n  chartStartDate,\n  CalendarFormat,\n} from 'constants/calendar';\nimport { isWeekend, getAdjustDateToWeekDay, getTodayDate } from 'utils/day';\n\nimport {\n  DateInput,\n  Container,\n  OffsetContainer,\n  OffsetDate,\n  Cursor,\n} from './StockCalendar.styles';\n\nconst StockCalendar = ({ startDate, setStartDate, endDate, setEndDate }) => {\n  const [calendarOffset, setCalendarOffset] = useState(defaultOffset);\n\n  const handleChange = (e) => {\n    const target = e.target.name;\n    const date = e.target.value;\n    if (date.length === 10) {\n      const newDate = new Date(date);\n      const today = new Date();\n      const _chartStartDate = new Date(chartStartDate);\n      if (+newDate >= +_chartStartDate && +newDate <= +today) {\n        target === 'startDate' ? setStartDate(date) : setEndDate(date);\n      }\n    }\n  };\n\n  const handleCalendarOffset = (offset, offsetValue) => {\n    let date = dayjs(endDate, CalendarFormat);\n    date = date.subtract(offsetValue, 'month');\n    setCalendarOffset(offset);\n    if (isWeekend(date)) {\n      date = getAdjustDateToWeekDay(date);\n    }\n    setStartDate(dayjs(date).format(CalendarFormat));\n  };\n\n  const handleDateByOffset = (dir) => {\n    let _endDate = dayjs(endDate, CalendarFormat);\n    let _startDate = dayjs(startDate, CalendarFormat);\n    const offsetValue = OffsetList.find((el) => el.name === calendarOffset)\n      .value;\n    if (dir === 'next') {\n      _endDate = _endDate.add(offsetValue, 'month');\n      _startDate = _startDate.add(offsetValue, 'month');\n      if (dayjs(_endDate).isAfter(getTodayDate())) {\n        alert('오늘 이후의 날짜는 선택할 수 없습니다.');\n        return;\n      }\n    } else if (dir === 'prev') {\n      _endDate = _endDate.subtract(offsetValue, 'month');\n      _startDate = _startDate.subtract(offsetValue, 'month');\n\n      if (dayjs(_startDate).isBefore(chartStartDate)) {\n        alert(`${chartStartDate} 이전의 날짜는 선택할 수 없습니다.`);\n        return;\n      }\n    }\n\n    if (isWeekend(_endDate)) {\n      _endDate = getAdjustDateToWeekDay(_endDate);\n    }\n    if (isWeekend(_startDate)) {\n      _startDate = getAdjustDateToWeekDay(_startDate);\n    }\n    setEndDate(dayjs(_endDate).format(CalendarFormat));\n    setStartDate(dayjs(_startDate).format(CalendarFormat));\n  };\n\n  return (\n    <Container>\n      <Cursor onClick={() => handleDateByOffset('prev')}>{'<'}</Cursor>\n      <DateInput\n        mask={[\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n        ]}\n        type=\"text\"\n        name=\"startDate\"\n        value={startDate}\n        required\n        onChange={handleChange}\n        placeholder=\"8자리 숫자 입력(2015-01-02)\"\n      />\n      ~\n      <DateInput\n        mask={[\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n        ]}\n        type=\"text\"\n        name=\"endDate\"\n        value={endDate}\n        required\n        onChange={handleChange}\n        placeholder=\"8자리 숫자 입력(2015-01-02)\"\n      />\n      <Cursor onClick={() => handleDateByOffset('next')}>{'>'}</Cursor>\n      <OffsetContainer>\n        {OffsetList &&\n          OffsetList.map((el) => (\n            <div key={el.value}>\n              <OffsetDate\n                isChecked={calendarOffset === el.name}\n                onClick={() => handleCalendarOffset(el.name, el.value)}\n              />\n              <span>{el.name}</span>\n            </div>\n          ))}\n      </OffsetContainer>\n    </Container>\n  );\n};\n\nexport default StockCalendar;\n","import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\n\nimport { CalendarFormat } from 'constants/calendar';\nimport { LOCALE, CURRENCY } from 'constants/locale';\nimport { getRoundTwoPrecision } from 'utils/utils';\n\nexport const getPercent = (target, value) => {\n  return getRoundTwoPrecision(\n    ((parseInt(value, 10) - parseInt(target, 10)) / parseInt(target, 10)) * 100\n  );\n};\n\nexport const generateDayBetween = (startDate, endDate) => {\n  let _start = dayjs(startDate).format(CalendarFormat);\n  const _end = dayjs(endDate).format(CalendarFormat);\n  const days = [];\n\n  dayjs.extend(isSameOrBefore);\n  while (dayjs(_start).isSameOrBefore(_end)) {\n    days.push([_start, '0', '0', '0', '0', '0', '0']);\n    _start = dayjs(_start).add(1, 'day').format(CalendarFormat);\n  }\n\n  return days;\n};\n\nexport const getCurrency = (stock) => {\n  const nation = (stock && stock[2]) || '';\n  if (nation === LOCALE.KO) {\n    return CURRENCY.KO;\n  }\n  if (nation === LOCALE.US) {\n    return CURRENCY.US;\n  }\n  return '';\n};\n","export const getRoundTwoPrecision = (number) => Math.round(number * 100) / 100;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useHistory } from 'react-router';\nimport dayjs from 'dayjs';\n\nimport Routes from 'routers/routes';\nimport { chartOption } from 'constants/chart';\nimport { CalendarFormat } from 'constants/calendar';\nimport { LOCALE } from 'constants/locale';\nimport { fetchStockDataFromCsv } from 'services/stock';\nimport StockChart from 'components/StockChart/StockChart';\n// import StockTable from 'components/StockTable/StockTable';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport { getCurrency, getPercent } from 'utils/chart';\n\nimport { Container } from './Stock.styles';\n\nconst Stock = ({ stockList }) => {\n  const {\n    params: { code: stockCode },\n  } = useRouteMatch();\n\n  const history = useHistory();\n  const { root } = Routes;\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionPercent, setOptionPercent] = useState({\n    ...chartOption,\n  });\n\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n  const [percentTargetDate, setPercentTargetDate] = useState(startDate);\n\n  useEffect(() => {\n    const getData = async () => {\n      const currentStock = stockList.find((el) => el[0] === stockCode);\n      if (!currentStock) history.replace(root.path);\n\n      const stockData = { ...chartOption };\n      const stockDataPercent = { ...chartOption };\n\n      const { data: stockAll } = await fetchStockDataFromCsv(stockCode);\n\n      const startDateIndex = stockAll.findIndex(\n        (el) => el[0] === dayjs(startDate).format(CalendarFormat)\n      );\n\n      let endDateIndex;\n      let index = 0;\n      while (\n        !endDateIndex ||\n        // eslint-disable-next-line no-plusplus\n        (endDateIndex < 0 && index++ <= stockAll.length)\n      ) {\n        endDateIndex = stockAll.findIndex(\n          // eslint-disable-next-line no-loop-func\n          (el) =>\n            el[0] ===\n            dayjs(endDate).subtract(index, 'day').format(CalendarFormat)\n        );\n      }\n\n      const stock = [\n        stockAll[0],\n        ...stockAll.slice(startDateIndex, endDateIndex + 1),\n      ];\n\n      // eslint-disable-next-line no-nested-ternary\n      const targetDateValue = stock.find((el) => el[0] === percentTargetDate)\n        ? parseInt(stock.find((el) => el[0] === percentTargetDate)[4], 10)\n        : stock[1]\n        ? stock[1][4]\n        : null;\n\n      const minValue = parseInt(\n        Math.min(\n          ...stock\n            .slice(1)\n            .map((el) => {\n              if (el[4] !== '0') return parseInt(el[4], 10);\n              return null;\n            })\n            .filter((el) => el)\n        ),\n        10\n      );\n\n      const maxValue = parseInt(\n        Math.max(\n          ...stock\n            .slice(1)\n            .map((el) => {\n              if (el[4] !== '0') return parseInt(el[4], 10);\n              return null;\n            })\n            .filter((el) => el)\n        ),\n        10\n      );\n\n      // x축\n      stockData.xAxis = {\n        ...stockData.xAxis,\n        data: stock.slice(1).map((el) => el[0]),\n      };\n      stockDataPercent.xAxis = {\n        ...stockData.xAxis,\n      };\n\n      // y축\n      stockData.yAxis = {\n        ...stockData.yAxis,\n        min: minValue,\n        max: maxValue,\n        axisLabel: {\n          formatter: `{value} ${getCurrency(currentStock)}`,\n        },\n      };\n      stockDataPercent.yAxis = {\n        ...stockDataPercent.yAxis,\n        axisLabel: {\n          formatter: '{value} %',\n        },\n      };\n\n      // series Data\n      stockData.series = [\n        ...stockData.series,\n        {\n          data: stock.slice(1).map((el) => {\n            if (el[4] !== '0') {\n              if (currentStock && currentStock[2] === LOCALE.KO) {\n                return parseInt(el[4], 10);\n              }\n              if (currentStock && currentStock[2] === LOCALE.US) {\n                return parseFloat(el[4]);\n              }\n              return parseInt(el[4], 10);\n            }\n            return null;\n          }),\n          type: 'line',\n          connectNulls: true,\n          name: `${currentStock ? currentStock[1] : ''}/${stockCode}`,\n        },\n      ];\n\n      stockDataPercent.series = [\n        ...stockDataPercent.series,\n        {\n          data: stock.slice(1).map((el) => {\n            if (el[4] !== '0')\n              return getPercent(targetDateValue, parseInt(el[4], 10));\n            return null;\n          }),\n          type: 'line',\n          connectNulls: true,\n          name: `${currentStock ? currentStock[1] : ''}/${stockCode}`,\n        },\n      ];\n\n      setOption(stockData);\n      setOptionPercent(stockDataPercent);\n      setLoaded(true);\n    };\n\n    getData();\n  }, [\n    endDate,\n    history,\n    percentTargetDate,\n    root.path,\n    startDate,\n    stockCode,\n    stockList,\n  ]);\n\n  const onChartClick = (params) => {\n    const { name } = params;\n    setPercentTargetDate(name);\n  };\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && (\n        <>\n          종가 그래프( Y축 : 기간 내 최저가 ~ 최고가)\n          <StockChart\n            stockList={stockList}\n            chartData={option}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n      {isLoaded && (\n        <>\n          {percentTargetDate}일( 기준일 = 0% ) 대비 상승/하락 률 ( 그래프 클릭\n          날짜 변경 )\n          <StockChart\n            stockList={stockList}\n            chartData={optionPercent}\n            onEvents={{\n              click: onChartClick,\n            }}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n\n      {/* {isLoaded && <StockTable stockCode={stockCode} startDate={startDate} />} */}\n    </Container>\n  );\n};\n\nexport default Stock;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\n\nimport { chartOption } from 'constants/chart';\nimport { CalendarFormat } from 'constants/calendar';\nimport { LOCALE } from 'constants/locale';\nimport { fetchStockDataFromCsv } from 'services/stock';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport { getCurrency } from 'utils/chart';\n\nimport { Container } from './Dashboard.styles';\n\nconst Dashboard = ({ stockList }) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionHigh, setOptionHigh] = useState({\n    ...chartOption,\n  });\n  const [optionExtraHigh, setOptionExtraHigh] = useState({\n    ...chartOption,\n  });\n  const [optionLow, setOptionLow] = useState({\n    ...chartOption,\n  });\n  const [optionUs, setOptionUs] = useState({\n    ...chartOption,\n  });\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n\n  useEffect(() => {\n    const stockData = { ...chartOption };\n    const stockDataHigh = { ...chartOption };\n    const stockDataExtraHigh = { ...chartOption };\n    const stockDataLow = { ...chartOption };\n    const stockDataUs = { ...chartOption };\n    const fetchAllData = [];\n\n    stockList\n      .map((el) => el[0])\n      .forEach(async (number) => {\n        fetchAllData.push(fetchStockDataFromCsv(number));\n      });\n\n    Promise.all(fetchAllData).then((data) => {\n      data.forEach(({ data: stockAll }, index) => {\n        const currentStock = stockList[index];\n        const currency = (currentStock && currentStock[2]) || LOCALE.KO;\n        const startDateIndex = stockAll.findIndex(\n          (el) => el[0] === dayjs(startDate).format(CalendarFormat)\n        );\n\n        let endDateIndex;\n        let i = 0;\n        while (\n          !endDateIndex ||\n          // eslint-disable-next-line no-plusplus\n          (endDateIndex < 0 && i++ <= stockAll.length)\n        ) {\n          endDateIndex = stockAll.findIndex(\n            // eslint-disable-next-line no-loop-func\n            (el) =>\n              el[0] === dayjs(endDate).subtract(i, 'day').format(CalendarFormat)\n          );\n        }\n\n        const stock = [\n          stockAll[0],\n          ...stockAll.slice(startDateIndex, endDateIndex + 1),\n        ];\n\n        const priceList = stock\n          .slice(1)\n          .map((el) => {\n            if (el[4] !== '0') return parseInt(el[4], 10);\n            return null;\n          })\n          .filter((el) => el);\n\n        const mean = (Math.min(...priceList) + Math.max(...priceList)) / 2;\n        const ref =\n          // eslint-disable-next-line no-nested-ternary\n          currency === LOCALE.US\n            ? stockDataUs\n            : // eslint-disable-next-line no-nested-ternary\n            mean > 400000\n            ? stockDataExtraHigh\n            : // eslint-disable-next-line no-nested-ternary\n            mean > 200000\n            ? stockDataHigh\n            : mean < 50000\n            ? stockDataLow\n            : stockData;\n\n        ref.xAxis = {\n          ...ref.xAxis,\n          data: stock.slice(1).map((el) => el[0]),\n        };\n\n        ref.yAxis = {\n          ...ref.yAxis,\n          axisLabel: {\n            formatter: `{value} ${getCurrency(currentStock)}`,\n          },\n        };\n\n        ref.series = [\n          ...ref.series,\n          {\n            data: stock.slice(1).map((el) => {\n              if (el[4] !== '0') {\n                if (currentStock && currentStock[2] === LOCALE.KO) {\n                  return parseInt(el[4], 10);\n                }\n                if (currentStock && currentStock[2] === LOCALE.US) {\n                  return parseFloat(el[4]);\n                }\n                return parseInt(el[4], 10);\n              }\n              return null;\n            }),\n            type: 'line',\n            connectNulls: true,\n            name: `${currentStock[1]}/${currentStock[0]}`,\n          },\n        ];\n      });\n      setOption(stockData);\n      setOptionHigh(stockDataHigh);\n      setOptionExtraHigh(stockDataExtraHigh);\n      setOptionLow(stockDataLow);\n      setOptionUs(stockDataUs);\n      setLoaded(true);\n    });\n  }, [startDate, endDate, stockList]);\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && (\n        <StockChart stockList={stockList} chartData={optionExtraHigh} />\n      )}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionHigh} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={option} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionLow} />}\n      {isLoaded && <StockChart stockList={stockList} chartData={optionUs} />}\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useHistory } from 'react-router';\nimport dayjs from 'dayjs';\n\nimport Routes from 'routers/routes';\nimport { chartOption } from 'constants/chart';\nimport { CalendarFormat } from 'constants/calendar';\nimport { LOCALE } from 'constants/locale';\nimport { fetchStockDataFromCsv } from 'services/stock';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport { getCurrency } from 'utils/chart';\nimport { getStockListByTag } from 'utils/tag';\n\nimport { Container } from './Tag.styles';\n\nconst Tag = ({ stockList }) => {\n  const {\n    params: { tag: tagName },\n  } = useRouteMatch();\n\n  const history = useHistory();\n  const { root } = Routes;\n\n  const [tagStockList, setTagStockList] = useState([]);\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n\n  useEffect(() => {\n    const _tagStockList = getStockListByTag(stockList, tagName);\n    if (stockList.length > 0 && _tagStockList.length === 0)\n      history.replace(root.path);\n\n    setTagStockList(_tagStockList);\n    const stockData = { ...chartOption };\n    const fetchAllData = [];\n\n    _tagStockList\n      .map((el) => el[0])\n      .forEach(async (number) => {\n        fetchAllData.push(fetchStockDataFromCsv(number));\n      });\n\n    Promise.all(fetchAllData).then((data) => {\n      data.forEach(({ data: stockAll }, index) => {\n        const currentStock = _tagStockList[index];\n\n        const startDateIndex = stockAll.findIndex(\n          (el) => el[0] === dayjs(startDate).format(CalendarFormat)\n        );\n        const endDateIndex = stockAll.findIndex(\n          (el) => el[0] === dayjs(endDate).format(CalendarFormat)\n        );\n\n        const stock = [\n          stockAll[0],\n          ...stockAll.slice(startDateIndex, endDateIndex + 1),\n        ];\n\n        stockData.xAxis = {\n          ...stockData.xAxis,\n          data: stock.slice(1).map((el) => el[0]),\n        };\n\n        stockData.yAxis = {\n          ...stockData.yAxis,\n          axisLabel: {\n            formatter: `{value} ${getCurrency(currentStock)}`,\n          },\n        };\n\n        stockData.series = [\n          ...stockData.series,\n          {\n            data: stock.slice(1).map((el) => {\n              if (el[4] !== '0') {\n                if (currentStock && currentStock[2] === LOCALE.KO) {\n                  return parseInt(el[4], 10);\n                }\n                if (currentStock && currentStock[2] === LOCALE.US) {\n                  return parseFloat(el[4]);\n                }\n                return parseInt(el[4], 10);\n              }\n              return null;\n            }),\n            type: 'line',\n            connectNulls: true,\n            name: `${currentStock[1]}/${currentStock[0]}`,\n          },\n        ];\n      });\n      setOption(stockData);\n      setLoaded(true);\n    });\n  }, [startDate, endDate, stockList, tagName, history, root.path]);\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && <StockChart stockList={tagStockList} chartData={option} />}\n    </Container>\n  );\n};\n\nexport default Tag;\n","export const getStockListByTag = (stockList, tag) => {\n  return stockList.filter((el) => el[6] && el[6].includes(tag));\n};\n","import styled from 'styled-components';\n\nexport const AppBody = styled.div`\n  height: 100%;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom';\nimport { GlobalTheme } from 'remember-ui';\n\nimport Routes from 'routers/routes';\nimport CommonRoute from 'routers/CommonRoute';\nimport NavBar from 'components/NavBar/NavBar';\nimport Stock from 'pages/Stock/Stock';\nimport Dashboard from 'pages/Dashboard/Dashboard';\nimport Tag from 'pages/Tag/Tag';\nimport { fetchStockListFromCsv } from 'services/stock';\n\nimport { AppBody } from './App.styles';\n\nfunction App() {\n  const { root, stock, tag } = Routes;\n  const [stockList, setStockList] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const { data } = await fetchStockListFromCsv();\n      setStockList(data.slice(1).filter((el) => el.length > 1));\n    })();\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <AppBody>\n        <GlobalTheme />\n        <NavBar stockList={stockList} />\n        <Switch>\n          <CommonRoute path={stock.path}>\n            <Stock stockList={stockList} />\n          </CommonRoute>\n          <CommonRoute path={tag.path}>\n            <Tag stockList={stockList} />\n          </CommonRoute>\n          <CommonRoute path={root.path}>\n            <Dashboard stockList={stockList} />\n          </CommonRoute>\n          <Redirect to={root.path} />\n        </Switch>\n      </AppBody>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}