{"version":3,"sources":["routers/routes.js","routers/CommonRoute.js","constants/stock.js","components/NavBar/Navbar.styles.js","components/NavBar/NavBar.js","constants/chart.js","services/stock.js","components/StockChart/StockChart.js","components/StockTable/StockTable.js","constants/calendar.js","utils/day.js","components/StockCalendar/StockCalendar.styles.js","components/StockCalendar/StockCalendar.js","utils/utils.js","utils/chart.js","pages/Stock/Stock.styles.js","pages/Stock/Stock.js","pages/Dashboard/Dashboard.styles.js","pages/Dashboard/Dashboard.js","App.styles.js","App.js","serviceWorker.js","index.js"],"names":["path","url","description","CommonRoute","children","rest","stockList","name","code","Container","styled","div","flexColumnCenterX","StockList","StockItem","Link","StockText","Chip","active","css","NavBar","pathname","useLocation","stock","Routes","root","to","map","el","key","chartOption","xAxis","yAxis","series","chartStyle","height","width","fetchStockDataFromCsv","stockNumber","a","fetch","window","location","origin","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","readString","defaultOption","legend","data","tooltip","trigger","axisPointer","type","animation","axisLabel","formatter","StockChart","chartData","onEvents","style","useState","isLoaded","setLoaded","option","setOption","useEffect","StockTable","stockCode","startDate","setStock","axios","get","then","res","XMLParser","parseFromString","JSON","stringify","fetchData","OffsetList","getTodayDate","dayjs","format","isWeekend","date","day","getAdjustDateToWeekDay","index","getDayOfWeek","subtract","flexCenterX","DateInput","MaskingInput","OffsetContainer","OffsetDate","Radio","Cursor","StockCalendar","setStartDate","endDate","setEndDate","calendarOffset","setCalendarOffset","handleChange","e","target","length","newDate","Date","today","handleDateByOffset","dir","_endDate","_startDate","offsetValue","find","add","isAfter","alert","isBefore","onClick","mask","required","onChange","placeholder","isChecked","offset","handleCalendarOffset","getRoundTwoPrecision","number","Math","round","getRelative","maxValue","minValue","parseInt","Stock","useRouteMatch","params","optionPercent","setOptionPercent","optionRelative","setOptionRelative","percentTargetDate","setPercentTargetDate","stockData","stockDataPercent","stockDataRelative","stockAll","startDateIndex","findIndex","endDateIndex","slice","targetDateValue","min","max","getData","click","console","log","Dashboard","optionHigh","setOptionHigh","optionExtraHigh","setOptionExtraHigh","optionLow","setOptionLow","stockDataHigh","stockDataExtraHigh","stockDataLow","fetchAllData","forEach","push","Promise","all","priceList","mean","ref","AppBody","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iRAYe,EAZF,CACXA,KAAM,SACNC,IAAK,SACLC,YAAa,aASA,EAND,CACZF,KAAM,oBACNC,IAAK,eACLC,YAAa,c,SCEAC,EARK,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUJ,EAAoB,EAApBA,KAASK,EAAW,mCACnD,OACE,kBAAC,IAAD,eAAOL,KAAMA,GAAUK,GACpBD,ICNME,EAAY,CACvB,CAAEC,KAAM,2BAAQC,KAAM,UACtB,CAAED,KAAM,6BAAUC,KAAM,UACxB,CAAED,KAAM,QAASC,KAAM,UACvB,CAAED,KAAM,mDAAYC,KAAM,UAC1B,CAAED,KAAM,iBAAQC,KAAM,UACtB,CAAED,KAAM,2BAAQC,KAAM,UACtB,CAAED,KAAM,iCAASC,KAAM,UACvB,CAAED,KAAM,kBAASC,KAAM,UACvB,CAAED,KAAM,qBAAOC,KAAM,UACrB,CAAED,KAAM,qBAAOC,KAAM,UACrB,CAAED,KAAM,6BAAUC,KAAM,UACxB,CAAED,KAAM,iCAASC,KAAM,UACvB,CAAED,KAAM,2BAAQC,KAAM,UACtB,CAAED,KAAM,iCAASC,KAAM,UACvB,CAAED,KAAM,KAAMC,KAAM,UACpB,CAAED,KAAM,2BAAQC,KAAM,UACtB,CAAED,KAAM,6CAAWC,KAAM,UACzB,CAAED,KAAM,iBAAQC,KAAM,UACtB,CAAED,KAAM,qBAAOC,KAAM,UACrB,CAAED,KAAM,mCAAWC,KAAM,UACzB,CAAED,KAAM,eAAMC,KAAM,UACpB,CAAED,KAAM,eAAMC,KAAM,UACpB,CAAED,KAAM,qBAAOC,KAAM,UACrB,CAAED,KAAM,iCAASC,KAAM,UACvB,CAAED,KAAM,mCAAWC,KAAM,UACzB,CAAED,KAAM,6CAAWC,KAAM,UACzB,CAAED,KAAM,iCAASC,KAAM,UACvB,CAAED,KAAM,2BAAQC,KAAM,UACtB,CAAED,KAAM,2BAAQC,KAAM,UACtB,CAAED,KAAM,uCAAUC,KAAM,UACxB,CAAED,KAAM,iCAASC,KAAM,UACvB,CAAED,KAAM,iCAASC,KAAM,UACvB,CAAED,KAAM,uCAAUC,KAAM,UACxB,CAAED,KAAM,QAASC,KAAM,QACvB,CAAED,KAAM,QAASC,KAAM,QACvB,CAAED,KAAM,yBAAWC,KAAM,Q,2jBChCpB,IAAMC,EAAYC,IAAOC,IAAV,IAClBC,KAISC,EAAYH,IAAOC,IAAV,KACTG,EAAYJ,YAAOK,IAAPL,CAAH,KAMTM,EAAYN,YAAOO,IAAPP,CAAH,KAClB,qBAAGQ,QAEHC,YADM,QCeKC,EAzBA,WAAO,IACZC,EAAaC,cAAbD,SACAE,EAAgBC,EAATC,EAASD,EAExB,OACE,kBAACf,EAAD,KACE,kBAACI,EAAD,KACE,kBAACC,EAAD,CAAWY,GAAE,UAAKD,EAAKzB,OACrB,kBAACgB,EAAD,CAAWE,OAAQG,IAAQ,UAAQI,EAAKzB,OAAxC,UACMyB,EAAKvB,eAGZI,GACCA,EAAUqB,KAAI,SAACC,GAAD,OACZ,kBAACd,EAAD,CAAWe,IAAKD,EAAGpB,KAAMkB,GAAE,UAAKH,EAAMtB,KAAX,OAAiB2B,EAAGpB,OAC7C,kBAACQ,EAAD,CAAWE,OAAQG,IAAQ,UAAQE,EAAMtB,KAAd,OAAoB2B,EAAGpB,OAAlD,UACMoB,EAAGrB,KADT,aACkBqB,EAAGpB,KADrB,a,iECvBDsB,EAAc,CAAEC,MAAO,GAAIC,MAAO,GAAIC,OAAQ,IAC9CC,EAAa,CAAEC,OAAQ,QAASC,MAAO,Q,SCCvCC,EAAqB,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sEACZC,MAAM,GAAD,OACvBC,OAAOC,SAASC,OADO,uBACcL,EADd,SADO,cAC7BM,EAD6B,OAI7BC,EAASD,EAASE,KAAKC,YAJM,SAKdF,EAAOG,OALO,cAK7BC,EAL6B,OAM7BC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAPC,kBAQ5BC,YAAWH,IARiB,4CAAH,sD,kBCI5BI,EAAgB,CACpBC,OAAQ,CACNC,KAAMpD,EAAUqB,KAAI,SAACC,GAAD,gBAAWA,EAAGrB,KAAd,YAAsBqB,EAAGpB,UAE/CmD,QAAS,CACPC,QAAS,OACTC,YAAa,CACXC,KAAM,QACNC,WAAW,IAOfhC,MAAO,CACL+B,KAAM,WACNJ,KAAM,IAER1B,MAAO,CACL8B,KAAM,QACNE,UAAW,CACTC,UAAW,mBAMfhC,OAAQ,IAqCKiC,EAlCI,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,UAAWC,EAA0C,EAA1CA,SAA0C,IAAhCC,aAAgC,qBAAnBnC,GAAmB,IAC3CoC,oBAAS,GADkC,mBAClEC,EADkE,KACxDC,EADwD,OAE7CF,mBAAS,eAAKd,IAF+B,mBAElEiB,EAFkE,KAE1DC,EAF0D,KAyBzE,OArBAC,qBAAU,WACRD,EAAU,CACRjB,OAAO,eACFD,EAAcC,QAEnBE,QAAQ,eACHH,EAAcG,SAEnB5B,MAAM,eACDyB,EAAczB,MADd,GAEAoC,EAAUpC,OAEfC,MAAM,eACDwB,EAAcxB,MADd,GAEAmC,EAAUnC,OAEfC,OAAO,GAAD,mBAAMuB,EAAcvB,QAApB,YAA+BkC,EAAUlC,WAEjDuC,GAAU,KACT,CAACL,IAGF,oCACGI,GACC,kBAAC,IAAD,CAAcF,MAAOA,EAAOI,OAAQA,EAAQL,SAAUA,M,oCCrC/CQ,EAxBI,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,UAA2B,KAAhBC,UACLR,mBAAS,KADY,mBACxC/C,EADwC,KACjCwD,EADiC,KAqB/C,OAlBAJ,qBAAU,YACO,uCAAG,sBAAApC,EAAA,sEACVyC,IACHC,IADG,oGAE2FJ,GAC7F,CACE,eAAgB,mCAGnBK,MAAK,SAACC,GACL,IACQ/E,GADI,IAAIgF,KACSC,gBAAgBF,EAAIzB,MAArCtD,SACR2E,EAASO,KAAKC,UAAUnF,OAXZ,2CAAH,qDAcfoF,KACC,CAACX,IAEG,oCAAGtD,GAAS,6BAAMA,KCvBdkE,EAAa,CACxB,CAAElF,KAAM,UAAW+C,MAAO,GAC1B,CAAE/C,KAAM,UAAW+C,MAAO,GAC1B,CAAE/C,KAAM,UAAW+C,MAAO,GAC1B,CAAE/C,KAAM,SAAU+C,MAAO,IACzB,CAAE/C,KAAM,SAAU+C,MAAO,IACzB,CAAE/C,KAAM,SAAU+C,MAAO,KCJdoC,EAAe,kBAAMC,MAAQC,ODJZ,eCMjBC,EAAY,SAACC,GAAD,OACD,IAAtBH,IAAMG,GAAMC,OAAqC,IAAtBJ,IAAMG,GAAMC,OAI5BC,EAAyB,SAACF,GACrC,IACMG,EAAgB,IAJI,SAACH,GAAD,OAAUH,IAAMG,GAAMC,MAGpCG,CAAaJ,GACC,EAAI,EAC9B,OAAOH,IAAMG,GAAMK,SAASF,EAAO,OAAOL,ODdd,e,0cEGvB,IAAMnF,GAAYC,IAAOC,IAAV,KAClByF,KAKSC,GAAY3F,YAAO4F,IAAP5F,CAAH,MAIT6F,GAAkB7F,IAAOC,IAAV,KACxByF,KAISI,GAAa9F,YAAO+F,IAAP/F,CAAH,KAEVgG,GAAShG,IAAOC,IAAV,KCsHJgG,GAvHO,SAAC,GAAsD,IAApD7B,EAAmD,EAAnDA,UAAW8B,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAAiB,EAC9BxC,mBHnBjB,UGkB+C,mBACnEyC,EADmE,KACnDC,EADmD,KAGpEC,EAAe,SAACC,GACpB,IAAMC,EAASD,EAAEC,OAAO5G,KAClBuF,EAAOoB,EAAEC,OAAO7D,MACtB,GAAoB,KAAhBwC,EAAKsB,OAAe,CACtB,IAAMC,EAAU,IAAIC,KAAKxB,GACnByB,EAAQ,IAAID,MAEbD,IADmB,IAAIC,KHlBJ,gBGmBaD,IAAYE,IACpC,cAAXJ,EAAyBP,EAAad,GAAQgB,EAAWhB,MAezD0B,EAAqB,SAACC,GAC1B,IAAIC,EAAW/B,IAAMkB,EH9CK,cG+CtBc,EAAahC,IAAMb,EH/CG,cGgDpB8C,EAAcnC,EAAWoC,MAAK,SAACjG,GAAD,OAAQA,EAAGrB,OAASwG,KACrDzD,MACH,GAAY,SAARmE,GAGF,GAFAC,EAAWA,EAASI,IAAIF,EAAa,SACrCD,EAAaA,EAAWG,IAAIF,EAAa,SACrCjC,IAAM+B,GAAUK,QAAQrC,KAE1B,YADAsC,MAAM,+GAGH,GAAY,SAARP,IACTC,EAAWA,EAASvB,SAASyB,EAAa,SAC1CD,EAAaA,EAAWxB,SAASyB,EAAa,SAE1CjC,IAAMgC,GAAYM,SHnDE,eGqDtB,YADAD,MAAM,GAAD,OHpDiB,aGoDjB,+FAKLnC,EAAU6B,KACZA,EAAW1B,EAAuB0B,IAEhC7B,EAAU8B,KACZA,EAAa3B,EAAuB2B,IAEtCb,EAAWnB,IAAM+B,GAAU9B,OHzED,eG0E1BgB,EAAajB,IAAMgC,GAAY/B,OH1EL,gBG6E5B,OACE,kBAAC,GAAD,KACE,kBAACc,GAAD,CAAQwB,QAAS,kBAAMV,EAAmB,UAAU,KACpD,kBAACnB,GAAD,CACE8B,KAAM,CACJ,QACA,QACA,QACA,QACA,IACA,QACA,QACA,IACA,QACA,SAEFrE,KAAK,OACLvD,KAAK,YACL+C,MAAOwB,EACPsD,UAAQ,EACRC,SAAUpB,EACVqB,YAAY,wDApBhB,IAuBE,kBAACjC,GAAD,CACE8B,KAAM,CACJ,QACA,QACA,QACA,QACA,IACA,QACA,QACA,IACA,QACA,SAEFrE,KAAK,OACLvD,KAAK,UACL+C,MAAOuD,EACPuB,UAAQ,EACRC,SAAUpB,EACVqB,YAAY,wDAEd,kBAAC5B,GAAD,CAAQwB,QAAS,kBAAMV,EAAmB,UAAU,KACpD,kBAACjB,GAAD,KACGd,GACCA,EAAW9D,KAAI,SAACC,GAAD,OACb,oCACE,kBAAC4E,GAAD,CACE+B,UAAWxB,IAAmBnF,EAAGrB,KACjC2H,QAAS,kBA7FM,SAACM,EAAQZ,GACpC,IAAI9B,EAAOH,IAAMkB,EHpCS,cGqC1Bf,EAAOA,EAAKK,SAASyB,EAAa,SAClCZ,EAAkBwB,GACd3C,EAAUC,KACZA,EAAOE,EAAuBF,IAEhCc,EAAajB,IAAMG,GAAMF,OH1CC,eGgIC6C,CAAqB7G,EAAGrB,KAAMqB,EAAG0B,UAElD,8BAAO1B,EAAGrB,aClIXmI,I,OAAuB,SAACC,GAAD,OAAYC,KAAKC,MAAe,IAATF,GAAgB,MCY9DG,GAAc,SAACC,EAAUC,EAAU1F,GAC9C,OAAOoF,IACHO,SAAS3F,EAAO,IAAM2F,SAASD,EAAU,MACxCC,SAASF,EAAU,IAAME,SAASD,EAAU,KAC7C,M,iGCbC,IAAMvI,GAAYC,IAAOC,IAAV,KAClBC,KCqNWsI,GAzMD,WAAO,IAEDrE,EACdsE,cADFC,OAAU5I,KAFM,EAKY8D,oBAAS,GALrB,mBAKXC,EALW,KAKDC,EALC,OAMUF,mBAAS,eAChCxC,IAPa,mBAMX2C,EANW,KAMHC,EANG,OASwBJ,mBAAS,eAC9CxC,IAVa,mBASXuH,EATW,KASIC,EATJ,OAY0BhF,mBAAS,eAChDxC,IAba,mBAYXyH,EAZW,KAYKC,EAZL,OAegBlF,mBAAS,cAfzB,mBAeXQ,EAfW,KAeA8B,EAfA,OAgBYtC,mBAASoB,KAhBrB,mBAgBXmB,EAhBW,KAgBFC,EAhBE,OAiBgCxC,mBAASQ,GAjBzC,mBAiBX2E,EAjBW,KAiBQC,EAjBR,KAmBlB/E,qBAAU,YACK,uCAAG,kDAAApC,EAAA,6DACRoH,EADQ,eACS7H,GACjB8H,EAFQ,eAEgB9H,GACxB+H,EAHQ,eAGiB/H,GAHjB,SAKmBO,EAAsBwC,GALzC,OASd,IATc,SAKAiF,EALA,EAKNpG,KAGJuC,EAAQ,GAET8D,GAEAA,EAAiB,GAAK9D,KAAW6D,EAAS1C,QAE3C2C,EAAiBD,EAASE,WAExB,SAACpI,GAAD,OACEA,EAAG,KACH+D,IAAMb,GAAWqB,SAASF,EAAO,OAAOL,OPtDtB,iBO4DxB,IADAK,EAAQ,GAELgE,GAEAA,EAAe,GAAKhE,KAAW6D,EAAS1C,QAEzC6C,EAAeH,EAASE,WAEtB,SAACpI,GAAD,OACEA,EAAG,KACH+D,IAAMkB,GAASV,SAASF,EAAO,OAAOL,OPrEpB,iBOyElBrE,EArCQ,CAsCZuI,EAAS,IAtCG,mBAuCTA,EAASI,MAAMH,EAAgBE,EAAe,KAI7CE,EAAkB5I,EAAMsG,MAAK,SAACjG,GAAD,OAAQA,EAAG,KAAO6H,KACjDR,SAAS1H,EAAMsG,MAAK,SAACjG,GAAD,OAAQA,EAAG,KAAO6H,KAAmB,GAAI,IAC7DlI,EAAM,GACNA,EAAM,GAAG,GACT,KAEEyH,EAAWC,SACfL,KAAKwB,IAAL,MAAAxB,KAAI,YAAQrH,EAAM2I,MAAM,GAAGvI,KAAI,SAACC,GAAD,OAAQqH,SAASrH,EAAG,GAAI,SACvD,IAEImH,EAAWE,SACfL,KAAKyB,IAAL,MAAAzB,KAAI,YAAQrH,EAAM2I,MAAM,GAAGvI,KAAI,SAACC,GAAD,OAAQqH,SAASrH,EAAG,GAAI,SACvD,IAIF+H,EAAU5H,MAAV,eACK4H,EAAU5H,MADf,CAEE2B,KAAMnC,EAAM2I,MAAM,GAAGvI,KAAI,SAACC,GAAD,OAAQA,EAAG,QAEtCgI,EAAiB7H,MAAjB,eACK4H,EAAU5H,OAEf8H,EAAkB9H,MAAlB,eACK4H,EAAU5H,OAIf4H,EAAU3H,MAAV,eACK2H,EAAU3H,MADf,CAEEoI,IAAKpB,EACLqB,IAAKtB,IAEPa,EAAiB5H,MAAjB,eACK4H,EAAiB5H,MADtB,CAEEgC,UAAW,CACTC,UAAW,eAGf4F,EAAkB7H,MAAlB,eACK4H,EAAiB5H,OAItB2H,EAAU1H,OAAV,sBACK0H,EAAU1H,QADf,CAEE,CACEyB,KAAMnC,EAAM2I,MAAM,GAAGvI,KAAI,SAACC,GAAD,OAAQqH,SAASrH,EAAG,GAAI,OACjDkC,KAAM,OACNvD,KAAK,GAAD,OACFD,EAAUuH,MAAK,SAACjG,GAAD,OAAQA,EAAGpB,OAASqE,KAAWtE,KAD5C,YAEAsE,MAGR+E,EAAiB3H,OAAjB,sBACK2H,EAAiB3H,QADtB,CAEE,CACEyB,KAAMnC,EACH2I,MAAM,GACNvI,KAAI,SAACC,GAAD,OFpIUuF,EEoISgD,EFpID7G,EEoIkB2F,SAASrH,EAAG,GAAI,IFnI5D8G,IACHO,SAAS3F,EAAO,IAAM2F,SAAS9B,EAAQ,KAAO8B,SAAS9B,EAAQ,IAAO,KAFlD,IAACA,EAAQ7D,KEqIzBQ,KAAM,OACNvD,KAAK,GAAD,OACFD,EAAUuH,MAAK,SAACjG,GAAD,OAAQA,EAAGpB,OAASqE,KAAWtE,KAD5C,YAEAsE,MAGRgF,EAAkB5H,OAAlB,sBACK4H,EAAkB5H,QADvB,CAEE,CACEyB,KAAMnC,EACH2I,MAAM,GACNvI,KAAI,SAACC,GAAD,OAAQkH,GAAYC,EAAUC,EAAUC,SAASrH,EAAG,GAAI,QAC/DkC,KAAM,OACNvD,KAAK,GAAD,OACFD,EAAUuH,MAAK,SAACjG,GAAD,OAAQA,EAAGpB,OAASqE,KAAWtE,KAD5C,YAEAsE,MAIRH,EAAUiF,GACVL,EAAiBM,GACjBJ,EAAkBK,GAClBrF,GAAU,GA7HI,4CAAH,qDAgIb8F,KACC,CAACb,EAAmB3E,EAAW+B,EAAShC,IAQ3C,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CACEC,UAAWA,EACX8B,aAAcA,EACdC,QAASA,EACTC,WAAYA,IAEbvC,GACC,8IAEE,kBAAC,EAAD,CACEJ,UAAWM,EACXJ,MAAO,CAAElC,OAAQ,QAASC,MAAO,WAItCmC,GACC,oCACGkF,EADH,gJAGE,kBAAC,EAAD,CACEtF,UAAWkF,EACXjF,SAAU,CACRmG,MA9BS,SAACnB,GAAY,IACxB7I,EAAS6I,EAAT7I,KACRiK,QAAQC,IAAIlK,GACZmJ,EAAqBnJ,KA6Bb8D,MAAO,CAAElC,OAAQ,QAASC,MAAO,WAItCmC,GACC,wHAEE,kBAAC,EAAD,CACEJ,UAAWoF,EACXlF,MAAO,CAAElC,OAAQ,QAASC,MAAO,WAItCmC,GAAY,kBAAC,EAAD,CAAYM,UAAWA,EAAWC,UAAWA,M,iGCjNzD,IAAMrE,GAAYC,IAAOC,IAAV,KAClBC,KC6GW8J,GApGG,WAAO,IAAD,EACQpG,oBAAS,GADjB,mBACfC,EADe,KACLC,EADK,OAEMF,mBAAS,eAChCxC,IAHiB,mBAEf2C,EAFe,KAEPC,EAFO,OAKcJ,mBAAS,eACxCxC,IANiB,mBAKf6I,EALe,KAKHC,EALG,OAQwBtG,mBAAS,eAClDxC,IATiB,mBAQf+I,EARe,KAQEC,EARF,OAWYxG,mBAAS,eACtCxC,IAZiB,mBAWfiJ,EAXe,KAWJC,EAXI,OAcY1G,mBAAS,cAdrB,mBAcfQ,EAde,KAcJ8B,EAdI,OAeQtC,mBAASoB,KAfjB,mBAefmB,EAfe,KAeNC,EAfM,KAoFtB,OAnEAnC,qBAAU,WACR,IAAMgF,EAAS,eAAQ7H,GACjBmJ,EAAa,eAAQnJ,GACrBoJ,EAAkB,eAAQpJ,GAC1BqJ,EAAY,eAAQrJ,GACpBsJ,EAAe,GAErB9K,EACGqB,KAAI,SAACC,GAAD,OAAQA,EAAGpB,QACf6K,QAFH,uCAEW,WAAO1C,GAAP,SAAApG,EAAA,sDACP6I,EAAaE,KAAKjJ,EAAsBsG,IADjC,2CAFX,uDAMA4C,QAAQC,IAAIJ,GAAclG,MAAK,SAACxB,GAC9BA,EAAK2H,SAAQ,WAAqBpF,GAAW,IAAvB6D,EAAsB,EAA5BpG,KACRqG,EAAiBD,EAASE,WAC9B,SAACpI,GAAD,OAAQA,EAAG,KAAO+D,IAAMb,GAAWc,OT9Cf,iBSgDhBqE,EAAeH,EAASE,WAC5B,SAACpI,GAAD,OAAQA,EAAG,KAAO+D,IAAMkB,GAASjB,OTjDb,iBSoDhBrE,EAAK,CACTuI,EAAS,IADA,mBAENA,EAASI,MAAMH,EAAgBE,EAAe,KAG7CwB,EAAYlK,EAAM2I,MAAM,GAAGvI,KAAI,SAACC,GAAD,OAAQqH,SAASrH,EAAG,GAAI,OAEvD8J,GAAQ9C,KAAKwB,IAAL,MAAAxB,KAAI,YAAQ6C,IAAa7C,KAAKyB,IAAL,MAAAzB,KAAI,YAAQ6C,KAAc,EAC3DE,EAEJD,EAAO,IACHR,EAEFQ,EAAO,IACLT,EACAS,EAAO,IACPP,EACAxB,EAENgC,EAAI5J,MAAJ,eACK4J,EAAI5J,MADT,CAEE2B,KAAMnC,EAAM2I,MAAM,GAAGvI,KAAI,SAACC,GAAD,OAAQA,EAAG,QAGtC+J,EAAI3J,MAAJ,eACK2J,EAAI3J,OAGT2J,EAAI1J,OAAJ,sBACK0J,EAAI1J,QADT,CAEE,CACEyB,KAAMnC,EAAM2I,MAAM,GAAGvI,KAAI,SAACC,GAAD,OAAQqH,SAASrH,EAAG,GAAI,OACjDkC,KAAM,OACNvD,KAAK,GAAD,OAAKD,EAAU2F,GAAO1F,KAAtB,YAA8BD,EAAU2F,GAAOzF,YAIzDkE,EAAUiF,GACViB,EAAcK,GACdH,EAAmBI,GACnBF,EAAaG,GACb3G,GAAU,QAEX,CAACM,EAAW+B,IAGb,kBAAC,GAAD,KACE,kBAAC,GAAD,CACE/B,UAAWA,EACX8B,aAAcA,EACdC,QAASA,EACTC,WAAYA,IAEbvC,GAAY,kBAAC,EAAD,CAAYJ,UAAW0G,IACnCtG,GAAY,kBAAC,EAAD,CAAYJ,UAAWwG,IACnCpG,GAAY,kBAAC,EAAD,CAAYJ,UAAWM,IACnCF,GAAY,kBAAC,EAAD,CAAYJ,UAAW4G,M,0FC1GnC,IAAMa,GAAUlL,IAAOC,IAAV,MCgCLkL,OAtBf,WAAgB,IACNpK,EAAgBD,EAAVD,EAAUC,EAExB,OACE,kBAAC,IAAD,KACE,kBAACoK,GAAD,KACE,kBAAC,IAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAa5L,KAAMuB,EAAMvB,MACvB,kBAAC,GAAD,OAEF,kBAAC,EAAD,CAAaA,KAAMyB,EAAKzB,MACtB,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAU0B,GAAID,EAAKzB,WCfT8L,QACW,cAA7BrJ,OAAOC,SAASqJ,UAEe,UAA7BtJ,OAAOC,SAASqJ,UAEhBtJ,OAAOC,SAASqJ,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtH,MAAK,SAAAuH,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.f90e68e2.chunk.js","sourcesContent":["const root = {\n  path: '/stock',\n  url: '/stock',\n  description: 'Main Page',\n};\n\nconst stock = {\n  path: '/stock/code/:code',\n  url: '/stock/code/',\n  description: 'Stock Page',\n};\n\nexport default {\n  root,\n  stock,\n};\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst CommonRoute = ({ children, path, ...rest }) => {\n  return (\n    <Route path={path} {...rest}>\n      {children}\n    </Route>\n  );\n};\n\nexport default CommonRoute;\n","export const stockList = [\n  { name: '삼성전자', code: '005930' },\n  { name: 'SK하이닉스', code: '000660' },\n  { name: 'NAVER', code: '035420' },\n  { name: '삼성바이오로직스', code: '207940' },\n  { name: 'LG화학', code: '051910' },\n  { name: '셀트리온', code: '068270' },\n  { name: '삼성전자우', code: '005935' },\n  { name: '삼성SDI', code: '006400' },\n  { name: '카카오', code: '035720' },\n  { name: '현대차', code: '005380' },\n  { name: 'LG생활건강', code: '051900' },\n  { name: '현대모비스', code: '012330' },\n  { name: '삼성물산', code: '028260' },\n  { name: '엔씨소프트', code: '036570' },\n  { name: 'SK', code: '034730' },\n  { name: '삼성전기', code: '009150' },\n  { name: '삼성에스디에스', code: '018260' },\n  { name: 'KB금융', code: '105560' },\n  { name: '기아차', code: '000270' },\n  { name: 'SK이노베이션', code: '096770' },\n  { name: '대상', code: '001680' },\n  { name: '농심', code: '004370' },\n  { name: '휴비스', code: '079980' },\n  { name: '하이트진로', code: '000080' },\n  { name: 'LG디스플레이', code: '034220' },\n  { name: '일진머터리얼즈', code: '020150' },\n  { name: '에프에스티', code: '036810' },\n  { name: '삼영엠텍', code: '054540' },\n  { name: '오스코텍', code: '039200' },\n  { name: '도이치모터스', code: '067990' },\n  { name: '삼강엠엔티', code: '100090' },\n  { name: '씨에스윈드', code: '112610' },\n  { name: '케이엠더블유', code: '032500' },\n  { name: 'APPLE', code: 'AAPL' },\n  { name: 'TESLA', code: 'TSLA' },\n  { name: 'MSCI신흥국', code: 'EEM' },\n];\n","import styled, { css } from 'styled-components';\nimport { Chip, flexColumnCenterX } from 'remember-ui';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n\nexport const StockList = styled.div``;\nexport const StockItem = styled(Link)`\n  display: inline-block;\n  margin: 5px;\n  cursor: pointer;\n  text-decoration: none;\n`;\nexport const StockText = styled(Chip)`\n  ${({ active }) =>\n    active &&\n    css`\n      font-weight: bold;\n    `}\n  &:hover,\n  &:focus {\n    font-weight: bold;\n  }\n`;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { stockList } from 'constants/stock';\nimport Routes from 'routers//routes';\n\nimport { Container, StockList, StockItem, StockText } from './Navbar.styles';\n\nconst NavBar = () => {\n  const { pathname } = useLocation();\n  const { stock, root } = Routes;\n\n  return (\n    <Container>\n      <StockList>\n        <StockItem to={`${root.path}`}>\n          <StockText active={pathname === `${root.path}`}>\n            {`${root.description}`}\n          </StockText>\n        </StockItem>\n        {stockList &&\n          stockList.map((el) => (\n            <StockItem key={el.code} to={`${stock.url}${el.code}`}>\n              <StockText active={pathname === `${stock.url}${el.code}`}>\n                {`${el.name} (${el.code})`}\n              </StockText>\n            </StockItem>\n          ))}\n      </StockList>\n    </Container>\n  );\n};\n\nexport default NavBar;\n","export const chartOption = { xAxis: {}, yAxis: {}, series: [] };\nexport const chartStyle = { height: '700px', width: '100%' };\n","import { readString } from 'react-papaparse';\n\nexport const fetchStockDataFromCsv = async (stockNumber) => {\n  const response = await fetch(\n    `${window.location.origin}/stock/data/${stockNumber}.csv`\n  );\n  const reader = response.body.getReader();\n  const result = await reader.read(); // raw array\n  const decoder = new TextDecoder('utf-8');\n  const csv = decoder.decode(result.value); // the csv text\n  return readString(csv);\n};\n","import React, { useEffect, useState } from 'react';\nimport ReactEcharts from 'echarts-for-react';\n\nimport { chartStyle } from 'constants/chart';\nimport { stockList } from 'constants/stock';\n\nconst defaultOption = {\n  legend: {\n    data: stockList.map((el) => `${el.name}/${el.code}`),\n  },\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      animation: false,\n    },\n    // formatter: function (params) {\n    //   console.log(params);\n    //   return `날짜 : ${params[0].name} <br> 가격 : ${params[0].value} <br> 종목 :  ${params[0].seriesName}`;\n    // },\n  },\n  xAxis: {\n    type: 'category',\n    data: [],\n  },\n  yAxis: {\n    type: 'value',\n    axisLabel: {\n      formatter: '{value} 원',\n    },\n    // min: 0,\n    // max: 0,\n    // interval: 0,\n  },\n  series: [],\n};\n\nconst StockChart = ({ chartData, onEvents, style = { ...chartStyle } }) => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({ ...defaultOption });\n\n  useEffect(() => {\n    setOption({\n      legend: {\n        ...defaultOption.legend,\n      },\n      tooltip: {\n        ...defaultOption.tooltip,\n      },\n      xAxis: {\n        ...defaultOption.xAxis,\n        ...chartData.xAxis,\n      },\n      yAxis: {\n        ...defaultOption.yAxis,\n        ...chartData.yAxis,\n      },\n      series: [...defaultOption.series, ...chartData.series],\n    });\n    setLoaded(true);\n  }, [chartData]);\n\n  return (\n    <>\n      {isLoaded && (\n        <ReactEcharts style={style} option={option} onEvents={onEvents} />\n      )}\n    </>\n  );\n};\n\nexport default StockChart;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport XMLParser from 'react-xml-parser';\n\nconst StockTable = ({ stockCode, startDate }) => {\n  const [stock, setStock] = useState('');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await axios\n        .get(\n          `https://cors-anywhere.herokuapp.com/http://asp1.krx.co.kr/servlet/krx.asp.XMLSiseEng?code=${stockCode}`,\n          {\n            'Content-Type': 'application/xml; charset=utf-8',\n          }\n        )\n        .then((res) => {\n          const xml = new XMLParser();\n          const { children } = xml.parseFromString(res.data);\n          setStock(JSON.stringify(children));\n        });\n    };\n    fetchData();\n  }, [stockCode]);\n\n  return <>{stock && <div>{stock}</div>}</>;\n};\n\nexport default StockTable;\n","export const CalendarFormat = 'YYYY-MM-DD';\nexport const defaultOffset = '1 year';\nexport const OffsetList = [\n  { name: '1 month', value: 1 },\n  { name: '3 month', value: 3 },\n  { name: '6 month', value: 6 },\n  { name: '1 year', value: 12 },\n  { name: '3 year', value: 36 },\n  { name: '5 year', value: 60 },\n];\nexport const chartStartDate = '2015-01-02';\n","import dayjs from 'dayjs';\n\nimport { CalendarFormat } from 'constants/calendar';\n\nexport const getTodayDate = () => dayjs().format(CalendarFormat);\n\nexport const isWeekend = (date) =>\n  dayjs(date).day() === 0 || dayjs(date).day() === 6;\n\nexport const getDayOfWeek = (date) => dayjs(date).day();\n\nexport const getAdjustDateToWeekDay = (date) => {\n  const day = getDayOfWeek(date);\n  const index = day === 0 ? 2 : 1;\n  return dayjs(date).subtract(index, 'day').format(CalendarFormat);\n};\n","import styled from 'styled-components';\nimport { flexCenterX, Radio, MaskingInput } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexCenterX}\n\n  align-items: center;\n`;\n\nexport const DateInput = styled(MaskingInput)`\n  padding: 0px 10px;\n`;\n\nexport const OffsetContainer = styled.div`\n  ${flexCenterX}\n  padding:20px;\n`;\n\nexport const OffsetDate = styled(Radio)``;\n\nexport const Cursor = styled.div`\n  cursor: pointer;\n`;\n","import React, { useState } from 'react';\nimport dayjs from 'dayjs';\n\nimport {\n  defaultOffset,\n  OffsetList,\n  chartStartDate,\n  CalendarFormat,\n} from 'constants/calendar';\nimport { isWeekend, getAdjustDateToWeekDay, getTodayDate } from 'utils/day';\n\nimport {\n  DateInput,\n  Container,\n  OffsetContainer,\n  OffsetDate,\n  Cursor,\n} from './StockCalendar.styles';\n\nconst StockCalendar = ({ startDate, setStartDate, endDate, setEndDate }) => {\n  const [calendarOffset, setCalendarOffset] = useState(defaultOffset);\n\n  const handleChange = (e) => {\n    const target = e.target.name;\n    const date = e.target.value;\n    if (date.length === 10) {\n      const newDate = new Date(date);\n      const today = new Date();\n      const _chartStartDate = new Date(chartStartDate);\n      if (+newDate >= +_chartStartDate && +newDate <= +today) {\n        target === 'startDate' ? setStartDate(date) : setEndDate(date);\n      }\n    }\n  };\n\n  const handleCalendarOffset = (offset, offsetValue) => {\n    let date = dayjs(endDate, CalendarFormat);\n    date = date.subtract(offsetValue, 'month');\n    setCalendarOffset(offset);\n    if (isWeekend(date)) {\n      date = getAdjustDateToWeekDay(date);\n    }\n    setStartDate(dayjs(date).format(CalendarFormat));\n  };\n\n  const handleDateByOffset = (dir) => {\n    let _endDate = dayjs(endDate, CalendarFormat);\n    let _startDate = dayjs(startDate, CalendarFormat);\n    const offsetValue = OffsetList.find((el) => el.name === calendarOffset)\n      .value;\n    if (dir === 'next') {\n      _endDate = _endDate.add(offsetValue, 'month');\n      _startDate = _startDate.add(offsetValue, 'month');\n      if (dayjs(_endDate).isAfter(getTodayDate())) {\n        alert('오늘 이후의 날짜는 선택할 수 없습니다.');\n        return;\n      }\n    } else if (dir === 'prev') {\n      _endDate = _endDate.subtract(offsetValue, 'month');\n      _startDate = _startDate.subtract(offsetValue, 'month');\n\n      if (dayjs(_startDate).isBefore(chartStartDate)) {\n        alert(`${chartStartDate} 이전의 날짜는 선택할 수 없습니다.`);\n        return;\n      }\n    }\n\n    if (isWeekend(_endDate)) {\n      _endDate = getAdjustDateToWeekDay(_endDate);\n    }\n    if (isWeekend(_startDate)) {\n      _startDate = getAdjustDateToWeekDay(_startDate);\n    }\n    setEndDate(dayjs(_endDate).format(CalendarFormat));\n    setStartDate(dayjs(_startDate).format(CalendarFormat));\n  };\n\n  return (\n    <Container>\n      <Cursor onClick={() => handleDateByOffset('prev')}>{'<'}</Cursor>\n      <DateInput\n        mask={[\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n        ]}\n        type=\"text\"\n        name=\"startDate\"\n        value={startDate}\n        required\n        onChange={handleChange}\n        placeholder=\"8자리 숫자 입력(2015-01-02)\"\n      />\n      ~\n      <DateInput\n        mask={[\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n          '-',\n          /[0-9]/,\n          /[0-9]/,\n        ]}\n        type=\"text\"\n        name=\"endDate\"\n        value={endDate}\n        required\n        onChange={handleChange}\n        placeholder=\"8자리 숫자 입력(2015-01-02)\"\n      />\n      <Cursor onClick={() => handleDateByOffset('next')}>{'>'}</Cursor>\n      <OffsetContainer>\n        {OffsetList &&\n          OffsetList.map((el) => (\n            <>\n              <OffsetDate\n                isChecked={calendarOffset === el.name}\n                onClick={() => handleCalendarOffset(el.name, el.value)}\n              />\n              <span>{el.name}</span>\n            </>\n          ))}\n      </OffsetContainer>\n    </Container>\n  );\n};\n\nexport default StockCalendar;\n","export const getRoundTwoPrecision = (number) => Math.round(number * 100) / 100;\n","import dayjs from 'dayjs';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\n\nimport { CalendarFormat } from 'constants/calendar';\nimport { getRoundTwoPrecision } from 'utils/utils';\n\nexport const getPercent = (target, value) => {\n  return getRoundTwoPrecision(\n    ((parseInt(value, 10) - parseInt(target, 10)) / parseInt(target, 10)) * 100\n  );\n};\n\nexport const getRelative = (maxValue, minValue, value) => {\n  return getRoundTwoPrecision(\n    ((parseInt(value, 10) - parseInt(minValue, 10)) /\n      (parseInt(maxValue, 10) - parseInt(minValue, 10))) *\n      100\n  );\n};\n\nexport const generateDayBetween = (startDate, endDate) => {\n  let _start = dayjs(startDate).format(CalendarFormat);\n  const _end = dayjs(endDate).format(CalendarFormat);\n  const days = [];\n\n  dayjs.extend(isSameOrBefore);\n  while (dayjs(_start).isSameOrBefore(_end)) {\n    days.push([_start, '0', '0', '0', '0', '0', '0']);\n    _start = dayjs(_start).add(1, 'day').format(CalendarFormat);\n  }\n\n  return days;\n};\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport dayjs from 'dayjs';\n\nimport { stockList } from 'constants/stock';\nimport { chartOption } from 'constants/chart';\nimport { fetchStockDataFromCsv } from 'services/stock';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockTable from 'components/StockTable/StockTable';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport { getPercent, getRelative } from 'utils/chart';\nimport { CalendarFormat } from 'constants/calendar';\n\nimport { Container } from './Stock.styles';\n\nconst Stock = () => {\n  const {\n    params: { code: stockCode },\n  } = useRouteMatch();\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionPercent, setOptionPercent] = useState({\n    ...chartOption,\n  });\n  const [optionRelative, setOptionRelative] = useState({\n    ...chartOption,\n  });\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n  const [percentTargetDate, setPercentTargetDate] = useState(startDate);\n\n  useEffect(() => {\n    const getData = async () => {\n      const stockData = { ...chartOption };\n      const stockDataPercent = { ...chartOption };\n      const stockDataRelative = { ...chartOption };\n\n      const { data: stockAll } = await fetchStockDataFromCsv(stockCode);\n\n      let startDateIndex;\n      let index = 0;\n      while (\n        !startDateIndex ||\n        // eslint-disable-next-line no-plusplus\n        (startDateIndex < 0 && index++ <= stockAll.length)\n      ) {\n        startDateIndex = stockAll.findIndex(\n          // eslint-disable-next-line no-loop-func\n          (el) =>\n            el[0] ===\n            dayjs(startDate).subtract(index, 'day').format(CalendarFormat)\n        );\n      }\n\n      let endDateIndex;\n      index = 0;\n      while (\n        !endDateIndex ||\n        // eslint-disable-next-line no-plusplus\n        (endDateIndex < 0 && index++ <= stockAll.length)\n      ) {\n        endDateIndex = stockAll.findIndex(\n          // eslint-disable-next-line no-loop-func\n          (el) =>\n            el[0] ===\n            dayjs(endDate).subtract(index, 'day').format(CalendarFormat)\n        );\n      }\n\n      const stock = [\n        stockAll[0],\n        ...stockAll.slice(startDateIndex, endDateIndex + 1),\n      ];\n      // console.log(startDateIndex, endDateIndex);\n\n      const targetDateValue = stock.find((el) => el[0] === percentTargetDate)\n        ? parseInt(stock.find((el) => el[0] === percentTargetDate)[4], 10)\n        : stock[1]\n        ? stock[1][4]\n        : null;\n\n      const minValue = parseInt(\n        Math.min(...stock.slice(1).map((el) => parseInt(el[4], 10))),\n        10\n      );\n      const maxValue = parseInt(\n        Math.max(...stock.slice(1).map((el) => parseInt(el[4], 10))),\n        10\n      );\n\n      // x축\n      stockData.xAxis = {\n        ...stockData.xAxis,\n        data: stock.slice(1).map((el) => el[0]),\n      };\n      stockDataPercent.xAxis = {\n        ...stockData.xAxis,\n      };\n      stockDataRelative.xAxis = {\n        ...stockData.xAxis,\n      };\n\n      // y축\n      stockData.yAxis = {\n        ...stockData.yAxis,\n        min: minValue,\n        max: maxValue,\n      };\n      stockDataPercent.yAxis = {\n        ...stockDataPercent.yAxis,\n        axisLabel: {\n          formatter: '{value} %',\n        },\n      };\n      stockDataRelative.yAxis = {\n        ...stockDataPercent.yAxis,\n      };\n\n      // series Data\n      stockData.series = [\n        ...stockData.series,\n        {\n          data: stock.slice(1).map((el) => parseInt(el[4], 10)),\n          type: 'line',\n          name: `${\n            stockList.find((el) => el.code === stockCode).name\n          }/${stockCode}`,\n        },\n      ];\n      stockDataPercent.series = [\n        ...stockDataPercent.series,\n        {\n          data: stock\n            .slice(1)\n            .map((el) => getPercent(targetDateValue, parseInt(el[4], 10))),\n          type: 'line',\n          name: `${\n            stockList.find((el) => el.code === stockCode).name\n          }/${stockCode}`,\n        },\n      ];\n      stockDataRelative.series = [\n        ...stockDataRelative.series,\n        {\n          data: stock\n            .slice(1)\n            .map((el) => getRelative(maxValue, minValue, parseInt(el[4], 10))),\n          type: 'line',\n          name: `${\n            stockList.find((el) => el.code === stockCode).name\n          }/${stockCode}`,\n        },\n      ];\n\n      setOption(stockData);\n      setOptionPercent(stockDataPercent);\n      setOptionRelative(stockDataRelative);\n      setLoaded(true);\n    };\n\n    getData();\n  }, [percentTargetDate, startDate, endDate, stockCode]);\n\n  const onChartClick = (params) => {\n    const { name } = params;\n    console.log(name);\n    setPercentTargetDate(name);\n  };\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && (\n        <>\n          종가 그래프( Y축 : 기간 내 최저가 ~ 최고가)\n          <StockChart\n            chartData={option}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n      {isLoaded && (\n        <>\n          {percentTargetDate}일( 기준일 = 0% ) 대비 상승/하락 률 ( 그래프 클릭\n          날짜 변경 )\n          <StockChart\n            chartData={optionPercent}\n            onEvents={{\n              click: onChartClick,\n            }}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n      {isLoaded && (\n        <>\n          최저가(0%) / 최고가(100%) 대비 그래프\n          <StockChart\n            chartData={optionRelative}\n            style={{ height: '300px', width: '100%' }}\n          />\n        </>\n      )}\n      {isLoaded && <StockTable stockCode={stockCode} startDate={startDate} />}\n    </Container>\n  );\n};\n\nexport default Stock;\n","import styled from 'styled-components';\nimport { flexColumnCenterX } from 'remember-ui';\n\nexport const Container = styled.div`\n  ${flexColumnCenterX}\n  padding:20px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\n\nimport { stockList } from 'constants/stock';\nimport { chartOption } from 'constants/chart';\nimport { fetchStockDataFromCsv } from 'services/stock';\nimport StockChart from 'components/StockChart/StockChart';\nimport StockCalendar from 'components/StockCalendar/StockCalendar';\nimport { getTodayDate } from 'utils/day';\nimport { CalendarFormat } from 'constants/calendar';\n\nimport { Container } from './Dashboard.styles';\n\nconst Dashboard = () => {\n  const [isLoaded, setLoaded] = useState(false);\n  const [option, setOption] = useState({\n    ...chartOption,\n  });\n  const [optionHigh, setOptionHigh] = useState({\n    ...chartOption,\n  });\n  const [optionExtraHigh, setOptionExtraHigh] = useState({\n    ...chartOption,\n  });\n  const [optionLow, setOptionLow] = useState({\n    ...chartOption,\n  });\n  const [startDate, setStartDate] = useState('2020-01-02');\n  const [endDate, setEndDate] = useState(getTodayDate());\n\n  useEffect(() => {\n    const stockData = { ...chartOption };\n    const stockDataHigh = { ...chartOption };\n    const stockDataExtraHigh = { ...chartOption };\n    const stockDataLow = { ...chartOption };\n    const fetchAllData = [];\n\n    stockList\n      .map((el) => el.code)\n      .forEach(async (number) => {\n        fetchAllData.push(fetchStockDataFromCsv(number));\n      });\n\n    Promise.all(fetchAllData).then((data) => {\n      data.forEach(({ data: stockAll }, index) => {\n        const startDateIndex = stockAll.findIndex(\n          (el) => el[0] === dayjs(startDate).format(CalendarFormat)\n        );\n        const endDateIndex = stockAll.findIndex(\n          (el) => el[0] === dayjs(endDate).format(CalendarFormat)\n        );\n\n        const stock = [\n          stockAll[0],\n          ...stockAll.slice(startDateIndex, endDateIndex + 1),\n        ];\n\n        const priceList = stock.slice(1).map((el) => parseInt(el[4], 10));\n\n        const mean = (Math.min(...priceList) + Math.max(...priceList)) / 2;\n        const ref =\n          // eslint-disable-next-line no-nested-ternary\n          mean > 400000\n            ? stockDataExtraHigh\n            : // eslint-disable-next-line no-nested-ternary\n            mean > 200000\n            ? stockDataHigh\n            : mean < 50000\n            ? stockDataLow\n            : stockData;\n\n        ref.xAxis = {\n          ...ref.xAxis,\n          data: stock.slice(1).map((el) => el[0]),\n        };\n\n        ref.yAxis = {\n          ...ref.yAxis,\n        };\n\n        ref.series = [\n          ...ref.series,\n          {\n            data: stock.slice(1).map((el) => parseInt(el[4], 10)),\n            type: 'line',\n            name: `${stockList[index].name}/${stockList[index].code}`,\n          },\n        ];\n      });\n      setOption(stockData);\n      setOptionHigh(stockDataHigh);\n      setOptionExtraHigh(stockDataExtraHigh);\n      setOptionLow(stockDataLow);\n      setLoaded(true);\n    });\n  }, [startDate, endDate]);\n\n  return (\n    <Container>\n      <StockCalendar\n        startDate={startDate}\n        setStartDate={setStartDate}\n        endDate={endDate}\n        setEndDate={setEndDate}\n      />\n      {isLoaded && <StockChart chartData={optionExtraHigh} />}\n      {isLoaded && <StockChart chartData={optionHigh} />}\n      {isLoaded && <StockChart chartData={option} />}\n      {isLoaded && <StockChart chartData={optionLow} />}\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const AppBody = styled.div`\n  height: 100%;\n`;\n","import React from 'react';\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom';\nimport { GlobalTheme } from 'remember-ui';\n\nimport Routes from 'routers//routes';\nimport CommonRoute from 'routers/CommonRoute';\nimport NavBar from 'components/NavBar/NavBar';\nimport Stock from 'pages/Stock/Stock';\nimport Dashboard from 'pages/Dashboard/Dashboard';\n\nimport { AppBody } from './App.styles';\n\nfunction App() {\n  const { root, stock } = Routes;\n\n  return (\n    <BrowserRouter>\n      <AppBody>\n        <GlobalTheme />\n        <NavBar />\n        <Switch>\n          <CommonRoute path={stock.path}>\n            <Stock />\n          </CommonRoute>\n          <CommonRoute path={root.path}>\n            <Dashboard />\n          </CommonRoute>\n          <Redirect to={root.path} />\n        </Switch>\n      </AppBody>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}